# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _array
else:
    import _array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_SwigPyIterator

    def value(self):
        return _array.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _array.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _array.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _array.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _array.SwigPyIterator_equal(self, x)

    def copy(self):
        return _array.SwigPyIterator_copy(self)

    def next(self):
        return _array.SwigPyIterator_next(self)

    def __next__(self):
        return _array.SwigPyIterator___next__(self)

    def previous(self):
        return _array.SwigPyIterator_previous(self)

    def advance(self, n):
        return _array.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _array.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _array.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _array.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _array.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _array.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _array.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _array:
_array.SwigPyIterator_swigregister(SwigPyIterator)

class fcomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.fcomplex_swiginit(self, _array.new_fcomplex(*args))

    def real(self, *args):
        return _array.fcomplex_real(self, *args)

    def imag(self, *args):
        return _array.fcomplex_imag(self, *args)

    def __add__(self, b):
        return _array.fcomplex___add__(self, b)

    def __sub__(self, b):
        return _array.fcomplex___sub__(self, b)

    def __div__(self, b):
        return _array.fcomplex___div__(self, b)

    def __mul__(self, b):
        return _array.fcomplex___mul__(self, b)

    def __pow__(self, *args):
        return _array.fcomplex___pow__(self, *args)

    def __eq__(self, b):
        return _array.fcomplex___eq__(self, b)
    __swig_destroy__ = _array.delete_fcomplex

# Register fcomplex in _array:
_array.fcomplex_swigregister(fcomplex)

class zcomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.zcomplex_swiginit(self, _array.new_zcomplex(*args))

    def real(self, *args):
        return _array.zcomplex_real(self, *args)

    def imag(self, *args):
        return _array.zcomplex_imag(self, *args)

    def __add__(self, b):
        return _array.zcomplex___add__(self, b)

    def __sub__(self, b):
        return _array.zcomplex___sub__(self, b)

    def __div__(self, b):
        return _array.zcomplex___div__(self, b)

    def __mul__(self, b):
        return _array.zcomplex___mul__(self, b)

    def __pow__(self, *args):
        return _array.zcomplex___pow__(self, *args)

    def __eq__(self, b):
        return _array.zcomplex___eq__(self, b)
    __swig_destroy__ = _array.delete_zcomplex

# Register zcomplex in _array:
_array.zcomplex_swigregister(zcomplex)

class ArrayXf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXf_swiginit(self, _array.new_ArrayXf(*args))
    __swig_destroy__ = _array.delete_ArrayXf

    def __call__(self, i):
        return _array.ArrayXf___call__(self, i)

    def size(self):
        return _array.ArrayXf_size(self)

    def resize(self, size):
        return _array.ArrayXf_resize(self, size)

    def setRandom(self):
        return _array.ArrayXf_setRandom(self)

    def fill(self, v):
        return _array.ArrayXf_fill(self, v)

    def cols(self):
        return _array.ArrayXf_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXf___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXf___getitem__(self, i)

    def println(self):
        return _array.ArrayXf_println(self)

    def __add__(self, b):
        return _array.ArrayXf___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXf___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXf___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXf___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXf in _array:
_array.ArrayXf_swigregister(ArrayXf)

class ArrayXd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXd_swiginit(self, _array.new_ArrayXd(*args))
    __swig_destroy__ = _array.delete_ArrayXd

    def __call__(self, i):
        return _array.ArrayXd___call__(self, i)

    def size(self):
        return _array.ArrayXd_size(self)

    def resize(self, size):
        return _array.ArrayXd_resize(self, size)

    def setRandom(self):
        return _array.ArrayXd_setRandom(self)

    def fill(self, v):
        return _array.ArrayXd_fill(self, v)

    def cols(self):
        return _array.ArrayXd_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXd___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXd___getitem__(self, i)

    def println(self):
        return _array.ArrayXd_println(self)

    def __add__(self, b):
        return _array.ArrayXd___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXd___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXd___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXd___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXd in _array:
_array.ArrayXd_swigregister(ArrayXd)

class ArrayXi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXi_swiginit(self, _array.new_ArrayXi(*args))
    __swig_destroy__ = _array.delete_ArrayXi

    def __call__(self, i):
        return _array.ArrayXi___call__(self, i)

    def size(self):
        return _array.ArrayXi_size(self)

    def resize(self, size):
        return _array.ArrayXi_resize(self, size)

    def setRandom(self):
        return _array.ArrayXi_setRandom(self)

    def fill(self, v):
        return _array.ArrayXi_fill(self, v)

    def cols(self):
        return _array.ArrayXi_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXi___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXi___getitem__(self, i)

    def println(self):
        return _array.ArrayXi_println(self)

    def __add__(self, b):
        return _array.ArrayXi___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXi___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXi___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXi___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXi in _array:
_array.ArrayXi_swigregister(ArrayXi)

class ArrayXl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXl_swiginit(self, _array.new_ArrayXl(*args))
    __swig_destroy__ = _array.delete_ArrayXl

    def __call__(self, i):
        return _array.ArrayXl___call__(self, i)

    def size(self):
        return _array.ArrayXl_size(self)

    def resize(self, size):
        return _array.ArrayXl_resize(self, size)

    def setRandom(self):
        return _array.ArrayXl_setRandom(self)

    def fill(self, v):
        return _array.ArrayXl_fill(self, v)

    def cols(self):
        return _array.ArrayXl_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXl___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXl___getitem__(self, i)

    def println(self):
        return _array.ArrayXl_println(self)

    def __add__(self, b):
        return _array.ArrayXl___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXl___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXl___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXl___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXl in _array:
_array.ArrayXl_swigregister(ArrayXl)

class ArrayXc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXc_swiginit(self, _array.new_ArrayXc(*args))
    __swig_destroy__ = _array.delete_ArrayXc

    def __call__(self, i):
        return _array.ArrayXc___call__(self, i)

    def size(self):
        return _array.ArrayXc_size(self)

    def resize(self, size):
        return _array.ArrayXc_resize(self, size)

    def setRandom(self):
        return _array.ArrayXc_setRandom(self)

    def fill(self, v):
        return _array.ArrayXc_fill(self, v)

    def cols(self):
        return _array.ArrayXc_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXc___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXc___getitem__(self, i)

    def println(self):
        return _array.ArrayXc_println(self)

    def __add__(self, b):
        return _array.ArrayXc___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXc___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXc___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXc___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXc in _array:
_array.ArrayXc_swigregister(ArrayXc)

class ArrayXz(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _array.ArrayXz_swiginit(self, _array.new_ArrayXz(*args))
    __swig_destroy__ = _array.delete_ArrayXz

    def __call__(self, i):
        return _array.ArrayXz___call__(self, i)

    def size(self):
        return _array.ArrayXz_size(self)

    def resize(self, size):
        return _array.ArrayXz_resize(self, size)

    def setRandom(self):
        return _array.ArrayXz_setRandom(self)

    def fill(self, v):
        return _array.ArrayXz_fill(self, v)

    def cols(self):
        return _array.ArrayXz_cols(self)

    def __setitem__(self, i, v):
        return _array.ArrayXz___setitem__(self, i, v)

    def __getitem__(self, i):
        return _array.ArrayXz___getitem__(self, i)

    def println(self):
        return _array.ArrayXz_println(self)

    def __add__(self, b):
        return _array.ArrayXz___add__(self, b)

    def __sub__(self, b):
        return _array.ArrayXz___sub__(self, b)

    def __mul__(self, b):
        return _array.ArrayXz___mul__(self, b)

    def __truediv__(self, *args):
        return _array.ArrayXz___truediv__(self, *args)
    __div__ = __truediv__



# Register ArrayXz in _array:
_array.ArrayXz_swigregister(ArrayXz)


def absf(array):
    return _array.absf(array)

def abs2f(array):
    return _array.abs2f(array)

def inversef(array):
    return _array.inversef(array)

def expf(array):
    return _array.expf(array)

def logf(array):
    return _array.logf(array)

def log1pf(array):
    return _array.log1pf(array)

def log10f(array):
    return _array.log10f(array)

def powf(array, b):
    return _array.powf(array, b)

def sqrtf(array):
    return _array.sqrtf(array)

def rsqrtf(array):
    return _array.rsqrtf(array)

def square(array):
    return _array.square(array)

def cube(array):
    return _array.cube(array)

def sinf(array):
    return _array.sinf(array)

def cosf(array):
    return _array.cosf(array)

def tanf(array):
    return _array.tanf(array)

def asinf(array):
    return _array.asinf(array)

def acosf(array):
    return _array.acosf(array)

def atanf(array):
    return _array.atanf(array)

def sinhf(array):
    return _array.sinhf(array)

def coshf(array):
    return _array.coshf(array)

def tanhf(array):
    return _array.tanhf(array)

def asinhf(array):
    return _array.asinhf(array)

def acoshf(array):
    return _array.acoshf(array)

def atanhf(array):
    return _array.atanhf(array)

def floorf(array):
    return _array.floorf(array)

def ceilf(array):
    return _array.ceilf(array)

def roundf(array):
    return _array.roundf(array)

def rintf(array):
    return _array.rintf(array)

def sizef(array):
    return _array.sizef(array)

def randomf(*args):
    return _array.randomf(*args)

def fillf(array, v):
    return _array.fillf(array, v)

def colsf(array):
    return _array.colsf(array)

def resizef(a, n):
    return _array.resizef(a, n)

def cfreal(z):
    return _array.cfreal(z)

def czreal(z):
    return _array.czreal(z)

def cfimag(z):
    return _array.cfimag(z)

def czimag(z):
    return _array.czimag(z)

def cfabs(z):
    return _array.cfabs(z)

def czabs(z):
    return _array.czabs(z)

def cfarg(z):
    return _array.cfarg(z)

def czarg(z):
    return _array.czarg(z)

def cfnorm(z):
    return _array.cfnorm(z)

def cznorm(z):
    return _array.cznorm(z)

def cfproj(z):
    return _array.cfproj(z)

def czproj(z):
    return _array.czproj(z)

def cfpolar(*args):
    return _array.cfpolar(*args)

def czpolar(*args):
    return _array.czpolar(*args)

def cfexp(z):
    return _array.cfexp(z)

def czexp(z):
    return _array.czexp(z)

def cflog(z):
    return _array.cflog(z)

def czlog(z):
    return _array.czlog(z)

def cflog10(z):
    return _array.cflog10(z)

def czlog10(z):
    return _array.czlog10(z)

def cfpow(*args):
    return _array.cfpow(*args)

def czpow(*args):
    return _array.czpow(*args)

def cfsqrt(z):
    return _array.cfsqrt(z)

def czsqrt(z):
    return _array.czsqrt(z)

def cfsin(z):
    return _array.cfsin(z)

def czsin(z):
    return _array.czsin(z)

def cfcos(z):
    return _array.cfcos(z)

def czcos(z):
    return _array.czcos(z)

def cftan(z):
    return _array.cftan(z)

def cztan(z):
    return _array.cztan(z)

def cfasin(z):
    return _array.cfasin(z)

def czasin(z):
    return _array.czasin(z)

def cfacos(z):
    return _array.cfacos(z)

def czacos(z):
    return _array.czacos(z)

def cfatan(z):
    return _array.cfatan(z)

def czatan(z):
    return _array.czatan(z)

def cfsinh(z):
    return _array.cfsinh(z)

def czsinh(z):
    return _array.czsinh(z)

def cfcosh(z):
    return _array.cfcosh(z)

def czcosh(z):
    return _array.czcosh(z)

def cftanh(z):
    return _array.cftanh(z)

def cztanh(z):
    return _array.cztanh(z)

def cfasinh(z):
    return _array.cfasinh(z)

def czasinh(z):
    return _array.czasinh(z)

def cfacosh(z):
    return _array.cfacosh(z)

def czacosh(z):
    return _array.czacosh(z)

def cfatanh(z):
    return _array.cfatanh(z)

def czatanh(z):
    return _array.czatanh(z)


