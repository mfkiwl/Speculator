/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef __STDC_CONSTANT_MACROS
#define __STDC_CONSTANT_MACROS
#endif



#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_MSC_VER) && _MSC_VER >= 1930
/* Workaround what seems to be a bug in the Python headers with MSVC 2022.
 * https://github.com/swig/swig/issues/2090
 */
# include <corecrt.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(swig_varlinkobject *v) {
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
      0,                                  /* tp_print */
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AOK swig_types[0]
#define SWIGTYPE_p_AudioLoader swig_types[1]
#define SWIGTYPE_p_Autocorrelation swig_types[2]
#define SWIGTYPE_p_BandFilter swig_types[3]
#define SWIGTYPE_p_Bands swig_types[4]
#define SWIGTYPE_p_BarkBands swig_types[5]
#define SWIGTYPE_p_Correlation swig_types[6]
#define SWIGTYPE_p_DCT swig_types[7]
#define SWIGTYPE_p_FFT swig_types[8]
#define SWIGTYPE_p_FFTComplex swig_types[9]
#define SWIGTYPE_p_Filter swig_types[10]
#define SWIGTYPE_p_FrameCutter swig_types[11]
#define SWIGTYPE_p_IFFT swig_types[12]
#define SWIGTYPE_p_INMF swig_types[13]
#define SWIGTYPE_p_LPC swig_types[14]
#define SWIGTYPE_p_LPCResidual swig_types[15]
#define SWIGTYPE_p_MFCC swig_types[16]
#define SWIGTYPE_p_MatrixXC swig_types[17]
#define SWIGTYPE_p_MatrixXI swig_types[18]
#define SWIGTYPE_p_MatrixXR swig_types[19]
#define SWIGTYPE_p_Meddis swig_types[20]
#define SWIGTYPE_p_MelBands swig_types[21]
#define SWIGTYPE_p_NMF swig_types[22]
#define SWIGTYPE_p_OnsetComplex swig_types[23]
#define SWIGTYPE_p_PeakCOG swig_types[24]
#define SWIGTYPE_p_PeakDetection swig_types[25]
#define SWIGTYPE_p_PeakDetectionComplex swig_types[26]
#define SWIGTYPE_p_PeakInterpolation swig_types[27]
#define SWIGTYPE_p_PeakInterpolationComplex swig_types[28]
#define SWIGTYPE_p_PeakSynthesize swig_types[29]
#define SWIGTYPE_p_PeakTracking swig_types[30]
#define SWIGTYPE_p_PitchACF swig_types[31]
#define SWIGTYPE_p_PitchInverseProblem swig_types[32]
#define SWIGTYPE_p_PitchSaliency swig_types[33]
#define SWIGTYPE_p_Real swig_types[34]
#define SWIGTYPE_p_Resample swig_types[35]
#define SWIGTYPE_p_SpectralNoiseSuppression swig_types[36]
#define SWIGTYPE_p_SpectralODF swig_types[37]
#define SWIGTYPE_p_SpectralReassignment swig_types[38]
#define SWIGTYPE_p_SpectralWhitening swig_types[39]
#define SWIGTYPE_p_Unwrap swig_types[40]
#define SWIGTYPE_p_VoiceActivityDetection swig_types[41]
#define SWIGTYPE_p_Window swig_types[42]
#define SWIGTYPE_p_char swig_types[43]
#define SWIGTYPE_p_int swig_types[44]
#define SWIGTYPE_p_int16_t swig_types[45]
#define SWIGTYPE_p_std__string swig_types[46]
#define SWIGTYPE_p_std__vectorT_MatrixXR_t swig_types[47]
static swig_type_info *swig_types[49];
static swig_module_info swig_module = {swig_types, 48, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _loudia.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__loudia

#else
#  define SWIG_init    init_loudia

#endif
#define SWIG_name    "_loudia"

#define SWIGVERSION 0x040100 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT


#ifndef SWIG_FILE_WITH_INIT
#  define NO_IMPORT_ARRAY
#endif
#include <stdio.h>
#include <numpy/arrayobject.h>


#include <Eigen/Core>

#include "AudioLoader.h"
#include "FrameCutter.h"
#include "Filter.h"
#include "DCT.h"
#include "Window.h"
#include "MelBands.h"
#include "BarkBands.h"
#include "Bands.h"
#include "FFT.h"
#include "FFTComplex.h"
#include "IFFT.h"
#include "MFCC.h"
#include "AOK.h"
#include "Meddis.h"
#include "SpectralReassignment.h"
#include "PeakDetection.h"
#include "PeakDetectionComplex.h"
#include "PeakCOG.h"
#include "PeakInterpolation.h"
#include "PeakInterpolationComplex.h"
#include "PeakTracking.h"
#include "PeakSynthesize.h"
#include "BandFilter.h"
#include "Unwrap.h"
#include "LPC.h"
#include "LPCResidual.h"
#include "NMF.h"
#include "INMF.h"
#include "Resample.h"
#include "Correlation.h"
#include "Autocorrelation.h"
#include "SpectralNoiseSuppression.h"
#include "SpectralWhitening.h"
#include "SpectralODF.h"
#include "PitchSaliency.h"
#include "PitchACF.h"
#include "PitchInverseProblem.h"
#include "VoiceActivityDetection.h"
#include "OnsetComplex.h"

#include "MelScales.h"
#include "Utils.h"
#include "FilterUtils.h"


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


/* Support older NumPy data type names
*/
#if NDARRAY_VERSION < 0x01000000
#define NPY_BOOL          PyArray_BOOL
#define NPY_BYTE          PyArray_BYTE
#define NPY_UBYTE         PyArray_UBYTE
#define NPY_SHORT         PyArray_SHORT
#define NPY_USHORT        PyArray_USHORT
#define NPY_INT           PyArray_INT
#define NPY_UINT          PyArray_UINT
#define NPY_LONG          PyArray_LONG
#define NPY_ULONG         PyArray_ULONG
#define NPY_LONGLONG      PyArray_LONGLONG
#define NPY_ULONGLONG     PyArray_ULONGLONG
#define NPY_FLOAT         PyArray_FLOAT
#define NPY_DOUBLE        PyArray_DOUBLE
#define NPY_LONGDOUBLE    PyArray_LONGDOUBLE
#define NPY_CFLOAT        PyArray_CFLOAT
#define NPY_CDOUBLE       PyArray_CDOUBLE
#define NPY_CLONGDOUBLE   PyArray_CLONGDOUBLE
#define NPY_OBJECT        PyArray_OBJECT
#define NPY_STRING        PyArray_STRING
#define NPY_UNICODE       PyArray_UNICODE
#define NPY_VOID          PyArray_VOID
#define NPY_NTYPES        PyArray_NTYPES
#define NPY_NOTYPE        PyArray_NOTYPE
#define NPY_CHAR          PyArray_CHAR
#define NPY_USERDEF       PyArray_USERDEF
#define npy_intp          intp

#define NPY_MAX_BYTE      MAX_BYTE
#define NPY_MIN_BYTE      MIN_BYTE
#define NPY_MAX_UBYTE     MAX_UBYTE
#define NPY_MAX_SHORT     MAX_SHORT
#define NPY_MIN_SHORT     MIN_SHORT
#define NPY_MAX_USHORT    MAX_USHORT
#define NPY_MAX_INT       MAX_INT
#define NPY_MIN_INT       MIN_INT
#define NPY_MAX_UINT      MAX_UINT
#define NPY_MAX_LONG      MAX_LONG
#define NPY_MIN_LONG      MIN_LONG
#define NPY_MAX_ULONG     MAX_ULONG
#define NPY_MAX_LONGLONG  MAX_LONGLONG
#define NPY_MIN_LONGLONG  MIN_LONGLONG
#define NPY_MAX_ULONGLONG MAX_ULONGLONG
#define NPY_MAX_INTP      MAX_INTP
#define NPY_MIN_INTP      MIN_INTP

#define NPY_FARRAY        FARRAY
#define NPY_F_CONTIGUOUS  F_CONTIGUOUS
#endif


/* Macros to extract array attributes.
 */
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject *)a))
#define array_type(a)          (int)(PyArray_TYPE(a))
#define array_numdims(a)       (((PyArrayObject *)a)->nd)
#define array_dimensions(a)    (((PyArrayObject *)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject *)a)->dimensions[i])
#define array_data(a)          (((PyArrayObject *)a)->data)
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS(a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED(a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN(a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj) {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode) {
    static const char* type_names[25] = {"bool", "byte", "unsigned byte",
                                         "short", "unsigned short", "int",
                                         "unsigned int", "long", "unsigned long",
                                         "long long", "unsigned long long",
                                         "float", "double", "long double",
                                         "complex float", "complex double",
                                         "complex long double", "object",
                                         "string", "unicode", "void", "ntypes",
                                         "notype", "char", "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  Allow character and byte
   * to match.  Also allow int and long to match.  This is deprecated.
   * You should use PyArray_EquivTypenums() instead.
   */
  int type_match(int actual_type, int desired_type) {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }


  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input, int typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char * desired_type = typecode_string(typecode);
      const char * actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type, actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input, int typecode,
                                               int* is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject* py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FromObject(input, typecode, 0, 0);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary, int* is_new_object,
                                 int min_dims, int max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                             array_type(ary),
                                                             min_dims,
                                                             max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int typecode,
                                                          int* is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input, typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary, int exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions, array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary, int* exact_dimensions, int n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str, array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary, npy_intp* size, int n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims, actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be FORTRAN ordered.  If the
   * the PyArrayObject is already FORTRAN ordered, do nothing.  Else,
   * set the FORTRAN ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    if (array_is_fortran(ary)) return success;
    /* Set the FORTRAN ordered flag */
    ary->flags = NPY_FARRAY;
    /* Recompute the strides */
    ary->strides[0] = ary->strides[nd-1];
    for (i=1; i < nd; ++i)
      ary->strides[i] = ary->strides[i-1] * array_size(ary,i-1);
    return success;
  }

 
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_AudioLoader__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  AudioLoader *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AudioLoader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AudioLoader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AudioLoader" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (AudioLoader *)new AudioLoader((std::string const &)*arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioLoader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioLoader__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  AudioLoader *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AudioLoader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AudioLoader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (AudioLoader *)new AudioLoader((std::string const &)*arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioLoader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioLoader__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  AudioLoader *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AudioLoader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (AudioLoader *)new AudioLoader((std::string const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioLoader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioLoader__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  AudioLoader *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AudioLoader" "', argument " "1"" of type '" "std::string const &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  {
    try {
      result = (AudioLoader *)new AudioLoader((std::string const &)*arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioLoader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioLoader__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  AudioLoader *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (AudioLoader *)new AudioLoader();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioLoader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioLoader(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_AudioLoader", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_AudioLoader__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AudioLoader__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_AudioLoader__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_AudioLoader__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_AudioLoader__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AudioLoader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioLoader::AudioLoader(std::string const &,int const,int,Real)\n"
    "    AudioLoader::AudioLoader(std::string const &,int const,int)\n"
    "    AudioLoader::AudioLoader(std::string const &,int const)\n"
    "    AudioLoader::AudioLoader(std::string const &)\n"
    "    AudioLoader::AudioLoader()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AudioLoader(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AudioLoader" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_process" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      (arg1)->process(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setup" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_sampleRate" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (int)((AudioLoader const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_channelCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_channelCount" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (int)((AudioLoader const *)arg1)->channelCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_isFinished(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_isFinished" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (bool)((AudioLoader const *)arg1)->isFinished();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFilename__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFilename" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioLoader_setFilename" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFilename((char const *)arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFilename__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFilename" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setFilename((char const *)arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFilename__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFilename" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioLoader_setFilename" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFilename((std::string const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFilename__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFilename" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AudioLoader_setFilename" "', argument " "2"" of type '" "std::string const &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      (arg1)->setFilename((std::string const &)*arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFilename(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AudioLoader_setFilename", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AudioLoader_setFilename__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AudioLoader_setFilename__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_AudioLoader_setFilename__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_AudioLoader_setFilename__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AudioLoader_setFilename'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioLoader::setFilename(char const *,bool const)\n"
    "    AudioLoader::setFilename(char const *)\n"
    "    AudioLoader::setFilename(std::string const &,bool const)\n"
    "    AudioLoader::setFilename(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AudioLoader_filename(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_filename" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (std::string *) &((AudioLoader const *)arg1)->filename();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFrameSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFrameSize" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioLoader_setFrameSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFrameSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFrameSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setFrameSize" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrameSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setFrameSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AudioLoader_setFrameSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_AudioLoader_setFrameSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_AudioLoader_setFrameSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AudioLoader_setFrameSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioLoader::setFrameSize(int,bool const)\n"
    "    AudioLoader::setFrameSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AudioLoader_frameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_frameSize" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (int)((AudioLoader const *)arg1)->frameSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setChannel__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setChannel" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioLoader_setChannel" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setChannel(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setChannel__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setChannel" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setChannel(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setChannel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AudioLoader_setChannel", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_AudioLoader_setChannel__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_AudioLoader_setChannel__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AudioLoader_setChannel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioLoader::setChannel(int,bool const)\n"
    "    AudioLoader::setChannel(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AudioLoader_channel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_channel" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (int)((AudioLoader const *)arg1)->channel();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setLoadDuration__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setLoadDuration" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setLoadDuration" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioLoader_setLoadDuration" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLoadDuration(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setLoadDuration__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_setLoadDuration" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_setLoadDuration" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLoadDuration(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_setLoadDuration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AudioLoader_setLoadDuration", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_AudioLoader_setLoadDuration__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AudioLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_AudioLoader_setLoadDuration__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AudioLoader_setLoadDuration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AudioLoader::setLoadDuration(Real,bool const)\n"
    "    AudioLoader::setLoadDuration(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AudioLoader_loadDuration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_loadDuration" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = ((AudioLoader const *)arg1)->loadDuration();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_loadProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_loadProgress" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = ((AudioLoader const *)arg1)->loadProgress();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_fileProgress(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_fileProgress" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = ((AudioLoader const *)arg1)->fileProgress();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_currentTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_currentTime" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = ((AudioLoader const *)arg1)->currentTime();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_totalTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_totalTime" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = ((AudioLoader const *)arg1)->totalTime();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_seek(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioLoader_seek", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_seek" "', argument " "1"" of type '" "AudioLoader *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioLoader_seek" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->seek(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioLoader_finished(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AudioLoader *arg1 = (AudioLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioLoader_finished" "', argument " "1"" of type '" "AudioLoader const *""'"); 
  }
  arg1 = reinterpret_cast< AudioLoader * >(argp1);
  {
    try {
      result = (bool)((AudioLoader const *)arg1)->finished();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AudioLoader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AudioLoader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AudioLoader_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameCutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameCutter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrameCutter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FrameCutter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_FrameCutter" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  {
    try {
      result = (FrameCutter *)new FrameCutter(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameCutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameCutter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrameCutter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FrameCutter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (FrameCutter *)new FrameCutter(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameCutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameCutter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FrameCutter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (FrameCutter *)new FrameCutter(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameCutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FrameCutter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (FrameCutter *)new FrameCutter(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameCutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (FrameCutter *)new FrameCutter(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FrameCutter *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FrameCutter *)new FrameCutter();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FrameCutter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FrameCutter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FrameCutter", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_FrameCutter__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_FrameCutter__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_FrameCutter__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_FrameCutter__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_FrameCutter__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              return _wrap_new_FrameCutter__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FrameCutter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrameCutter::FrameCutter(int,int,int,int const,Real)\n"
    "    FrameCutter::FrameCutter(int,int,int,int const)\n"
    "    FrameCutter::FrameCutter(int,int,int)\n"
    "    FrameCutter::FrameCutter(int,int)\n"
    "    FrameCutter::FrameCutter(int)\n"
    "    FrameCutter::FrameCutter()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FrameCutter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FrameCutter" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  int temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "FrameCutter_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_process" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg4));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setup" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_reset" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_maxInputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_maxInputSize" "', argument " "1"" of type '" "FrameCutter const *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      result = (int)((FrameCutter const *)arg1)->maxInputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setMaxInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setMaxInputSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setMaxInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameCutter_setMaxInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMaxInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setMaxInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setMaxInputSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setMaxInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMaxInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setMaxInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FrameCutter_setMaxInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FrameCutter_setMaxInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FrameCutter_setMaxInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FrameCutter_setMaxInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrameCutter::setMaxInputSize(int,bool)\n"
    "    FrameCutter::setMaxInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FrameCutter_frameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_frameSize" "', argument " "1"" of type '" "FrameCutter const *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      result = (int)((FrameCutter const *)arg1)->frameSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFrameSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setFrameSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameCutter_setFrameSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFrameSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFrameSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setFrameSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrameSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFrameSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FrameCutter_setFrameSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FrameCutter_setFrameSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FrameCutter_setFrameSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FrameCutter_setFrameSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrameCutter::setFrameSize(int,bool)\n"
    "    FrameCutter::setFrameSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FrameCutter_hopSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_hopSize" "', argument " "1"" of type '" "FrameCutter const *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      result = (int)((FrameCutter const *)arg1)->hopSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setHopSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setHopSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setHopSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameCutter_setHopSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHopSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setHopSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setHopSize" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setHopSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setHopSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setHopSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FrameCutter_setHopSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FrameCutter_setHopSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FrameCutter_setHopSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FrameCutter_setHopSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrameCutter::setHopSize(int,bool)\n"
    "    FrameCutter::setHopSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFirstSamplePosition__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setFirstSamplePosition" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setFirstSamplePosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FrameCutter_setFirstSamplePosition" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFirstSamplePosition(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFirstSamplePosition__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_setFirstSamplePosition" "', argument " "1"" of type '" "FrameCutter *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FrameCutter_setFirstSamplePosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFirstSamplePosition(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_setFirstSamplePosition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FrameCutter_setFirstSamplePosition", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FrameCutter_setFirstSamplePosition__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FrameCutter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FrameCutter_setFirstSamplePosition__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FrameCutter_setFirstSamplePosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FrameCutter::setFirstSamplePosition(int,bool const)\n"
    "    FrameCutter::setFirstSamplePosition(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FrameCutter_firstSamplePosition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_firstSamplePosition" "', argument " "1"" of type '" "FrameCutter const *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      result = (int)((FrameCutter const *)arg1)->firstSamplePosition();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FrameCutter_maxFrameCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FrameCutter *arg1 = (FrameCutter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FrameCutter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameCutter_maxFrameCount" "', argument " "1"" of type '" "FrameCutter const *""'"); 
  }
  arg1 = reinterpret_cast< FrameCutter * >(argp1);
  {
    try {
      result = (int)((FrameCutter const *)arg1)->maxFrameCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FrameCutter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FrameCutter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FrameCutter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Filter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Filter *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Filter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Filter *)new Filter(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Filter *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Filter *)new Filter();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  int arg3 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  Filter *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Filter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Filter *)new Filter((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Filter", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Filter__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Filter__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_Filter__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Filter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filter::Filter(int)\n"
    "    Filter::Filter()\n"
    "    Filter::Filter(MatrixXR const &,MatrixXR const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Filter_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setup" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_reset" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Filter_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_process" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_a(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_a" "', argument " "1"" of type '" "Filter const *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      ((Filter const *)arg1)->a(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setA__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setA" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Filter_setA" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setA((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setA__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setA" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->setA((MatrixXR const &)*arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setA(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Filter_setA", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_Filter_setA__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Filter_setA__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Filter_setA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filter::setA(MatrixXR const &,bool)\n"
    "    Filter::setA(MatrixXR const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Filter_b(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_b" "', argument " "1"" of type '" "Filter const *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      ((Filter const *)arg1)->b(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setB__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setB" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Filter_setB" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setB((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setB__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  MatrixXR *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setB" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->setB((MatrixXR const &)*arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setB(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Filter_setB", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_Filter_setB__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Filter_setB__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Filter_setB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filter::setB(MatrixXR const &,bool)\n"
    "    Filter::setB(MatrixXR const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Filter_channelCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_channelCount" "', argument " "1"" of type '" "Filter const *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      result = (int)((Filter const *)arg1)->channelCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setChannelCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setChannelCount" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_setChannelCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Filter_setChannelCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setChannelCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setChannelCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_setChannelCount" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Filter_setChannelCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setChannelCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_setChannelCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Filter_setChannelCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Filter_setChannelCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Filter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Filter_setChannelCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Filter_setChannelCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filter::setChannelCount(int,bool)\n"
    "    Filter::setChannelCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Filter_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_length" "', argument " "1"" of type '" "Filter const *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      result = (int)((Filter const *)arg1)->length();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Filter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Filter *arg1 = (Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Filter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Filter" "', argument " "1"" of type '" "Filter *""'"); 
  }
  arg1 = reinterpret_cast< Filter * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Filter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Filter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Filter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DCT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  DCT::DCTType arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  DCT *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DCT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DCT" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DCT" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DCT" "', argument " "4"" of type '" "DCT::DCTType""'");
  } 
  arg4 = static_cast< DCT::DCTType >(val4);
  {
    try {
      result = (DCT *)new DCT(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DCT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DCT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  DCT *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DCT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DCT" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DCT" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (DCT *)new DCT(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DCT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DCT__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  DCT *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DCT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DCT" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (DCT *)new DCT(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DCT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DCT__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  DCT *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DCT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (DCT *)new DCT(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DCT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DCT__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  DCT *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (DCT *)new DCT();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DCT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DCT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DCT", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DCT__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_DCT__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_DCT__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_DCT__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_DCT__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DCT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DCT::DCT(int,int,bool,DCT::DCTType)\n"
    "    DCT::DCT(int,int,bool)\n"
    "    DCT::DCT(int,int)\n"
    "    DCT::DCT(int)\n"
    "    DCT::DCT()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DCT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DCT" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_reset" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setup" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "DCT_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_process" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_dctType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  DCT::DCTType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_dctType" "', argument " "1"" of type '" "DCT const *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      result = (DCT::DCTType)((DCT const *)arg1)->dctType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  DCT::DCTType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setDctType" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setDctType" "', argument " "2"" of type '" "DCT::DCTType""'");
  } 
  arg2 = static_cast< DCT::DCTType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DCT_setDctType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setDctType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  DCT::DCTType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setDctType" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setDctType" "', argument " "2"" of type '" "DCT::DCTType""'");
  } 
  arg2 = static_cast< DCT::DCTType >(val2);
  {
    try {
      (arg1)->setDctType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DCT_setDctType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_DCT_setDctType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_DCT_setDctType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DCT_setDctType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DCT::setDctType(DCT::DCTType,bool)\n"
    "    DCT::setDctType(DCT::DCTType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DCT_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_inputSize" "', argument " "1"" of type '" "DCT const *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      result = (int)((DCT const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setInputSize" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DCT_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setInputSize" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DCT_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_DCT_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_DCT_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DCT_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DCT::setInputSize(int,bool)\n"
    "    DCT::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DCT_dctSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_dctSize" "', argument " "1"" of type '" "DCT const *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  {
    try {
      result = (int)((DCT const *)arg1)->dctSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setDctSize" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setDctSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DCT_setDctSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setDctSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  DCT *arg1 = (DCT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_DCT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DCT_setDctSize" "', argument " "1"" of type '" "DCT *""'"); 
  }
  arg1 = reinterpret_cast< DCT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DCT_setDctSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setDctSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DCT_setDctSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DCT_setDctSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_DCT_setDctSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DCT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_DCT_setDctSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DCT_setDctSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DCT::setDctSize(int,bool)\n"
    "    DCT::setDctSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *DCT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DCT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DCT_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Window__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Window::WindowType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Window *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Window" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Window" "', argument " "2"" of type '" "Window::WindowType""'");
  } 
  arg2 = static_cast< Window::WindowType >(val2);
  {
    try {
      result = (Window *)new Window(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Window, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Window__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Window *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Window" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Window *)new Window(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Window, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Window__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Window *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Window *)new Window();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Window, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Window(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Window", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Window__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Window__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Window__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Window'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Window::Window(int,Window::WindowType)\n"
    "    Window::Window(int)\n"
    "    Window::Window()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Window(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Window" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setup" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_reset" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_process__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_process" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_process__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_process" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_process__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_process" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_process(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Window_process", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        return _wrap_Window_process__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_Window_process__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_Window_process__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Window_process'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Window::process(MatrixXC const &,MatrixXC *)\n"
    "    Window::process(MatrixXR const &,MatrixXR *)\n"
    "    Window::process(MatrixXR const &,MatrixXC *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Window_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_inputSize" "', argument " "1"" of type '" "Window const *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      result = (int)((Window const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setInputSize" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Window_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Window_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setInputSize" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Window_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Window_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Window_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Window_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Window_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Window::setInputSize(int,bool)\n"
    "    Window::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Window_windowType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Window::WindowType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_windowType" "', argument " "1"" of type '" "Window const *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      result = (Window::WindowType)((Window const *)arg1)->windowType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindowType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  Window::WindowType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setWindowType" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Window_setWindowType" "', argument " "2"" of type '" "Window::WindowType""'");
  } 
  arg2 = static_cast< Window::WindowType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Window_setWindowType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setWindowType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindowType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  Window::WindowType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setWindowType" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Window_setWindowType" "', argument " "2"" of type '" "Window::WindowType""'");
  } 
  arg2 = static_cast< Window::WindowType >(val2);
  {
    try {
      (arg1)->setWindowType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindowType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Window_setWindowType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Window_setWindowType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Window_setWindowType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Window_setWindowType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Window::setWindowType(Window::WindowType,bool)\n"
    "    Window::setWindowType(Window::WindowType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Window_window(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MatrixXR *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_window" "', argument " "1"" of type '" "Window const *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    try {
      result = (MatrixXR *) &((Window const *)arg1)->window();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MatrixXR, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindow__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  MatrixXR *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setWindow" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Window_setWindow" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setWindow((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindow__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Window *arg1 = (Window *) 0 ;
  MatrixXR *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Window, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Window_setWindow" "', argument " "1"" of type '" "Window *""'"); 
  }
  arg1 = reinterpret_cast< Window * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->setWindow((MatrixXR const &)*arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Window_setWindow(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Window_setWindow", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_Window_setWindow__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Window, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Window_setWindow__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Window_setWindow'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Window::setWindow(MatrixXR const &,bool)\n"
    "    Window::setWindow(MatrixXR const &)\n");
  return 0;
}


SWIGINTERN PyObject *Window_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Window, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Window_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  MelBands::ScaleType arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelBands" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MelBands" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MelBands" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MelBands" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MelBands" "', argument " "6"" of type '" "MelBands::ScaleType""'");
  } 
  arg6 = static_cast< MelBands::ScaleType >(val6);
  {
    try {
      result = (MelBands *)new MelBands(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelBands" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MelBands" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MelBands" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MelBands" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (MelBands *)new MelBands(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelBands" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MelBands" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MelBands" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (MelBands *)new MelBands(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelBands" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MelBands" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (MelBands *)new MelBands(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelBands" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (MelBands *)new MelBands(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  MelBands *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MelBands" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = (MelBands *)new MelBands(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  MelBands *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (MelBands *)new MelBands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MelBands(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MelBands", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MelBands__SWIG_6(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      return _wrap_new_MelBands__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_MelBands__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_MelBands__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_MelBands__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_MelBands__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_MelBands__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MelBands'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::MelBands(Real,Real,int,Real,int,MelBands::ScaleType)\n"
    "    MelBands::MelBands(Real,Real,int,Real,int)\n"
    "    MelBands::MelBands(Real,Real,int,Real)\n"
    "    MelBands::MelBands(Real,Real,int)\n"
    "    MelBands::MelBands(Real,Real)\n"
    "    MelBands::MelBands(Real)\n"
    "    MelBands::MelBands()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setup" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_reset" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "MelBands_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_process" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_weights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MatrixXR > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_weights" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = ((MelBands const *)arg1)->weights();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< MatrixXR >(static_cast< const std::vector< MatrixXR >& >(result))), SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_bandWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  int arg2 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "MelBands_bandWeights", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_bandWeights" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_bandWeights" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((MelBands const *)arg1)->bandWeights(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_starts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  MatrixXI *arg2 = (MatrixXI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXI temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_starts" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      ((MelBands const *)arg1)->starts(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_INT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Integer* out_data = (Integer*)array_data(out_array);
    Eigen::Map<MatrixXIscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_bands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_bands" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = (int)((MelBands const *)arg1)->bands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_centers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_centers" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      ((MelBands const *)arg1)->centers(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_bandCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_bandCount" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = (int)((MelBands const *)arg1)->bandCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setBandCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setBandCount" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setBandCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setBandCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setBandCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setBandCount" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setBandCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setBandCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setBandCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MelBands_setBandCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setBandCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setBandCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setBandCount(int,bool)\n"
    "    MelBands::setBandCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_lowFrequency" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = ((MelBands const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setLowFrequency" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setLowFrequency" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MelBands_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setLowFrequency(Real,bool)\n"
    "    MelBands::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_highFrequency" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = ((MelBands const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setHighFrequency" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setHighFrequency" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MelBands_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setHighFrequency(Real,bool)\n"
    "    MelBands::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_sampleRate" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = ((MelBands const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setSampleRate" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setSampleRate" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MelBands_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setSampleRate(Real,bool)\n"
    "    MelBands::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_fftSize" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = (int)((MelBands const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setFftSize" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setFftSize" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MelBands_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setFftSize(int,bool)\n"
    "    MelBands::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MelBands_scaleType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MelBands::ScaleType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_scaleType" "', argument " "1"" of type '" "MelBands const *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      result = (MelBands::ScaleType)((MelBands const *)arg1)->scaleType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setScaleType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  MelBands::ScaleType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setScaleType" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setScaleType" "', argument " "2"" of type '" "MelBands::ScaleType""'");
  } 
  arg2 = static_cast< MelBands::ScaleType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MelBands_setScaleType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setScaleType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setScaleType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  MelBands::ScaleType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelBands_setScaleType" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MelBands_setScaleType" "', argument " "2"" of type '" "MelBands::ScaleType""'");
  } 
  arg2 = static_cast< MelBands::ScaleType >(val2);
  {
    try {
      (arg1)->setScaleType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelBands_setScaleType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MelBands_setScaleType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MelBands_setScaleType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MelBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MelBands_setScaleType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MelBands_setScaleType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MelBands::setScaleType(MelBands::ScaleType,bool)\n"
    "    MelBands::setScaleType(MelBands::ScaleType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MelBands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MelBands *arg1 = (MelBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MelBands, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MelBands" "', argument " "1"" of type '" "MelBands *""'"); 
  }
  arg1 = reinterpret_cast< MelBands * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MelBands_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MelBands, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MelBands_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BarkBands__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  BarkBands *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarkBands" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BarkBands" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BarkBands" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BarkBands" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (BarkBands *)new BarkBands(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BarkBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarkBands__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  BarkBands *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarkBands" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BarkBands" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BarkBands" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (BarkBands *)new BarkBands(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BarkBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarkBands__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  BarkBands *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarkBands" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BarkBands" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (BarkBands *)new BarkBands(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BarkBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarkBands__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  BarkBands *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarkBands" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (BarkBands *)new BarkBands(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BarkBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarkBands__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  BarkBands *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (BarkBands *)new BarkBands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BarkBands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarkBands(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BarkBands", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BarkBands__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_BarkBands__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_BarkBands__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_BarkBands__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_BarkBands__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BarkBands'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BarkBands::BarkBands(int,int,Real,int)\n"
    "    BarkBands::BarkBands(int,int,Real)\n"
    "    BarkBands::BarkBands(int,int)\n"
    "    BarkBands::BarkBands(int)\n"
    "    BarkBands::BarkBands()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarkBands_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setup" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_reset" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "BarkBands_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_process" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_weights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MatrixXR > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_weights" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = ((BarkBands const *)arg1)->weights();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< MatrixXR >(static_cast< const std::vector< MatrixXR >& >(result))), SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_bandWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  int arg2 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "BarkBands_bandWeights", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_bandWeights" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_bandWeights" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((BarkBands const *)arg1)->bandWeights(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_starts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  MatrixXI *arg2 = (MatrixXI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXI temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_starts" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      ((BarkBands const *)arg1)->starts(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_INT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Integer* out_data = (Integer*)array_data(out_array);
    Eigen::Map<MatrixXIscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_bands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_bands" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = (int)((BarkBands const *)arg1)->bands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_centers(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_centers" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      ((BarkBands const *)arg1)->centers(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_lowBand(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_lowBand" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = ((BarkBands const *)arg1)->lowBand();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setLowBand__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setLowBand" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setLowBand" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarkBands_setLowBand" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowBand(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setLowBand__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setLowBand" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setLowBand" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowBand(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setLowBand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarkBands_setLowBand", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BarkBands_setLowBand__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BarkBands_setLowBand__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarkBands_setLowBand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BarkBands::setLowBand(Real,bool)\n"
    "    BarkBands::setLowBand(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarkBands_highBand(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_highBand" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = ((BarkBands const *)arg1)->highBand();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setHighBand__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setHighBand" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setHighBand" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarkBands_setHighBand" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighBand(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setHighBand__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setHighBand" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setHighBand" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighBand(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setHighBand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarkBands_setHighBand", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BarkBands_setHighBand__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BarkBands_setHighBand__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarkBands_setHighBand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BarkBands::setHighBand(Real,bool)\n"
    "    BarkBands::setHighBand(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarkBands_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_sampleRate" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = ((BarkBands const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setSampleRate" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarkBands_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setSampleRate" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarkBands_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BarkBands_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BarkBands_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarkBands_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BarkBands::setSampleRate(Real,bool)\n"
    "    BarkBands::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarkBands_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_fftSize" "', argument " "1"" of type '" "BarkBands const *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      result = (int)((BarkBands const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setFftSize" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarkBands_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarkBands_setFftSize" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarkBands_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarkBands_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarkBands_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_BarkBands_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BarkBands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BarkBands_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarkBands_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BarkBands::setFftSize(int,bool)\n"
    "    BarkBands::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BarkBands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BarkBands *arg1 = (BarkBands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BarkBands, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BarkBands" "', argument " "1"" of type '" "BarkBands *""'"); 
  }
  arg1 = reinterpret_cast< BarkBands * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BarkBands_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BarkBands, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BarkBands_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Bands__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Bands *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Bands *)new Bands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Bands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bands__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXI arg1 ;
  std::vector< MatrixXR > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Bands *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_MatrixXI,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Bands" "', argument " "1"" of type '" "MatrixXI""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bands" "', argument " "1"" of type '" "MatrixXI""'");
    } else {
      MatrixXI * temp = reinterpret_cast< MatrixXI * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_MatrixXR_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Bands" "', argument " "2"" of type '" "std::vector< MatrixXR >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bands" "', argument " "2"" of type '" "std::vector< MatrixXR >""'");
    } else {
      std::vector< MatrixXR > * temp = reinterpret_cast< std::vector< MatrixXR > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (Bands *)new Bands(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Bands, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bands(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Bands", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Bands__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_MatrixXI, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Bands__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Bands'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Bands::Bands()\n"
    "    Bands::Bands(MatrixXI,std::vector< MatrixXR >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Bands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bands" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Bands_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_process" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_setup" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_reset" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_weights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< MatrixXR > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_weights" "', argument " "1"" of type '" "Bands const *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      result = ((Bands const *)arg1)->weights();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< MatrixXR >(static_cast< const std::vector< MatrixXR >& >(result))), SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_bandWeights(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  int arg2 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Bands_bandWeights", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_bandWeights" "', argument " "1"" of type '" "Bands const *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bands_bandWeights" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((Bands const *)arg1)->bandWeights(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_starts(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  MatrixXI *arg2 = (MatrixXI *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXI temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_starts" "', argument " "1"" of type '" "Bands const *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      ((Bands const *)arg1)->starts(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_INT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Integer* out_data = (Integer*)array_data(out_array);
    Eigen::Map<MatrixXIscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_bands(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_bands" "', argument " "1"" of type '" "Bands const *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  {
    try {
      result = (int)((Bands const *)arg1)->bands();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_setStartsWeights__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  MatrixXI *arg2 = 0 ;
  std::vector< MatrixXR > arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_setStartsWeights" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MatrixXI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bands_setStartsWeights" "', argument " "2"" of type '" "MatrixXI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bands_setStartsWeights" "', argument " "2"" of type '" "MatrixXI const &""'"); 
  }
  arg2 = reinterpret_cast< MatrixXI * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_MatrixXR_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bands_setStartsWeights" "', argument " "3"" of type '" "std::vector< MatrixXR >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bands_setStartsWeights" "', argument " "3"" of type '" "std::vector< MatrixXR >""'");
    } else {
      std::vector< MatrixXR > * temp = reinterpret_cast< std::vector< MatrixXR > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Bands_setStartsWeights" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->setStartsWeights((MatrixXI const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_setStartsWeights__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Bands *arg1 = (Bands *) 0 ;
  MatrixXI *arg2 = 0 ;
  std::vector< MatrixXR > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Bands, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bands_setStartsWeights" "', argument " "1"" of type '" "Bands *""'"); 
  }
  arg1 = reinterpret_cast< Bands * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MatrixXI,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bands_setStartsWeights" "', argument " "2"" of type '" "MatrixXI const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bands_setStartsWeights" "', argument " "2"" of type '" "MatrixXI const &""'"); 
  }
  arg2 = reinterpret_cast< MatrixXI * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_MatrixXR_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bands_setStartsWeights" "', argument " "3"" of type '" "std::vector< MatrixXR >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bands_setStartsWeights" "', argument " "3"" of type '" "std::vector< MatrixXR >""'");
    } else {
      std::vector< MatrixXR > * temp = reinterpret_cast< std::vector< MatrixXR > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setStartsWeights((MatrixXI const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bands_setStartsWeights(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bands_setStartsWeights", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_MatrixXI, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bands_setStartsWeights__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Bands, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_MatrixXI, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_MatrixXR_t, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_Bands_setStartsWeights__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bands_setStartsWeights'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Bands::setStartsWeights(MatrixXI const &,std::vector< MatrixXR >,bool)\n"
    "    Bands::setStartsWeights(MatrixXI const &,std::vector< MatrixXR >)\n");
  return 0;
}


SWIGINTERN PyObject *Bands_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Bands, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Bands_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FFT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  FFT *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FFT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FFT" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (FFT *)new FFT(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FFT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  FFT *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FFT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (FFT *)new FFT(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FFT__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  FFT *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (FFT *)new FFT();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FFT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FFT", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_FFT__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_FFT__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_FFT__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FFT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFT::FFT(int,bool)\n"
    "    FFT::FFT(int)\n"
    "    FFT::FFT()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FFT" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "FFT_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_process" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_setup" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_reset" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_fftSize" "', argument " "1"" of type '" "FFT const *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    try {
      result = (int)((FFT const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_setFftSize" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFT_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FFT_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_setFftSize" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFT_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFT_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FFT_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FFT_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFT_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFT::setFftSize(int,bool)\n"
    "    FFT::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FFT_zeroPhase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_zeroPhase" "', argument " "1"" of type '" "FFT const *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  {
    try {
      result = (bool)((FFT const *)arg1)->zeroPhase();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setZeroPhase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_setZeroPhase" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFT_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FFT_setZeroPhase" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setZeroPhase(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setZeroPhase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFT *arg1 = (FFT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFT_setZeroPhase" "', argument " "1"" of type '" "FFT *""'"); 
  }
  arg1 = reinterpret_cast< FFT * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFT_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setZeroPhase(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFT_setZeroPhase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFT_setZeroPhase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FFT_setZeroPhase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FFT_setZeroPhase__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFT_setZeroPhase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFT::setZeroPhase(bool,bool)\n"
    "    FFT::setZeroPhase(bool)\n");
  return 0;
}


SWIGINTERN PyObject *FFT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FFT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FFT_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FFTComplex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  FFTComplex *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FFTComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FFTComplex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FFTComplex" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (FFTComplex *)new FFTComplex(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFTComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FFTComplex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  FFTComplex *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FFTComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FFTComplex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (FFTComplex *)new FFTComplex(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFTComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FFTComplex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FFTComplex", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_FFTComplex__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_FFTComplex__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FFTComplex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFTComplex::FFTComplex(int,int,bool)\n"
    "    FFTComplex::FFTComplex(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FFTComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FFTComplex" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_process__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_process" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_process__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_process" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_process(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFTComplex_process", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        return _wrap_FFTComplex_process__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_FFTComplex_process__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFTComplex_process'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFTComplex::process(MatrixXC const &,MatrixXC *)\n"
    "    FFTComplex::process(MatrixXR const &,MatrixXC *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setup" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_reset" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_fftSize" "', argument " "1"" of type '" "FFTComplex const *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      result = (int)((FFTComplex const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setFftSize" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FFTComplex_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setFftSize" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFTComplex_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FFTComplex_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FFTComplex_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFTComplex_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFTComplex::setFftSize(int,bool)\n"
    "    FFTComplex::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FFTComplex_frameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_frameSize" "', argument " "1"" of type '" "FFTComplex const *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      result = (int)((FFTComplex const *)arg1)->frameSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFrameSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setFrameSize" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FFTComplex_setFrameSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFrameSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFrameSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setFrameSize" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setFrameSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrameSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setFrameSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFTComplex_setFrameSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FFTComplex_setFrameSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FFTComplex_setFrameSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFTComplex_setFrameSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFTComplex::setFrameSize(int,bool)\n"
    "    FFTComplex::setFrameSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FFTComplex_zeroPhase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_zeroPhase" "', argument " "1"" of type '" "FFTComplex const *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  {
    try {
      result = (bool)((FFTComplex const *)arg1)->zeroPhase();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setZeroPhase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setZeroPhase" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FFTComplex_setZeroPhase" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setZeroPhase(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setZeroPhase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FFTComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTComplex_setZeroPhase" "', argument " "1"" of type '" "FFTComplex *""'"); 
  }
  arg1 = reinterpret_cast< FFTComplex * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTComplex_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setZeroPhase(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTComplex_setZeroPhase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FFTComplex_setZeroPhase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_FFTComplex_setZeroPhase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FFTComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_FFTComplex_setZeroPhase__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FFTComplex_setZeroPhase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FFTComplex::setZeroPhase(bool,bool)\n"
    "    FFTComplex::setZeroPhase(bool)\n");
  return 0;
}


SWIGINTERN PyObject *FFTComplex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FFTComplex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FFTComplex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IFFT__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  IFFT *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IFFT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IFFT" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (IFFT *)new IFFT(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IFFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IFFT__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IFFT *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IFFT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (IFFT *)new IFFT(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IFFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IFFT__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  IFFT *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (IFFT *)new IFFT();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IFFT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IFFT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_IFFT", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_IFFT__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_IFFT__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_IFFT__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_IFFT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IFFT::IFFT(int,bool)\n"
    "    IFFT::IFFT(int)\n"
    "    IFFT::IFFT()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IFFT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IFFT" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "IFFT_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_process" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_setup" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_reset" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_fftSize" "', argument " "1"" of type '" "IFFT const *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    try {
      result = (int)((IFFT const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_setFftSize" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IFFT_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IFFT_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_setFftSize" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IFFT_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IFFT_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IFFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_IFFT_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IFFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_IFFT_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IFFT_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IFFT::setFftSize(int,bool)\n"
    "    IFFT::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IFFT_zeroPhase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_zeroPhase" "', argument " "1"" of type '" "IFFT const *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  {
    try {
      result = (bool)((IFFT const *)arg1)->zeroPhase();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setZeroPhase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_setZeroPhase" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IFFT_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IFFT_setZeroPhase" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setZeroPhase(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setZeroPhase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IFFT *arg1 = (IFFT *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IFFT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IFFT_setZeroPhase" "', argument " "1"" of type '" "IFFT *""'"); 
  }
  arg1 = reinterpret_cast< IFFT * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IFFT_setZeroPhase" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setZeroPhase(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IFFT_setZeroPhase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "IFFT_setZeroPhase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IFFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_IFFT_setZeroPhase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IFFT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_IFFT_setZeroPhase__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'IFFT_setZeroPhase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IFFT::setZeroPhase(bool,bool)\n"
    "    IFFT::setZeroPhase(bool)\n");
  return 0;
}


SWIGINTERN PyObject *IFFT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IFFT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IFFT_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  Real arg7 ;
  Real arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MFCC" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MFCC" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MFCC" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_MFCC" "', argument " "7"" of type '" "Real""'");
  } 
  arg7 = static_cast< Real >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_MFCC" "', argument " "8"" of type '" "Real""'");
  } 
  arg8 = static_cast< Real >(val8);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  Real arg7 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MFCC" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MFCC" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MFCC" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_MFCC" "', argument " "7"" of type '" "Real""'");
  } 
  arg7 = static_cast< Real >(val7);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MFCC" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MFCC" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MFCC" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MFCC" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MFCC" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  Real arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MFCC" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MFCC" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MFCC" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (MFCC *)new MFCC(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  MFCC *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MFCC" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = (MFCC *)new MFCC(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC__SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  MFCC *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (MFCC *)new MFCC();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MFCC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MFCC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MFCC", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MFCC__SWIG_8(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      return _wrap_new_MFCC__SWIG_7(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_MFCC__SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_MFCC__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_MFCC__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_MFCC__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_MFCC__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                  
                }
                if (_v) {
                  return _wrap_new_MFCC__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                  
                }
                if (_v) {
                  {
                    _v = (PyFloat_Check(argv[7]) || PyInt_Check(argv[7]) || PyLong_Check(argv[7])) ? 1 : 0;
                    
                  }
                  if (_v) {
                    return _wrap_new_MFCC__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MFCC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::MFCC(Real,Real,int,Real,int,int,Real,Real)\n"
    "    MFCC::MFCC(Real,Real,int,Real,int,int,Real)\n"
    "    MFCC::MFCC(Real,Real,int,Real,int,int)\n"
    "    MFCC::MFCC(Real,Real,int,Real,int)\n"
    "    MFCC::MFCC(Real,Real,int,Real)\n"
    "    MFCC::MFCC(Real,Real,int)\n"
    "    MFCC::MFCC(Real,Real)\n"
    "    MFCC::MFCC(Real)\n"
    "    MFCC::MFCC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MFCC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MFCC" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_reset" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setup" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "MFCC_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_process" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_coefficientCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_coefficientCount" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = (int)((MFCC const *)arg1)->coefficientCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setCoefficientCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setCoefficientCount" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setCoefficientCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setCoefficientCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setCoefficientCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setCoefficientCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setCoefficientCount" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setCoefficientCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCoefficientCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setCoefficientCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setCoefficientCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MFCC_setCoefficientCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setCoefficientCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setCoefficientCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setCoefficientCount(int,bool)\n"
    "    MFCC::setCoefficientCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_bandCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_bandCount" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = (int)((MFCC const *)arg1)->bandCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setBandCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setBandCount" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setBandCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setBandCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setBandCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setBandCount" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setBandCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setBandCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setBandCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MFCC_setBandCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setBandCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setBandCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setBandCount(int,bool)\n"
    "    MFCC::setBandCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_lowFrequency" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = ((MFCC const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setLowFrequency" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setLowFrequency" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MFCC_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setLowFrequency(Real,bool)\n"
    "    MFCC::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_highFrequency" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = ((MFCC const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setHighFrequency" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setHighFrequency" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MFCC_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setHighFrequency(Real,bool)\n"
    "    MFCC::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_sampleRate" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = ((MFCC const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setSampleRate" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setSampleRate" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MFCC_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setSampleRate(Real,bool)\n"
    "    MFCC::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_fftSize" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = (int)((MFCC const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setFftSize" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setFftSize" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_MFCC_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setFftSize(int,bool)\n"
    "    MFCC::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MFCC_power(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_power" "', argument " "1"" of type '" "MFCC const *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  {
    try {
      result = ((MFCC const *)arg1)->power();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setPower__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setPower" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setPower" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MFCC_setPower" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPower(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setPower__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MFCC *arg1 = (MFCC *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MFCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MFCC_setPower" "', argument " "1"" of type '" "MFCC *""'"); 
  }
  arg1 = reinterpret_cast< MFCC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MFCC_setPower" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setPower(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MFCC_setPower(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MFCC_setPower", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_MFCC_setPower__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MFCC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_MFCC_setPower__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MFCC_setPower'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MFCC::setPower(Real,bool)\n"
    "    MFCC::setPower(Real)\n");
  return 0;
}


SWIGINTERN PyObject *MFCC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MFCC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MFCC_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AOK__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  AOK *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AOK" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AOK" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AOK" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AOK" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (AOK *)new AOK(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AOK, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AOK__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  AOK *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AOK" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AOK" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AOK" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (AOK *)new AOK(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AOK, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AOK(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_AOK", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_AOK__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_AOK__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AOK'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AOK::AOK(int,int,int,Real)\n"
    "    AOK::AOK(int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AOK(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AOK" "', argument " "1"" of type '" "AOK *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AOK_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AOK_setup" "', argument " "1"" of type '" "AOK *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AOK_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "AOK_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AOK_process" "', argument " "1"" of type '" "AOK *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AOK_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AOK_reset" "', argument " "1"" of type '" "AOK *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AOK_frameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AOK_frameSize" "', argument " "1"" of type '" "AOK const *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    try {
      result = (int)((AOK const *)arg1)->frameSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AOK_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  AOK *arg1 = (AOK *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AOK, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AOK_fftSize" "', argument " "1"" of type '" "AOK const *""'"); 
  }
  arg1 = reinterpret_cast< AOK * >(argp1);
  {
    try {
      result = (int)((AOK const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AOK_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AOK, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AOK_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Meddis__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  int arg2 ;
  bool arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Meddis *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Meddis" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Meddis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Meddis" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (Meddis *)new Meddis(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Meddis, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Meddis__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  int arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Meddis *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Meddis" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Meddis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Meddis *)new Meddis(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Meddis, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Meddis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Meddis", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Meddis__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_Meddis__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Meddis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Meddis::Meddis(Real,int,bool)\n"
    "    Meddis::Meddis(Real,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Meddis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Meddis" "', argument " "1"" of type '" "Meddis *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meddis_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meddis_setup" "', argument " "1"" of type '" "Meddis *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meddis_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Meddis_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meddis_process" "', argument " "1"" of type '" "Meddis *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meddis_channels(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meddis_channels" "', argument " "1"" of type '" "Meddis const *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    try {
      result = (int)((Meddis const *)arg1)->channels();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meddis_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meddis_sampleRate" "', argument " "1"" of type '" "Meddis const *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    try {
      result = ((Meddis const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Meddis_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Meddis *arg1 = (Meddis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Meddis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Meddis_reset" "', argument " "1"" of type '" "Meddis *""'"); 
  }
  arg1 = reinterpret_cast< Meddis * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Meddis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Meddis, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Meddis_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SpectralReassignment__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  Window::WindowType arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SpectralReassignment *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralReassignment" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralReassignment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralReassignment" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralReassignment" "', argument " "4"" of type '" "Window::WindowType""'");
  } 
  arg4 = static_cast< Window::WindowType >(val4);
  {
    try {
      result = (SpectralReassignment *)new SpectralReassignment(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralReassignment, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralReassignment__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  SpectralReassignment *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralReassignment" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralReassignment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralReassignment" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (SpectralReassignment *)new SpectralReassignment(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralReassignment, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralReassignment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SpectralReassignment", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_SpectralReassignment__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_SpectralReassignment__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SpectralReassignment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralReassignment::SpectralReassignment(int,int,Real,Window::WindowType)\n"
    "    SpectralReassignment::SpectralReassignment(int,int,Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SpectralReassignment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralReassignment" "', argument " "1"" of type '" "SpectralReassignment *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "SpectralReassignment_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_process" "', argument " "1"" of type '" "SpectralReassignment *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_setup" "', argument " "1"" of type '" "SpectralReassignment *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_reset" "', argument " "1"" of type '" "SpectralReassignment *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_frameSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_frameSize" "', argument " "1"" of type '" "SpectralReassignment const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      result = (int)((SpectralReassignment const *)arg1)->frameSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_fftSize" "', argument " "1"" of type '" "SpectralReassignment const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      result = (int)((SpectralReassignment const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralReassignment_windowType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralReassignment *arg1 = (SpectralReassignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Window::WindowType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralReassignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralReassignment_windowType" "', argument " "1"" of type '" "SpectralReassignment const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralReassignment * >(argp1);
  {
    try {
      result = (Window::WindowType)((SpectralReassignment const *)arg1)->windowType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpectralReassignment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralReassignment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpectralReassignment_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetection::SortMethod arg2 ;
  int arg3 ;
  int arg4 ;
  Real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetection" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetection" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PeakDetection" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PeakDetection" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  {
    try {
      result = (PeakDetection *)new PeakDetection(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetection::SortMethod arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetection" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetection" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PeakDetection" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (PeakDetection *)new PeakDetection(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetection::SortMethod arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetection" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetection" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PeakDetection *)new PeakDetection(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetection::SortMethod arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetection" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  {
    try {
      result = (PeakDetection *)new PeakDetection(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PeakDetection *)new PeakDetection(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PeakDetection *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (PeakDetection *)new PeakDetection();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PeakDetection", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PeakDetection__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PeakDetection__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_PeakDetection__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_PeakDetection__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_PeakDetection__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              return _wrap_new_PeakDetection__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PeakDetection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::PeakDetection(int,PeakDetection::SortMethod,int,int,Real)\n"
    "    PeakDetection::PeakDetection(int,PeakDetection::SortMethod,int,int)\n"
    "    PeakDetection::PeakDetection(int,PeakDetection::SortMethod,int)\n"
    "    PeakDetection::PeakDetection(int,PeakDetection::SortMethod)\n"
    "    PeakDetection::PeakDetection(int)\n"
    "    PeakDetection::PeakDetection()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PeakDetection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakDetection" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_reset" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setup" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  MatrixXR *arg6 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  MatrixXR temp6 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakDetection_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_process" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_peakCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_peakCount" "', argument " "1"" of type '" "PeakDetection const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      result = (int)((PeakDetection const *)arg1)->peakCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setPeakCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setPeakCount" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setPeakCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetection_setPeakCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPeakCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setPeakCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setPeakCount" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setPeakCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPeakCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setPeakCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetection_setPeakCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetection_setPeakCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetection_setPeakCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetection_setPeakCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::setPeakCount(int,bool)\n"
    "    PeakDetection::setPeakCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetection_minimumPeakWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_minimumPeakWidth" "', argument " "1"" of type '" "PeakDetection const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      result = (int)((PeakDetection const *)arg1)->minimumPeakWidth();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakWidth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setMinimumPeakWidth" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetection_setMinimumPeakWidth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakWidth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setMinimumPeakWidth" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakWidth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetection_setMinimumPeakWidth", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetection_setMinimumPeakWidth__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetection_setMinimumPeakWidth__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetection_setMinimumPeakWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::setMinimumPeakWidth(int,bool)\n"
    "    PeakDetection::setMinimumPeakWidth(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetection_candidateCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_candidateCount" "', argument " "1"" of type '" "PeakDetection const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      result = (int)((PeakDetection const *)arg1)->candidateCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setCandidateCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setCandidateCount" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetection_setCandidateCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setCandidateCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setCandidateCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setCandidateCount" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCandidateCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setCandidateCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetection_setCandidateCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetection_setCandidateCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetection_setCandidateCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetection_setCandidateCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::setCandidateCount(int,bool)\n"
    "    PeakDetection::setCandidateCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetection_minimumPeakContrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_minimumPeakContrast" "', argument " "1"" of type '" "PeakDetection const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      result = ((PeakDetection const *)arg1)->minimumPeakContrast();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakContrast__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setMinimumPeakContrast" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setMinimumPeakContrast" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetection_setMinimumPeakContrast" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinimumPeakContrast(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakContrast__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setMinimumPeakContrast" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setMinimumPeakContrast" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setMinimumPeakContrast(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setMinimumPeakContrast(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetection_setMinimumPeakContrast", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PeakDetection_setMinimumPeakContrast__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetection_setMinimumPeakContrast__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetection_setMinimumPeakContrast'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::setMinimumPeakContrast(Real,bool)\n"
    "    PeakDetection::setMinimumPeakContrast(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetection_sortMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PeakDetection::SortMethod result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_sortMethod" "', argument " "1"" of type '" "PeakDetection const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  {
    try {
      result = (PeakDetection::SortMethod)((PeakDetection const *)arg1)->sortMethod();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setSortMethod__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  PeakDetection::SortMethod arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setSortMethod" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setSortMethod" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetection_setSortMethod" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSortMethod(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setSortMethod__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetection *arg1 = (PeakDetection *) 0 ;
  PeakDetection::SortMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetection_setSortMethod" "', argument " "1"" of type '" "PeakDetection *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetection_setSortMethod" "', argument " "2"" of type '" "PeakDetection::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetection::SortMethod >(val2);
  {
    try {
      (arg1)->setSortMethod(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetection_setSortMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetection_setSortMethod", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetection_setSortMethod__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetection_setSortMethod__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetection_setSortMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetection::setSortMethod(PeakDetection::SortMethod,bool)\n"
    "    PeakDetection::setSortMethod(PeakDetection::SortMethod)\n");
  return 0;
}


SWIGINTERN PyObject *PeakDetection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakDetection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakDetection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetectionComplex::SortMethod arg2 ;
  int arg3 ;
  int arg4 ;
  Real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetectionComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetectionComplex" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetectionComplex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PeakDetectionComplex" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PeakDetectionComplex" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetectionComplex::SortMethod arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetectionComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetectionComplex" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetectionComplex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PeakDetectionComplex" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetectionComplex::SortMethod arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetectionComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetectionComplex" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakDetectionComplex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  PeakDetectionComplex::SortMethod arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetectionComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakDetectionComplex" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakDetectionComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (PeakDetectionComplex *)new PeakDetectionComplex();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakDetectionComplex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PeakDetectionComplex", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PeakDetectionComplex__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PeakDetectionComplex__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_PeakDetectionComplex__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_PeakDetectionComplex__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_PeakDetectionComplex__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              return _wrap_new_PeakDetectionComplex__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PeakDetectionComplex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::PeakDetectionComplex(int,PeakDetectionComplex::SortMethod,int,int,Real)\n"
    "    PeakDetectionComplex::PeakDetectionComplex(int,PeakDetectionComplex::SortMethod,int,int)\n"
    "    PeakDetectionComplex::PeakDetectionComplex(int,PeakDetectionComplex::SortMethod,int)\n"
    "    PeakDetectionComplex::PeakDetectionComplex(int,PeakDetectionComplex::SortMethod)\n"
    "    PeakDetectionComplex::PeakDetectionComplex(int)\n"
    "    PeakDetectionComplex::PeakDetectionComplex()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PeakDetectionComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakDetectionComplex" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_reset" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setup" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_process" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_peakCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_peakCount" "', argument " "1"" of type '" "PeakDetectionComplex const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      result = (int)((PeakDetectionComplex const *)arg1)->peakCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setPeakCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setPeakCount" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setPeakCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetectionComplex_setPeakCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPeakCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setPeakCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setPeakCount" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setPeakCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPeakCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setPeakCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_setPeakCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetectionComplex_setPeakCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetectionComplex_setPeakCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetectionComplex_setPeakCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::setPeakCount(int,bool)\n"
    "    PeakDetectionComplex::setPeakCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_minimumPeakWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_minimumPeakWidth" "', argument " "1"" of type '" "PeakDetectionComplex const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      result = (int)((PeakDetectionComplex const *)arg1)->minimumPeakWidth();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakWidth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setMinimumPeakWidth" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetectionComplex_setMinimumPeakWidth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakWidth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setMinimumPeakWidth" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakWidth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_setMinimumPeakWidth", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetectionComplex_setMinimumPeakWidth__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetectionComplex_setMinimumPeakWidth__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetectionComplex_setMinimumPeakWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::setMinimumPeakWidth(int,bool)\n"
    "    PeakDetectionComplex::setMinimumPeakWidth(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_candidateCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_candidateCount" "', argument " "1"" of type '" "PeakDetectionComplex const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      result = (int)((PeakDetectionComplex const *)arg1)->candidateCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setCandidateCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setCandidateCount" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetectionComplex_setCandidateCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setCandidateCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setCandidateCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setCandidateCount" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCandidateCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setCandidateCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_setCandidateCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetectionComplex_setCandidateCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetectionComplex_setCandidateCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetectionComplex_setCandidateCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::setCandidateCount(int,bool)\n"
    "    PeakDetectionComplex::setCandidateCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_minimumPeakContrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_minimumPeakContrast" "', argument " "1"" of type '" "PeakDetectionComplex const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      result = (int)((PeakDetectionComplex const *)arg1)->minimumPeakContrast();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakContrast__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setMinimumPeakContrast" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setMinimumPeakContrast" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetectionComplex_setMinimumPeakContrast" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinimumPeakContrast(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakContrast__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setMinimumPeakContrast" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setMinimumPeakContrast" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setMinimumPeakContrast(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setMinimumPeakContrast(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_setMinimumPeakContrast", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PeakDetectionComplex_setMinimumPeakContrast__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetectionComplex_setMinimumPeakContrast__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetectionComplex_setMinimumPeakContrast'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::setMinimumPeakContrast(Real,bool)\n"
    "    PeakDetectionComplex::setMinimumPeakContrast(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_sortMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PeakDetectionComplex::SortMethod result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_sortMethod" "', argument " "1"" of type '" "PeakDetectionComplex const *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  {
    try {
      result = (PeakDetectionComplex::SortMethod)((PeakDetectionComplex const *)arg1)->sortMethod();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setSortMethod__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  PeakDetectionComplex::SortMethod arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setSortMethod" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setSortMethod" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakDetectionComplex_setSortMethod" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSortMethod(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setSortMethod__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakDetectionComplex *arg1 = (PeakDetectionComplex *) 0 ;
  PeakDetectionComplex::SortMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakDetectionComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakDetectionComplex_setSortMethod" "', argument " "1"" of type '" "PeakDetectionComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakDetectionComplex * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakDetectionComplex_setSortMethod" "', argument " "2"" of type '" "PeakDetectionComplex::SortMethod""'");
  } 
  arg2 = static_cast< PeakDetectionComplex::SortMethod >(val2);
  {
    try {
      (arg1)->setSortMethod(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakDetectionComplex_setSortMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakDetectionComplex_setSortMethod", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakDetectionComplex_setSortMethod__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakDetectionComplex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakDetectionComplex_setSortMethod__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakDetectionComplex_setSortMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakDetectionComplex::setSortMethod(PeakDetectionComplex::SortMethod,bool)\n"
    "    PeakDetectionComplex::setSortMethod(PeakDetectionComplex::SortMethod)\n");
  return 0;
}


SWIGINTERN PyObject *PeakDetectionComplex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakDetectionComplex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakDetectionComplex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakCOG__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PeakCOG *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakCOG" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakCOG" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (PeakCOG *)new PeakCOG(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakCOG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakCOG__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PeakCOG *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakCOG" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PeakCOG *)new PeakCOG(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakCOG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakCOG(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PeakCOG", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PeakCOG__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_PeakCOG__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PeakCOG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakCOG::PeakCOG(int,int)\n"
    "    PeakCOG::PeakCOG(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PeakCOG(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakCOG *arg1 = (PeakCOG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakCOG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakCOG" "', argument " "1"" of type '" "PeakCOG *""'"); 
  }
  arg1 = reinterpret_cast< PeakCOG * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakCOG_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakCOG *arg1 = (PeakCOG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakCOG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakCOG_setup" "', argument " "1"" of type '" "PeakCOG *""'"); 
  }
  arg1 = reinterpret_cast< PeakCOG * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakCOG_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakCOG *arg1 = (PeakCOG *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakCOG_process", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakCOG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakCOG_process" "', argument " "1"" of type '" "PeakCOG *""'"); 
  }
  arg1 = reinterpret_cast< PeakCOG * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,(MatrixXR const &)*arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakCOG_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakCOG *arg1 = (PeakCOG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakCOG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakCOG_reset" "', argument " "1"" of type '" "PeakCOG *""'"); 
  }
  arg1 = reinterpret_cast< PeakCOG * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeakCOG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakCOG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakCOG_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_PeakInterpolation", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (PeakInterpolation *)new PeakInterpolation();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakInterpolation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PeakInterpolation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolation *arg1 = (PeakInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakInterpolation" "', argument " "1"" of type '" "PeakInterpolation *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolation * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolation_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolation *arg1 = (PeakInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolation_setup" "', argument " "1"" of type '" "PeakInterpolation *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolation * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolation_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolation *arg1 = (PeakInterpolation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolation_reset" "', argument " "1"" of type '" "PeakInterpolation *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolation * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolation_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolation *arg1 = (PeakInterpolation *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  MatrixXR *arg6 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  MatrixXR temp6 ;
  PyObject *swig_obj[4] ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakInterpolation_process", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolation_process" "', argument " "1"" of type '" "PeakInterpolation *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolation * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg4 = &temp4;
    
    // prepare the input array
    switch( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg4) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg4) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,(MatrixXR const &)*arg3,(MatrixXR const &)*arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeakInterpolation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakInterpolation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakInterpolation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakInterpolationComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolationComplex *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_PeakInterpolationComplex", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (PeakInterpolationComplex *)new PeakInterpolationComplex();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakInterpolationComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PeakInterpolationComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolationComplex *arg1 = (PeakInterpolationComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolationComplex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakInterpolationComplex" "', argument " "1"" of type '" "PeakInterpolationComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolationComplex * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolationComplex_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolationComplex *arg1 = (PeakInterpolationComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolationComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolationComplex_setup" "', argument " "1"" of type '" "PeakInterpolationComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolationComplex * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolationComplex_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolationComplex *arg1 = (PeakInterpolationComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolationComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolationComplex_reset" "', argument " "1"" of type '" "PeakInterpolationComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolationComplex * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakInterpolationComplex_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakInterpolationComplex *arg1 = (PeakInterpolationComplex *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = 0 ;
  MatrixXR *arg5 = 0 ;
  MatrixXR *arg6 = (MatrixXR *) 0 ;
  MatrixXR *arg7 = (MatrixXR *) 0 ;
  MatrixXR *arg8 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  MatrixXR temp6 ;
  MatrixXR temp7 ;
  MatrixXR temp8 ;
  PyObject *swig_obj[5] ;
  
  {
    arg6 = &temp6;
    
  }
  {
    arg7 = &temp7;
    
  }
  {
    arg8 = &temp8;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakInterpolationComplex_process", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakInterpolationComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakInterpolationComplex_process" "', argument " "1"" of type '" "PeakInterpolationComplex *""'"); 
  }
  arg1 = reinterpret_cast< PeakInterpolationComplex * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg4 = &temp4;
    
    // prepare the input array
    switch( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg4) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg4) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[4]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[4], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[4], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg5 = &temp5;
    
    // prepare the input array
    switch( array_type(swig_obj[4]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg5) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg5) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,(MatrixXR const &)*arg3,(MatrixXR const &)*arg4,(MatrixXR const &)*arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg7->rows(), arg7->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg7);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg8->rows(), arg8->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg8);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeakInterpolationComplex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakInterpolationComplex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakInterpolationComplex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakTracking__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PeakTracking *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakTracking" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakTracking" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakTracking" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PeakTracking *)new PeakTracking(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakTracking, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakTracking__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PeakTracking *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakTracking" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakTracking" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (PeakTracking *)new PeakTracking(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakTracking, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakTracking__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PeakTracking *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakTracking" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PeakTracking *)new PeakTracking(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakTracking, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakTracking__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PeakTracking *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (PeakTracking *)new PeakTracking();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakTracking, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakTracking(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PeakTracking", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PeakTracking__SWIG_3(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PeakTracking__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_PeakTracking__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_PeakTracking__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PeakTracking'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakTracking::PeakTracking(int,Real,int)\n"
    "    PeakTracking::PeakTracking(int,Real)\n"
    "    PeakTracking::PeakTracking(int)\n"
    "    PeakTracking::PeakTracking()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PeakTracking(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakTracking" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setup" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_reset" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  MatrixXR *arg6 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  MatrixXR temp6 ;
  PyObject *swig_obj[4] ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakTracking_process", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_process" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[3], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg4 = &temp4;
    
    // prepare the input array
    switch( array_type(swig_obj[3]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg4) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg4) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,(MatrixXR const &)*arg3,(MatrixXR const &)*arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_trajectoryCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_trajectoryCount" "', argument " "1"" of type '" "PeakTracking const *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      result = (int)((PeakTracking const *)arg1)->trajectoryCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setTrajectoryCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setTrajectoryCount" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setTrajectoryCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakTracking_setTrajectoryCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setTrajectoryCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setTrajectoryCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setTrajectoryCount" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setTrajectoryCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setTrajectoryCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setTrajectoryCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakTracking_setTrajectoryCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakTracking_setTrajectoryCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakTracking_setTrajectoryCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakTracking_setTrajectoryCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakTracking::setTrajectoryCount(int,bool)\n"
    "    PeakTracking::setTrajectoryCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakTracking_maximumFrequencyChange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_maximumFrequencyChange" "', argument " "1"" of type '" "PeakTracking const *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      result = ((PeakTracking const *)arg1)->maximumFrequencyChange();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setMaximumFrequencyChange__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setMaximumFrequencyChange" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setMaximumFrequencyChange" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakTracking_setMaximumFrequencyChange" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMaximumFrequencyChange(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setMaximumFrequencyChange__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setMaximumFrequencyChange" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setMaximumFrequencyChange" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setMaximumFrequencyChange(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setMaximumFrequencyChange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakTracking_setMaximumFrequencyChange", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PeakTracking_setMaximumFrequencyChange__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakTracking_setMaximumFrequencyChange__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakTracking_setMaximumFrequencyChange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakTracking::setMaximumFrequencyChange(Real,bool)\n"
    "    PeakTracking::setMaximumFrequencyChange(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PeakTracking_silentFrameCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_silentFrameCount" "', argument " "1"" of type '" "PeakTracking const *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  {
    try {
      result = (int)((PeakTracking const *)arg1)->silentFrameCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setSilentFrameCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setSilentFrameCount" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setSilentFrameCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PeakTracking_setSilentFrameCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSilentFrameCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setSilentFrameCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PeakTracking *arg1 = (PeakTracking *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakTracking, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakTracking_setSilentFrameCount" "', argument " "1"" of type '" "PeakTracking *""'"); 
  }
  arg1 = reinterpret_cast< PeakTracking * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PeakTracking_setSilentFrameCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setSilentFrameCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakTracking_setSilentFrameCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PeakTracking_setSilentFrameCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PeakTracking_setSilentFrameCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PeakTracking, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PeakTracking_setSilentFrameCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PeakTracking_setSilentFrameCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakTracking::setSilentFrameCount(int,bool)\n"
    "    PeakTracking::setSilentFrameCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *PeakTracking_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakTracking, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakTracking_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PeakSynthesize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Window::WindowType arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PeakSynthesize *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakSynthesize" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakSynthesize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PeakSynthesize" "', argument " "3"" of type '" "Window::WindowType""'");
  } 
  arg3 = static_cast< Window::WindowType >(val3);
  {
    try {
      result = (PeakSynthesize *)new PeakSynthesize(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakSynthesize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakSynthesize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PeakSynthesize *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PeakSynthesize" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PeakSynthesize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (PeakSynthesize *)new PeakSynthesize(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PeakSynthesize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PeakSynthesize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PeakSynthesize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_PeakSynthesize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_PeakSynthesize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PeakSynthesize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PeakSynthesize::PeakSynthesize(int,int,Window::WindowType)\n"
    "    PeakSynthesize::PeakSynthesize(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PeakSynthesize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakSynthesize *arg1 = (PeakSynthesize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakSynthesize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PeakSynthesize" "', argument " "1"" of type '" "PeakSynthesize *""'"); 
  }
  arg1 = reinterpret_cast< PeakSynthesize * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakSynthesize_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakSynthesize *arg1 = (PeakSynthesize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakSynthesize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakSynthesize_setup" "', argument " "1"" of type '" "PeakSynthesize *""'"); 
  }
  arg1 = reinterpret_cast< PeakSynthesize * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakSynthesize_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakSynthesize *arg1 = (PeakSynthesize *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PeakSynthesize_process", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakSynthesize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakSynthesize_process" "', argument " "1"" of type '" "PeakSynthesize *""'"); 
  }
  arg1 = reinterpret_cast< PeakSynthesize * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,(MatrixXR const &)*arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PeakSynthesize_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PeakSynthesize *arg1 = (PeakSynthesize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PeakSynthesize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PeakSynthesize_reset" "', argument " "1"" of type '" "PeakSynthesize *""'"); 
  }
  arg1 = reinterpret_cast< PeakSynthesize * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PeakSynthesize_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PeakSynthesize, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PeakSynthesize_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  BandFilter::BandType arg4 ;
  BandFilter::FilterType arg5 ;
  Real arg6 ;
  Real arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BandFilter" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BandFilter" "', argument " "4"" of type '" "BandFilter::BandType""'");
  } 
  arg4 = static_cast< BandFilter::BandType >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BandFilter" "', argument " "5"" of type '" "BandFilter::FilterType""'");
  } 
  arg5 = static_cast< BandFilter::FilterType >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_BandFilter" "', argument " "6"" of type '" "Real""'");
  } 
  arg6 = static_cast< Real >(val6);
  ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_BandFilter" "', argument " "7"" of type '" "Real""'");
  } 
  arg7 = static_cast< Real >(val7);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  BandFilter::BandType arg4 ;
  BandFilter::FilterType arg5 ;
  Real arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BandFilter" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BandFilter" "', argument " "4"" of type '" "BandFilter::BandType""'");
  } 
  arg4 = static_cast< BandFilter::BandType >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BandFilter" "', argument " "5"" of type '" "BandFilter::FilterType""'");
  } 
  arg5 = static_cast< BandFilter::FilterType >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_BandFilter" "', argument " "6"" of type '" "Real""'");
  } 
  arg6 = static_cast< Real >(val6);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  BandFilter::BandType arg4 ;
  BandFilter::FilterType arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BandFilter" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BandFilter" "', argument " "4"" of type '" "BandFilter::BandType""'");
  } 
  arg4 = static_cast< BandFilter::BandType >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BandFilter" "', argument " "5"" of type '" "BandFilter::FilterType""'");
  } 
  arg5 = static_cast< BandFilter::FilterType >(val5);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  BandFilter::BandType arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BandFilter" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BandFilter" "', argument " "4"" of type '" "BandFilter::BandType""'");
  } 
  arg4 = static_cast< BandFilter::BandType >(val4);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BandFilter" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BandFilter" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  BandFilter *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BandFilter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (BandFilter *)new BandFilter(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  BandFilter *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (BandFilter *)new BandFilter();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BandFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BandFilter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BandFilter", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BandFilter__SWIG_7(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_BandFilter__SWIG_6(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_BandFilter__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_BandFilter__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_BandFilter__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_BandFilter__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                
              }
              if (_v) {
                return _wrap_new_BandFilter__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                
              }
              if (_v) {
                {
                  _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                  
                }
                if (_v) {
                  return _wrap_new_BandFilter__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BandFilter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::BandFilter(int,Real,Real,BandFilter::BandType,BandFilter::FilterType,Real,Real)\n"
    "    BandFilter::BandFilter(int,Real,Real,BandFilter::BandType,BandFilter::FilterType,Real)\n"
    "    BandFilter::BandFilter(int,Real,Real,BandFilter::BandType,BandFilter::FilterType)\n"
    "    BandFilter::BandFilter(int,Real,Real,BandFilter::BandType)\n"
    "    BandFilter::BandFilter(int,Real,Real)\n"
    "    BandFilter::BandFilter(int,Real)\n"
    "    BandFilter::BandFilter(int)\n"
    "    BandFilter::BandFilter()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setup" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_reset" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "BandFilter_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_process" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_a(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_a" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      ((BandFilter const *)arg1)->a(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_b(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_b" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      ((BandFilter const *)arg1)->b(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_order(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_order" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = (int)((BandFilter const *)arg1)->order();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setOrder__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setOrder" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setOrder" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setOrder" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setOrder(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setOrder__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setOrder" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setOrder" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setOrder(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setOrder(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setOrder", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_BandFilter_setOrder__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setOrder__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setOrder'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setOrder(int,bool)\n"
    "    BandFilter::setOrder(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_lowFrequency" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = ((BandFilter const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setLowFrequency" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setLowFrequency" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BandFilter_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setLowFrequency(Real,bool)\n"
    "    BandFilter::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_highFrequency" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = ((BandFilter const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setHighFrequency" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setHighFrequency" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BandFilter_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setHighFrequency(Real,bool)\n"
    "    BandFilter::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_filterType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  BandFilter::FilterType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_filterType" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = (BandFilter::FilterType)((BandFilter const *)arg1)->filterType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setFilterType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  BandFilter::FilterType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setFilterType" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setFilterType" "', argument " "2"" of type '" "BandFilter::FilterType""'");
  } 
  arg2 = static_cast< BandFilter::FilterType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setFilterType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFilterType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setFilterType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  BandFilter::FilterType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setFilterType" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setFilterType" "', argument " "2"" of type '" "BandFilter::FilterType""'");
  } 
  arg2 = static_cast< BandFilter::FilterType >(val2);
  {
    try {
      (arg1)->setFilterType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setFilterType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setFilterType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_BandFilter_setFilterType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setFilterType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setFilterType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setFilterType(BandFilter::FilterType,bool)\n"
    "    BandFilter::setFilterType(BandFilter::FilterType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_bandType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  BandFilter::BandType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_bandType" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = (BandFilter::BandType)((BandFilter const *)arg1)->bandType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setBandType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  BandFilter::BandType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setBandType" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setBandType" "', argument " "2"" of type '" "BandFilter::BandType""'");
  } 
  arg2 = static_cast< BandFilter::BandType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setBandType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setBandType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setBandType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  BandFilter::BandType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setBandType" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setBandType" "', argument " "2"" of type '" "BandFilter::BandType""'");
  } 
  arg2 = static_cast< BandFilter::BandType >(val2);
  {
    try {
      (arg1)->setBandType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setBandType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setBandType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_BandFilter_setBandType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setBandType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setBandType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setBandType(BandFilter::BandType,bool)\n"
    "    BandFilter::setBandType(BandFilter::BandType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_passRipple(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_passRipple" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = ((BandFilter const *)arg1)->passRipple();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setPassRipple__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setPassRipple" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setPassRipple" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setPassRipple" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPassRipple(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setPassRipple__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setPassRipple" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setPassRipple" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setPassRipple(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setPassRipple(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setPassRipple", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BandFilter_setPassRipple__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setPassRipple__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setPassRipple'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setPassRipple(Real,bool)\n"
    "    BandFilter::setPassRipple(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BandFilter_stopAttenuation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_stopAttenuation" "', argument " "1"" of type '" "BandFilter const *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      result = ((BandFilter const *)arg1)->stopAttenuation();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setStopAttenuation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setStopAttenuation" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setStopAttenuation" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BandFilter_setStopAttenuation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setStopAttenuation(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setStopAttenuation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BandFilter_setStopAttenuation" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BandFilter_setStopAttenuation" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setStopAttenuation(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BandFilter_setStopAttenuation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BandFilter_setStopAttenuation", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_BandFilter_setStopAttenuation__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BandFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_BandFilter_setStopAttenuation__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BandFilter_setStopAttenuation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BandFilter::setStopAttenuation(Real,bool)\n"
    "    BandFilter::setStopAttenuation(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BandFilter(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  BandFilter *arg1 = (BandFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_BandFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BandFilter" "', argument " "1"" of type '" "BandFilter *""'"); 
  }
  arg1 = reinterpret_cast< BandFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BandFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BandFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BandFilter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Unwrap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Unwrap *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Unwrap", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (Unwrap *)new Unwrap();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Unwrap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Unwrap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Unwrap *arg1 = (Unwrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Unwrap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unwrap" "', argument " "1"" of type '" "Unwrap *""'"); 
  }
  arg1 = reinterpret_cast< Unwrap * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrap_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Unwrap *arg1 = (Unwrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Unwrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrap_setup" "', argument " "1"" of type '" "Unwrap *""'"); 
  }
  arg1 = reinterpret_cast< Unwrap * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrap_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Unwrap *arg1 = (Unwrap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Unwrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrap_reset" "', argument " "1"" of type '" "Unwrap *""'"); 
  }
  arg1 = reinterpret_cast< Unwrap * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unwrap_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Unwrap *arg1 = (Unwrap *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Unwrap_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Unwrap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unwrap_process" "', argument " "1"" of type '" "Unwrap *""'"); 
  }
  arg1 = reinterpret_cast< Unwrap * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unwrap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Unwrap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Unwrap_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LPC__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  LPC *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LPC" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LPC" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LPC" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (LPC *)new LPC(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LPC__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  LPC *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LPC" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LPC" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (LPC *)new LPC(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LPC__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  LPC *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LPC" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (LPC *)new LPC(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LPC__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  LPC *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (LPC *)new LPC();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LPC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LPC", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LPC__SWIG_3(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_LPC__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_LPC__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_LPC__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LPC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LPC::LPC(int,int,Real)\n"
    "    LPC::LPC(int,int)\n"
    "    LPC::LPC(int)\n"
    "    LPC::LPC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LPC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LPC" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setup" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_reset" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "LPC_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_process" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_inputSize" "', argument " "1"" of type '" "LPC const *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      result = (int)((LPC const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setInputSize" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LPC_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setInputSize" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LPC_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_LPC_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_LPC_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LPC_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LPC::setInputSize(int,bool)\n"
    "    LPC::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LPC_coefficientCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_coefficientCount" "', argument " "1"" of type '" "LPC const *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      result = (int)((LPC const *)arg1)->coefficientCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setCoefficientCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setCoefficientCount" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setCoefficientCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LPC_setCoefficientCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setCoefficientCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setCoefficientCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setCoefficientCount" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setCoefficientCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setCoefficientCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setCoefficientCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LPC_setCoefficientCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_LPC_setCoefficientCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_LPC_setCoefficientCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LPC_setCoefficientCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LPC::setCoefficientCount(int,bool)\n"
    "    LPC::setCoefficientCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LPC_preEmphasis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_preEmphasis" "', argument " "1"" of type '" "LPC const *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  {
    try {
      result = ((LPC const *)arg1)->preEmphasis();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setPreEmphasis__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setPreEmphasis" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setPreEmphasis" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LPC_setPreEmphasis" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPreEmphasis(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setPreEmphasis__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  LPC *arg1 = (LPC *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPC_setPreEmphasis" "', argument " "1"" of type '" "LPC *""'"); 
  }
  arg1 = reinterpret_cast< LPC * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPC_setPreEmphasis" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setPreEmphasis(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPC_setPreEmphasis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LPC_setPreEmphasis", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_LPC_setPreEmphasis__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_LPC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_LPC_setPreEmphasis__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LPC_setPreEmphasis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LPC::setPreEmphasis(Real,bool)\n"
    "    LPC::setPreEmphasis(Real)\n");
  return 0;
}


SWIGINTERN PyObject *LPC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LPC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LPC_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LPCResidual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  LPCResidual *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LPCResidual" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (LPCResidual *)new LPCResidual(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPCResidual, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LPCResidual(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPCResidual *arg1 = (LPCResidual *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPCResidual, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LPCResidual" "', argument " "1"" of type '" "LPCResidual *""'"); 
  }
  arg1 = reinterpret_cast< LPCResidual * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCResidual_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPCResidual *arg1 = (LPCResidual *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPCResidual, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCResidual_setup" "', argument " "1"" of type '" "LPCResidual *""'"); 
  }
  arg1 = reinterpret_cast< LPCResidual * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCResidual_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPCResidual *arg1 = (LPCResidual *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "LPCResidual_process", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPCResidual, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCResidual_process" "', argument " "1"" of type '" "LPCResidual *""'"); 
  }
  arg1 = reinterpret_cast< LPCResidual * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,(MatrixXR const &)*arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCResidual_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  LPCResidual *arg1 = (LPCResidual *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_LPCResidual, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCResidual_reset" "', argument " "1"" of type '" "LPCResidual *""'"); 
  }
  arg1 = reinterpret_cast< LPCResidual * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LPCResidual_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LPCResidual, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LPCResidual_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NMF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  NMF *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NMF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NMF" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (NMF *)new NMF(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NMF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  NMF *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NMF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (NMF *)new NMF(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NMF__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  NMF *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (NMF *)new NMF(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NMF__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  NMF *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (NMF *)new NMF(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NMF__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  NMF *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (NMF *)new NMF();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NMF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NMF", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_NMF__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_NMF__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_NMF__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_NMF__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_NMF__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NMF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NMF::NMF(int,int,int,Real)\n"
    "    NMF::NMF(int,int,int)\n"
    "    NMF::NMF(int,int)\n"
    "    NMF::NMF(int)\n"
    "    NMF::NMF()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NMF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NMF" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_reset" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setup" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "NMF_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_process" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_inputSize" "', argument " "1"" of type '" "NMF const *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      result = (int)((NMF const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setInputSize" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NMF_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setInputSize" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NMF_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_NMF_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_NMF_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NMF_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NMF::setInputSize(int,bool)\n"
    "    NMF::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NMF_componentCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_componentCount" "', argument " "1"" of type '" "NMF const *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      result = (int)((NMF const *)arg1)->componentCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setComponentCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setComponentCount" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setComponentCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NMF_setComponentCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setComponentCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setComponentCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setComponentCount" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setComponentCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setComponentCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setComponentCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NMF_setComponentCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_NMF_setComponentCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_NMF_setComponentCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NMF_setComponentCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NMF::setComponentCount(int,bool)\n"
    "    NMF::setComponentCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NMF_iterationCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_iterationCount" "', argument " "1"" of type '" "NMF const *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      result = (int)((NMF const *)arg1)->iterationCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setIterationCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setIterationCount" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setIterationCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NMF_setIterationCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setIterationCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setIterationCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setIterationCount" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setIterationCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setIterationCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setIterationCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NMF_setIterationCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_NMF_setIterationCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_NMF_setIterationCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NMF_setIterationCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NMF::setIterationCount(int,bool)\n"
    "    NMF::setIterationCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NMF_epsilon(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_epsilon" "', argument " "1"" of type '" "NMF const *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  {
    try {
      result = ((NMF const *)arg1)->epsilon();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setEpsilon__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setEpsilon" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setEpsilon" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NMF_setEpsilon" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setEpsilon(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setEpsilon__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  NMF *arg1 = (NMF *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NMF_setEpsilon" "', argument " "1"" of type '" "NMF *""'"); 
  }
  arg1 = reinterpret_cast< NMF * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NMF_setEpsilon" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setEpsilon(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NMF_setEpsilon(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "NMF_setEpsilon", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_NMF_setEpsilon__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NMF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_NMF_setEpsilon__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NMF_setEpsilon'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NMF::setEpsilon(Real,bool)\n"
    "    NMF::setEpsilon(Real)\n");
  return 0;
}


SWIGINTERN PyObject *NMF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NMF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NMF_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_INMF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  Real arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  INMF *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_INMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_INMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_INMF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_INMF" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_INMF" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_INMF" "', argument " "6"" of type '" "Real""'");
  } 
  arg6 = static_cast< Real >(val6);
  {
    try {
      result = (INMF *)new INMF(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INMF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  INMF *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_INMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_INMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_INMF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_INMF" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_INMF" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (INMF *)new INMF(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INMF__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  INMF *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_INMF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_INMF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_INMF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_INMF" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (INMF *)new INMF(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INMF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INMF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_INMF", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_INMF__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_INMF__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                
              }
              if (_v) {
                return _wrap_new_INMF__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_INMF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    INMF::INMF(int,int,int,Real,int,Real)\n"
    "    INMF::INMF(int,int,int,Real,int)\n"
    "    INMF::INMF(int,int,int,Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_INMF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INMF *arg1 = (INMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_INMF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INMF" "', argument " "1"" of type '" "INMF *""'"); 
  }
  arg1 = reinterpret_cast< INMF * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INMF_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INMF *arg1 = (INMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_INMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INMF_setup" "', argument " "1"" of type '" "INMF *""'"); 
  }
  arg1 = reinterpret_cast< INMF * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INMF_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INMF *arg1 = (INMF *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "INMF_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_INMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INMF_process" "', argument " "1"" of type '" "INMF *""'"); 
  }
  arg1 = reinterpret_cast< INMF * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INMF_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  INMF *arg1 = (INMF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_INMF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INMF_reset" "', argument " "1"" of type '" "INMF *""'"); 
  }
  arg1 = reinterpret_cast< INMF * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INMF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_INMF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *INMF_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Resample__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  Resample::ResamplingMethod arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Resample *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Resample" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Resample" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Resample" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Resample" "', argument " "4"" of type '" "Resample::ResamplingMethod""'");
  } 
  arg4 = static_cast< Resample::ResamplingMethod >(val4);
  {
    try {
      result = (Resample *)new Resample(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Resample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Resample__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  Resample *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Resample" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Resample" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Resample" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (Resample *)new Resample(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Resample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Resample__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Resample *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Resample" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Resample" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Resample *)new Resample(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Resample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Resample__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Resample *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Resample" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Resample *)new Resample(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Resample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Resample__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Resample *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Resample *)new Resample();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Resample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Resample(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Resample", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Resample__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Resample__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Resample__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_Resample__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_Resample__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Resample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resample::Resample(int,int,Real,Resample::ResamplingMethod)\n"
    "    Resample::Resample(int,int,Real)\n"
    "    Resample::Resample(int,int)\n"
    "    Resample::Resample(int)\n"
    "    Resample::Resample()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Resample(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Resample" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Resample_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_process" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setup" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_reset" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_inputSize" "', argument " "1"" of type '" "Resample const *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      result = (int)((Resample const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setInputSize" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resample_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setInputSize" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Resample_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Resample_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Resample_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Resample_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resample::setInputSize(int,bool)\n"
    "    Resample::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Resample_outputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_outputSize" "', argument " "1"" of type '" "Resample const *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      result = (int)((Resample const *)arg1)->outputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setOutputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setOutputSize" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setOutputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resample_setOutputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setOutputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setOutputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setOutputSize" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setOutputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setOutputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setOutputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Resample_setOutputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Resample_setOutputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Resample_setOutputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Resample_setOutputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resample::setOutputSize(int,bool)\n"
    "    Resample::setOutputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Resample_resamplingRatio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_resamplingRatio" "', argument " "1"" of type '" "Resample const *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      result = ((Resample const *)arg1)->resamplingRatio();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingRatio__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setResamplingRatio" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setResamplingRatio" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resample_setResamplingRatio" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setResamplingRatio(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingRatio__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setResamplingRatio" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setResamplingRatio" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setResamplingRatio(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Resample_setResamplingRatio", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_Resample_setResamplingRatio__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Resample_setResamplingRatio__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Resample_setResamplingRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resample::setResamplingRatio(Real,bool)\n"
    "    Resample::setResamplingRatio(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Resample_resamplingMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Resample::ResamplingMethod result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_resamplingMethod" "', argument " "1"" of type '" "Resample const *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  {
    try {
      result = (Resample::ResamplingMethod)((Resample const *)arg1)->resamplingMethod();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingMethod__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  Resample::ResamplingMethod arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setResamplingMethod" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setResamplingMethod" "', argument " "2"" of type '" "Resample::ResamplingMethod""'");
  } 
  arg2 = static_cast< Resample::ResamplingMethod >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Resample_setResamplingMethod" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setResamplingMethod(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingMethod__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Resample *arg1 = (Resample *) 0 ;
  Resample::ResamplingMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Resample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Resample_setResamplingMethod" "', argument " "1"" of type '" "Resample *""'"); 
  }
  arg1 = reinterpret_cast< Resample * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Resample_setResamplingMethod" "', argument " "2"" of type '" "Resample::ResamplingMethod""'");
  } 
  arg2 = static_cast< Resample::ResamplingMethod >(val2);
  {
    try {
      (arg1)->setResamplingMethod(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Resample_setResamplingMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Resample_setResamplingMethod", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Resample_setResamplingMethod__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Resample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Resample_setResamplingMethod__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Resample_setResamplingMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resample::setResamplingMethod(Resample::ResamplingMethod,bool)\n"
    "    Resample::setResamplingMethod(Resample::ResamplingMethod)\n");
  return 0;
}


SWIGINTERN PyObject *Resample_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Resample, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Resample_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  Correlation *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Correlation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Correlation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Correlation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Correlation" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Correlation" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (Correlation *)new Correlation(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Correlation *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Correlation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Correlation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Correlation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Correlation" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (Correlation *)new Correlation(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Correlation *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Correlation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Correlation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Correlation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Correlation *)new Correlation(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Correlation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Correlation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Correlation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Correlation *)new Correlation(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Correlation *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Correlation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Correlation *)new Correlation(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Correlation *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Correlation *)new Correlation();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Correlation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Correlation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Correlation", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Correlation__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Correlation__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Correlation__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_Correlation__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_Correlation__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_Correlation__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Correlation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::Correlation(int,int,int,int,bool)\n"
    "    Correlation::Correlation(int,int,int,int)\n"
    "    Correlation::Correlation(int,int,int)\n"
    "    Correlation::Correlation(int,int)\n"
    "    Correlation::Correlation(int)\n"
    "    Correlation::Correlation()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Correlation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Correlation" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setup" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_reset" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Correlation_process", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_process" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,(MatrixXR const &)*arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_inputSizeA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_inputSizeA" "', argument " "1"" of type '" "Correlation const *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      result = (int)((Correlation const *)arg1)->inputSizeA();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeA__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setInputSizeA" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setInputSizeA" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Correlation_setInputSizeA" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSizeA(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeA__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setInputSizeA" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setInputSizeA" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSizeA(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeA(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Correlation_setInputSizeA", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Correlation_setInputSizeA__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Correlation_setInputSizeA__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Correlation_setInputSizeA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::setInputSizeA(int,bool)\n"
    "    Correlation::setInputSizeA(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Correlation_inputSizeB(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_inputSizeB" "', argument " "1"" of type '" "Correlation const *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      result = (int)((Correlation const *)arg1)->inputSizeB();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeB__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setInputSizeB" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setInputSizeB" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Correlation_setInputSizeB" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSizeB(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeB__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setInputSizeB" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setInputSizeB" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSizeB(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setInputSizeB(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Correlation_setInputSizeB", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Correlation_setInputSizeB__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Correlation_setInputSizeB__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Correlation_setInputSizeB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::setInputSizeB(int,bool)\n"
    "    Correlation::setInputSizeB(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Correlation_minLag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_minLag" "', argument " "1"" of type '" "Correlation const *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      result = (int)((Correlation const *)arg1)->minLag();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMinLag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setMinLag" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setMinLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Correlation_setMinLag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinLag(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMinLag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setMinLag" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setMinLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMinLag(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMinLag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Correlation_setMinLag", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Correlation_setMinLag__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Correlation_setMinLag__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Correlation_setMinLag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::setMinLag(int,bool)\n"
    "    Correlation::setMinLag(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Correlation_maxLag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_maxLag" "', argument " "1"" of type '" "Correlation const *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      result = (int)((Correlation const *)arg1)->maxLag();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMaxLag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setMaxLag" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setMaxLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Correlation_setMaxLag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMaxLag(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMaxLag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setMaxLag" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setMaxLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMaxLag(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setMaxLag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Correlation_setMaxLag", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Correlation_setMaxLag__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Correlation_setMaxLag__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Correlation_setMaxLag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::setMaxLag(int,bool)\n"
    "    Correlation::setMaxLag(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Correlation_useFft(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_useFft" "', argument " "1"" of type '" "Correlation const *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  {
    try {
      result = (bool)((Correlation const *)arg1)->useFft();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setUseFft__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setUseFft" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setUseFft" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Correlation_setUseFft" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setUseFft(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setUseFft__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Correlation *arg1 = (Correlation *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Correlation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Correlation_setUseFft" "', argument " "1"" of type '" "Correlation *""'"); 
  }
  arg1 = reinterpret_cast< Correlation * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Correlation_setUseFft" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUseFft(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Correlation_setUseFft(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Correlation_setUseFft", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Correlation_setUseFft__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Correlation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Correlation_setUseFft__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Correlation_setUseFft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Correlation::setUseFft(bool,bool)\n"
    "    Correlation::setUseFft(bool)\n");
  return 0;
}


SWIGINTERN PyObject *Correlation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Correlation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Correlation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Autocorrelation__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  Autocorrelation *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Autocorrelation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Autocorrelation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Autocorrelation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Autocorrelation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (Autocorrelation *)new Autocorrelation(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Autocorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Autocorrelation *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Autocorrelation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Autocorrelation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Autocorrelation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Autocorrelation *)new Autocorrelation(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Autocorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Autocorrelation *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Autocorrelation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Autocorrelation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Autocorrelation *)new Autocorrelation(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Autocorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Autocorrelation *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Autocorrelation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Autocorrelation *)new Autocorrelation(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Autocorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Autocorrelation *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (Autocorrelation *)new Autocorrelation();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Autocorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Autocorrelation", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Autocorrelation__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_Autocorrelation__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Autocorrelation__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_Autocorrelation__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_Autocorrelation__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Autocorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Autocorrelation::Autocorrelation(int,int,int,bool)\n"
    "    Autocorrelation::Autocorrelation(int,int,int)\n"
    "    Autocorrelation::Autocorrelation(int,int)\n"
    "    Autocorrelation::Autocorrelation(int)\n"
    "    Autocorrelation::Autocorrelation()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Autocorrelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Autocorrelation" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setup" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_reset" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "Autocorrelation_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_process" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_inputSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_inputSize" "', argument " "1"" of type '" "Autocorrelation const *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      result = (int)((Autocorrelation const *)arg1)->inputSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setInputSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setInputSize" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Autocorrelation_setInputSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setInputSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setInputSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setInputSize" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setInputSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setInputSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setInputSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Autocorrelation_setInputSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Autocorrelation_setInputSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Autocorrelation_setInputSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Autocorrelation_setInputSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Autocorrelation::setInputSize(int,bool)\n"
    "    Autocorrelation::setInputSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_minLag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_minLag" "', argument " "1"" of type '" "Autocorrelation const *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      result = (int)((Autocorrelation const *)arg1)->minLag();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMinLag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setMinLag" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setMinLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Autocorrelation_setMinLag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinLag(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMinLag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setMinLag" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setMinLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMinLag(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMinLag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Autocorrelation_setMinLag", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Autocorrelation_setMinLag__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Autocorrelation_setMinLag__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Autocorrelation_setMinLag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Autocorrelation::setMinLag(int,bool)\n"
    "    Autocorrelation::setMinLag(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_maxLag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_maxLag" "', argument " "1"" of type '" "Autocorrelation const *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      result = (int)((Autocorrelation const *)arg1)->maxLag();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMaxLag__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setMaxLag" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setMaxLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Autocorrelation_setMaxLag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMaxLag(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMaxLag__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setMaxLag" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setMaxLag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMaxLag(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setMaxLag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Autocorrelation_setMaxLag", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Autocorrelation_setMaxLag__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Autocorrelation_setMaxLag__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Autocorrelation_setMaxLag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Autocorrelation::setMaxLag(int,bool)\n"
    "    Autocorrelation::setMaxLag(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_useFft(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_useFft" "', argument " "1"" of type '" "Autocorrelation const *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  {
    try {
      result = (bool)((Autocorrelation const *)arg1)->useFft();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setUseFft__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setUseFft" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setUseFft" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Autocorrelation_setUseFft" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setUseFft(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setUseFft__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Autocorrelation *arg1 = (Autocorrelation *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_setUseFft" "', argument " "1"" of type '" "Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_setUseFft" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setUseFft(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_setUseFft(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Autocorrelation_setUseFft", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_Autocorrelation_setUseFft__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Autocorrelation_setUseFft__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Autocorrelation_setUseFft'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Autocorrelation::setUseFft(bool,bool)\n"
    "    Autocorrelation::setUseFft(bool)\n");
  return 0;
}


SWIGINTERN PyObject *Autocorrelation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Autocorrelation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Autocorrelation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  SpectralNoiseSuppression *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralNoiseSuppression" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralNoiseSuppression" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralNoiseSuppression" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralNoiseSuppression" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (SpectralNoiseSuppression *)new SpectralNoiseSuppression(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  SpectralNoiseSuppression *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralNoiseSuppression" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralNoiseSuppression" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralNoiseSuppression" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (SpectralNoiseSuppression *)new SpectralNoiseSuppression(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  SpectralNoiseSuppression *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralNoiseSuppression" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralNoiseSuppression" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (SpectralNoiseSuppression *)new SpectralNoiseSuppression(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SpectralNoiseSuppression *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralNoiseSuppression" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (SpectralNoiseSuppression *)new SpectralNoiseSuppression(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (SpectralNoiseSuppression *)new SpectralNoiseSuppression();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralNoiseSuppression(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SpectralNoiseSuppression", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SpectralNoiseSuppression__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_SpectralNoiseSuppression__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_SpectralNoiseSuppression__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_SpectralNoiseSuppression__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_SpectralNoiseSuppression__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SpectralNoiseSuppression'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralNoiseSuppression::SpectralNoiseSuppression(int,Real,Real,Real)\n"
    "    SpectralNoiseSuppression::SpectralNoiseSuppression(int,Real,Real)\n"
    "    SpectralNoiseSuppression::SpectralNoiseSuppression(int,Real)\n"
    "    SpectralNoiseSuppression::SpectralNoiseSuppression(int)\n"
    "    SpectralNoiseSuppression::SpectralNoiseSuppression()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SpectralNoiseSuppression(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralNoiseSuppression" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setup" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_reset" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "SpectralNoiseSuppression_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_process" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_lowFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      result = ((SpectralNoiseSuppression const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setLowFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralNoiseSuppression_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setLowFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralNoiseSuppression_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralNoiseSuppression_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralNoiseSuppression_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralNoiseSuppression_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralNoiseSuppression::setLowFrequency(Real,bool)\n"
    "    SpectralNoiseSuppression::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_highFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      result = ((SpectralNoiseSuppression const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setHighFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralNoiseSuppression_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setHighFrequency" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralNoiseSuppression_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralNoiseSuppression_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralNoiseSuppression_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralNoiseSuppression_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralNoiseSuppression::setHighFrequency(Real,bool)\n"
    "    SpectralNoiseSuppression::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_sampleRate" "', argument " "1"" of type '" "SpectralNoiseSuppression const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      result = ((SpectralNoiseSuppression const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setSampleRate" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralNoiseSuppression_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setSampleRate" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralNoiseSuppression_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralNoiseSuppression_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralNoiseSuppression_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralNoiseSuppression_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralNoiseSuppression::setSampleRate(Real,bool)\n"
    "    SpectralNoiseSuppression::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_fftSize" "', argument " "1"" of type '" "SpectralNoiseSuppression const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  {
    try {
      result = (int)((SpectralNoiseSuppression const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setFftSize" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralNoiseSuppression_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralNoiseSuppression *arg1 = (SpectralNoiseSuppression *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralNoiseSuppression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralNoiseSuppression_setFftSize" "', argument " "1"" of type '" "SpectralNoiseSuppression *""'"); 
  }
  arg1 = reinterpret_cast< SpectralNoiseSuppression * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralNoiseSuppression_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralNoiseSuppression_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralNoiseSuppression_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_SpectralNoiseSuppression_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralNoiseSuppression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralNoiseSuppression_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralNoiseSuppression_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralNoiseSuppression::setFftSize(int,bool)\n"
    "    SpectralNoiseSuppression::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *SpectralNoiseSuppression_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralNoiseSuppression, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpectralNoiseSuppression_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Real arg5 ;
  int arg6 ;
  MelBands::ScaleType arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralWhitening" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralWhitening" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SpectralWhitening" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SpectralWhitening" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SpectralWhitening" "', argument " "7"" of type '" "MelBands::ScaleType""'");
  } 
  arg7 = static_cast< MelBands::ScaleType >(val7);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Real arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralWhitening" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralWhitening" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SpectralWhitening" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SpectralWhitening" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralWhitening" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralWhitening" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SpectralWhitening" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralWhitening" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpectralWhitening" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralWhitening" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralWhitening" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralWhitening" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  SpectralWhitening *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (SpectralWhitening *)new SpectralWhitening();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralWhitening(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SpectralWhitening", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SpectralWhitening__SWIG_7(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_SpectralWhitening__SWIG_6(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_SpectralWhitening__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_SpectralWhitening__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_SpectralWhitening__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              return _wrap_new_SpectralWhitening__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_SpectralWhitening__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  return _wrap_new_SpectralWhitening__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SpectralWhitening'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::SpectralWhitening(int,Real,Real,Real,Real,int,MelBands::ScaleType)\n"
    "    SpectralWhitening::SpectralWhitening(int,Real,Real,Real,Real,int)\n"
    "    SpectralWhitening::SpectralWhitening(int,Real,Real,Real,Real)\n"
    "    SpectralWhitening::SpectralWhitening(int,Real,Real,Real)\n"
    "    SpectralWhitening::SpectralWhitening(int,Real,Real)\n"
    "    SpectralWhitening::SpectralWhitening(int,Real)\n"
    "    SpectralWhitening::SpectralWhitening(int)\n"
    "    SpectralWhitening::SpectralWhitening()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SpectralWhitening(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralWhitening" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setup" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_reset" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "SpectralWhitening_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_process" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_bandCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_bandCount" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = (int)((SpectralWhitening const *)arg1)->bandCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setBandCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setBandCount" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setBandCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setBandCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setBandCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setBandCount" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setBandCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setBandCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setBandCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setBandCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_SpectralWhitening_setBandCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setBandCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setBandCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setBandCount(int,bool)\n"
    "    SpectralWhitening::setBandCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_lowFrequency" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = ((SpectralWhitening const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setLowFrequency" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setLowFrequency" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralWhitening_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setLowFrequency(Real,bool)\n"
    "    SpectralWhitening::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_highFrequency" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = ((SpectralWhitening const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setHighFrequency" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setHighFrequency" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralWhitening_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setHighFrequency(Real,bool)\n"
    "    SpectralWhitening::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_sampleRate" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = ((SpectralWhitening const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setSampleRate" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setSampleRate" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralWhitening_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setSampleRate(Real,bool)\n"
    "    SpectralWhitening::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_fftSize" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = (int)((SpectralWhitening const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setFftSize" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setFftSize" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_SpectralWhitening_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setFftSize(int,bool)\n"
    "    SpectralWhitening::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_scaleType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MelBands::ScaleType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_scaleType" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = (MelBands::ScaleType)((SpectralWhitening const *)arg1)->scaleType();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setScaleType__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  MelBands::ScaleType arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setScaleType" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setScaleType" "', argument " "2"" of type '" "MelBands::ScaleType""'");
  } 
  arg2 = static_cast< MelBands::ScaleType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setScaleType" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setScaleType(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setScaleType__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  MelBands::ScaleType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setScaleType" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setScaleType" "', argument " "2"" of type '" "MelBands::ScaleType""'");
  } 
  arg2 = static_cast< MelBands::ScaleType >(val2);
  {
    try {
      (arg1)->setScaleType(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setScaleType(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setScaleType", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_SpectralWhitening_setScaleType__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setScaleType__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setScaleType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setScaleType(MelBands::ScaleType,bool)\n"
    "    SpectralWhitening::setScaleType(MelBands::ScaleType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_compressionFactor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_compressionFactor" "', argument " "1"" of type '" "SpectralWhitening const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  {
    try {
      result = ((SpectralWhitening const *)arg1)->compressionFactor();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setCompressionFactor__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setCompressionFactor" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setCompressionFactor" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralWhitening_setCompressionFactor" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setCompressionFactor(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setCompressionFactor__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralWhitening *arg1 = (SpectralWhitening *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralWhitening, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralWhitening_setCompressionFactor" "', argument " "1"" of type '" "SpectralWhitening *""'"); 
  }
  arg1 = reinterpret_cast< SpectralWhitening * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralWhitening_setCompressionFactor" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setCompressionFactor(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralWhitening_setCompressionFactor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralWhitening_setCompressionFactor", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_SpectralWhitening_setCompressionFactor__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralWhitening, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralWhitening_setCompressionFactor__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralWhitening_setCompressionFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralWhitening::setCompressionFactor(Real,bool)\n"
    "    SpectralWhitening::setCompressionFactor(Real)\n");
  return 0;
}


SWIGINTERN PyObject *SpectralWhitening_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralWhitening, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpectralWhitening_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SpectralODF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  SpectralODF::ODFMethod arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SpectralODF *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralODF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralODF" "', argument " "2"" of type '" "SpectralODF::ODFMethod""'");
  } 
  arg2 = static_cast< SpectralODF::ODFMethod >(val2);
  {
    try {
      result = (SpectralODF *)new SpectralODF(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralODF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralODF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SpectralODF *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpectralODF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (SpectralODF *)new SpectralODF(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralODF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralODF__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  SpectralODF *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (SpectralODF *)new SpectralODF();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralODF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpectralODF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SpectralODF", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SpectralODF__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_SpectralODF__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_SpectralODF__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SpectralODF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralODF::SpectralODF(int,SpectralODF::ODFMethod)\n"
    "    SpectralODF::SpectralODF(int)\n"
    "    SpectralODF::SpectralODF()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SpectralODF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralODF" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_setup" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_reset" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXC temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "SpectralODF_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_process" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_odfMethod(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SpectralODF::ODFMethod result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_odfMethod" "', argument " "1"" of type '" "SpectralODF const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  {
    try {
      result = (SpectralODF::ODFMethod)((SpectralODF const *)arg1)->odfMethod();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_setOdfMethod__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  SpectralODF::ODFMethod arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_setOdfMethod" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralODF_setOdfMethod" "', argument " "2"" of type '" "SpectralODF::ODFMethod""'");
  } 
  arg2 = static_cast< SpectralODF::ODFMethod >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpectralODF_setOdfMethod" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setOdfMethod(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_setOdfMethod__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SpectralODF *arg1 = (SpectralODF *) 0 ;
  SpectralODF::ODFMethod arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpectralODF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralODF_setOdfMethod" "', argument " "1"" of type '" "SpectralODF *""'"); 
  }
  arg1 = reinterpret_cast< SpectralODF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralODF_setOdfMethod" "', argument " "2"" of type '" "SpectralODF::ODFMethod""'");
  } 
  arg2 = static_cast< SpectralODF::ODFMethod >(val2);
  {
    try {
      (arg1)->setOdfMethod(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralODF_setOdfMethod(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SpectralODF_setOdfMethod", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralODF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_SpectralODF_setOdfMethod__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SpectralODF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_SpectralODF_setOdfMethod__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SpectralODF_setOdfMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpectralODF::setOdfMethod(SpectralODF::ODFMethod,bool)\n"
    "    SpectralODF::setOdfMethod(SpectralODF::ODFMethod)\n");
  return 0;
}


SWIGINTERN PyObject *SpectralODF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralODF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpectralODF_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PitchSaliency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Real arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PitchSaliency *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchSaliency" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchSaliency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchSaliency" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchSaliency" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchSaliency" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PitchSaliency" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (PitchSaliency *)new PitchSaliency(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchSaliency, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchSaliency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  Real arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PitchSaliency *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchSaliency" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchSaliency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchSaliency" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchSaliency" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchSaliency" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  {
    try {
      result = (PitchSaliency *)new PitchSaliency(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchSaliency, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchSaliency__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PitchSaliency *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchSaliency" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchSaliency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchSaliency" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchSaliency" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (PitchSaliency *)new PitchSaliency(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchSaliency, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchSaliency__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PitchSaliency *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchSaliency" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchSaliency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchSaliency" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (PitchSaliency *)new PitchSaliency(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchSaliency, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchSaliency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PitchSaliency", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_PitchSaliency__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_PitchSaliency__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              return _wrap_new_PitchSaliency__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_PitchSaliency__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PitchSaliency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchSaliency::PitchSaliency(int,Real,Real,Real,Real,int)\n"
    "    PitchSaliency::PitchSaliency(int,Real,Real,Real,Real)\n"
    "    PitchSaliency::PitchSaliency(int,Real,Real,Real)\n"
    "    PitchSaliency::PitchSaliency(int,Real,Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PitchSaliency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchSaliency *arg1 = (PitchSaliency *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchSaliency, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PitchSaliency" "', argument " "1"" of type '" "PitchSaliency *""'"); 
  }
  arg1 = reinterpret_cast< PitchSaliency * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchSaliency_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchSaliency *arg1 = (PitchSaliency *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchSaliency, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchSaliency_setup" "', argument " "1"" of type '" "PitchSaliency *""'"); 
  }
  arg1 = reinterpret_cast< PitchSaliency * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchSaliency_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchSaliency *arg1 = (PitchSaliency *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PitchSaliency_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchSaliency, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchSaliency_process" "', argument " "1"" of type '" "PitchSaliency *""'"); 
  }
  arg1 = reinterpret_cast< PitchSaliency * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchSaliency_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchSaliency *arg1 = (PitchSaliency *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchSaliency, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchSaliency_reset" "', argument " "1"" of type '" "PitchSaliency *""'"); 
  }
  arg1 = reinterpret_cast< PitchSaliency * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PitchSaliency_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PitchSaliency, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PitchSaliency_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PitchACF__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PitchACF *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchACF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchACF" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchACF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchACF" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (PitchACF *)new PitchACF(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchACF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchACF__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PitchACF *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchACF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchACF" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchACF" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (PitchACF *)new PitchACF(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchACF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchACF__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PitchACF *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchACF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchACF" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (PitchACF *)new PitchACF(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchACF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchACF__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PitchACF *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchACF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PitchACF *)new PitchACF(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchACF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchACF__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PitchACF *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (PitchACF *)new PitchACF();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchACF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchACF(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PitchACF", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PitchACF__SWIG_4(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PitchACF__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_PitchACF__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_PitchACF__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_PitchACF__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PitchACF'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchACF::PitchACF(int,Real,int,int)\n"
    "    PitchACF::PitchACF(int,Real,int)\n"
    "    PitchACF::PitchACF(int,Real)\n"
    "    PitchACF::PitchACF(int)\n"
    "    PitchACF::PitchACF()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PitchACF(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PitchACF" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setup" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_reset" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PitchACF_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_process" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_fftSize" "', argument " "1"" of type '" "PitchACF const *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      result = (int)((PitchACF const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setFftSize" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchACF_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setFftSize" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchACF_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchACF_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchACF_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchACF_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchACF::setFftSize(int,bool)\n"
    "    PitchACF::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchACF_minimumPeakWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_minimumPeakWidth" "', argument " "1"" of type '" "PitchACF const *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      result = (int)((PitchACF const *)arg1)->minimumPeakWidth();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setMinimumPeakWidth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setMinimumPeakWidth" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchACF_setMinimumPeakWidth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setMinimumPeakWidth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setMinimumPeakWidth" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setMinimumPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMinimumPeakWidth(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setMinimumPeakWidth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchACF_setMinimumPeakWidth", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchACF_setMinimumPeakWidth__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchACF_setMinimumPeakWidth__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchACF_setMinimumPeakWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchACF::setMinimumPeakWidth(int,bool)\n"
    "    PitchACF::setMinimumPeakWidth(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchACF_peakCandidateCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_peakCandidateCount" "', argument " "1"" of type '" "PitchACF const *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      result = (int)((PitchACF const *)arg1)->peakCandidateCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setPeakCandidateCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setPeakCandidateCount" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setPeakCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchACF_setPeakCandidateCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPeakCandidateCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setPeakCandidateCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setPeakCandidateCount" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setPeakCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPeakCandidateCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setPeakCandidateCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchACF_setPeakCandidateCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchACF_setPeakCandidateCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchACF_setPeakCandidateCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchACF_setPeakCandidateCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchACF::setPeakCandidateCount(int,bool)\n"
    "    PitchACF::setPeakCandidateCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchACF_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_sampleRate" "', argument " "1"" of type '" "PitchACF const *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  {
    try {
      result = ((PitchACF const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setSampleRate" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchACF_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchACF *arg1 = (PitchACF *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchACF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchACF_setSampleRate" "', argument " "1"" of type '" "PitchACF *""'"); 
  }
  arg1 = reinterpret_cast< PitchACF * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchACF_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchACF_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchACF_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PitchACF_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchACF, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchACF_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchACF_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchACF::setSampleRate(Real,bool)\n"
    "    PitchACF::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *PitchACF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PitchACF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PitchACF_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  Real arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchInverseProblem" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchInverseProblem" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PitchInverseProblem" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_PitchInverseProblem" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_float(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_PitchInverseProblem" "', argument " "8"" of type '" "Real""'");
  } 
  arg8 = static_cast< Real >(val8);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchInverseProblem" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchInverseProblem" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PitchInverseProblem" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_PitchInverseProblem" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchInverseProblem" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchInverseProblem" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PitchInverseProblem" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchInverseProblem" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PitchInverseProblem" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  Real arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PitchInverseProblem" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PitchInverseProblem" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_6(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PitchInverseProblem" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_7(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PitchInverseProblem" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem__SWIG_8(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PitchInverseProblem *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (PitchInverseProblem *)new PitchInverseProblem();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PitchInverseProblem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PitchInverseProblem", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PitchInverseProblem__SWIG_8(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_PitchInverseProblem__SWIG_7(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_new_PitchInverseProblem__SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_PitchInverseProblem__SWIG_5(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            return _wrap_new_PitchInverseProblem__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_PitchInverseProblem__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                return _wrap_new_PitchInverseProblem__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  return _wrap_new_PitchInverseProblem__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
            
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              {
                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
              }
              if (_v) {
                {
                  _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  {
                    _v = (PyFloat_Check(argv[7]) || PyInt_Check(argv[7]) || PyLong_Check(argv[7])) ? 1 : 0;
                    
                  }
                  if (_v) {
                    return _wrap_new_PitchInverseProblem__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PitchInverseProblem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real,Real,int,int,int,Real)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real,Real,int,int,int)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real,Real,int,int)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real,Real,int)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real,Real)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real,Real)\n"
    "    PitchInverseProblem::PitchInverseProblem(int,Real)\n"
    "    PitchInverseProblem::PitchInverseProblem(int)\n"
    "    PitchInverseProblem::PitchInverseProblem()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PitchInverseProblem(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PitchInverseProblem" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_reset" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setup" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "PitchInverseProblem_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_process" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_projectionMatrix(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_projectionMatrix" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      ((PitchInverseProblem const *)arg1)->projectionMatrix(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_lowFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_lowFrequency" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = ((PitchInverseProblem const *)arg1)->lowFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setLowFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setLowFrequency" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setLowFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setLowFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setLowFrequency" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setLowFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setLowFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setLowFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setLowFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setLowFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setLowFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setLowFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setLowFrequency(Real,bool)\n"
    "    PitchInverseProblem::setLowFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_highFrequency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_highFrequency" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = ((PitchInverseProblem const *)arg1)->highFrequency();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHighFrequency__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setHighFrequency" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setHighFrequency" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighFrequency(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHighFrequency__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setHighFrequency" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setHighFrequency" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setHighFrequency(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHighFrequency(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setHighFrequency", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setHighFrequency__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setHighFrequency__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setHighFrequency'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setHighFrequency(Real,bool)\n"
    "    PitchInverseProblem::setHighFrequency(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_sampleRate" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = ((PitchInverseProblem const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setSampleRate" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setSampleRate" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setSampleRate(Real,bool)\n"
    "    PitchInverseProblem::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_fftSize" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = (int)((PitchInverseProblem const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setFftSize" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setFftSize" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setFftSize(int,bool)\n"
    "    PitchInverseProblem::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_frequencyCandidateCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_frequencyCandidateCount" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = (int)((PitchInverseProblem const *)arg1)->frequencyCandidateCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFrequencyCandidateCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setFrequencyCandidateCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setFrequencyCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setFrequencyCandidateCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFrequencyCandidateCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFrequencyCandidateCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setFrequencyCandidateCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setFrequencyCandidateCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFrequencyCandidateCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setFrequencyCandidateCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setFrequencyCandidateCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setFrequencyCandidateCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setFrequencyCandidateCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setFrequencyCandidateCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setFrequencyCandidateCount(int,bool)\n"
    "    PitchInverseProblem::setFrequencyCandidateCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_peakWidth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_peakWidth" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = (int)((PitchInverseProblem const *)arg1)->peakWidth();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPeakWidth__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setPeakWidth" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setPeakWidth" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPeakWidth(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPeakWidth__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setPeakWidth" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setPeakWidth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPeakWidth(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPeakWidth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setPeakWidth", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setPeakWidth__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setPeakWidth__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setPeakWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setPeakWidth(int,bool)\n"
    "    PitchInverseProblem::setPeakWidth(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_pitchCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_pitchCount" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = (int)((PitchInverseProblem const *)arg1)->pitchCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPitchCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setPitchCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setPitchCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setPitchCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setPitchCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPitchCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setPitchCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setPitchCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setPitchCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setPitchCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setPitchCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setPitchCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setPitchCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setPitchCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setPitchCount(int,bool)\n"
    "    PitchInverseProblem::setPitchCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_harmonicCount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_harmonicCount" "', argument " "1"" of type '" "PitchInverseProblem const *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  {
    try {
      result = (int)((PitchInverseProblem const *)arg1)->harmonicCount();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHarmonicCount__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setHarmonicCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setHarmonicCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PitchInverseProblem_setHarmonicCount" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHarmonicCount(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHarmonicCount__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PitchInverseProblem *arg1 = (PitchInverseProblem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_PitchInverseProblem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PitchInverseProblem_setHarmonicCount" "', argument " "1"" of type '" "PitchInverseProblem *""'"); 
  }
  arg1 = reinterpret_cast< PitchInverseProblem * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PitchInverseProblem_setHarmonicCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setHarmonicCount(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PitchInverseProblem_setHarmonicCount(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PitchInverseProblem_setHarmonicCount", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_PitchInverseProblem_setHarmonicCount__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_PitchInverseProblem, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_PitchInverseProblem_setHarmonicCount__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PitchInverseProblem_setHarmonicCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PitchInverseProblem::setHarmonicCount(int,bool)\n"
    "    PitchInverseProblem::setHarmonicCount(int)\n");
  return 0;
}


SWIGINTERN PyObject *PitchInverseProblem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PitchInverseProblem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PitchInverseProblem_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoiceActivityDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VoiceActivityDetection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VoiceActivityDetection" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VoiceActivityDetection" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VoiceActivityDetection" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoiceActivityDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VoiceActivityDetection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VoiceActivityDetection" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VoiceActivityDetection" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Real arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoiceActivityDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VoiceActivityDetection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VoiceActivityDetection" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoiceActivityDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VoiceActivityDetection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoiceActivityDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (VoiceActivityDetection *)new VoiceActivityDetection();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoiceActivityDetection(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VoiceActivityDetection", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VoiceActivityDetection__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_VoiceActivityDetection__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_VoiceActivityDetection__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_new_VoiceActivityDetection__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_VoiceActivityDetection__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_new_VoiceActivityDetection__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VoiceActivityDetection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::VoiceActivityDetection(int,int,Real,int,int)\n"
    "    VoiceActivityDetection::VoiceActivityDetection(int,int,Real,int)\n"
    "    VoiceActivityDetection::VoiceActivityDetection(int,int,Real)\n"
    "    VoiceActivityDetection::VoiceActivityDetection(int,int)\n"
    "    VoiceActivityDetection::VoiceActivityDetection(int)\n"
    "    VoiceActivityDetection::VoiceActivityDetection()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VoiceActivityDetection(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VoiceActivityDetection" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_process" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setup" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_reset" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_lowBand(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_lowBand" "', argument " "1"" of type '" "VoiceActivityDetection const *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      result = (int)((VoiceActivityDetection const *)arg1)->lowBand();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setLowBand__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setLowBand" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setLowBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoiceActivityDetection_setLowBand" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setLowBand(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setLowBand__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setLowBand" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setLowBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setLowBand(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setLowBand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_setLowBand", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_VoiceActivityDetection_setLowBand__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_VoiceActivityDetection_setLowBand__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VoiceActivityDetection_setLowBand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::setLowBand(int,bool)\n"
    "    VoiceActivityDetection::setLowBand(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_highBand(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_highBand" "', argument " "1"" of type '" "VoiceActivityDetection const *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      result = (int)((VoiceActivityDetection const *)arg1)->highBand();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setHighBand__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setHighBand" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setHighBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoiceActivityDetection_setHighBand" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setHighBand(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setHighBand__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setHighBand" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setHighBand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setHighBand(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setHighBand(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_setHighBand", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_VoiceActivityDetection_setHighBand__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_VoiceActivityDetection_setHighBand__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VoiceActivityDetection_setHighBand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::setHighBand(int,bool)\n"
    "    VoiceActivityDetection::setHighBand(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_sampleRate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_sampleRate" "', argument " "1"" of type '" "VoiceActivityDetection const *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      result = ((VoiceActivityDetection const *)arg1)->sampleRate();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setSampleRate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  Real arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setSampleRate" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoiceActivityDetection_setSampleRate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setSampleRate(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setSampleRate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setSampleRate" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setSampleRate" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      (arg1)->setSampleRate(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setSampleRate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_setSampleRate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_VoiceActivityDetection_setSampleRate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_VoiceActivityDetection_setSampleRate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VoiceActivityDetection_setSampleRate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::setSampleRate(Real,bool)\n"
    "    VoiceActivityDetection::setSampleRate(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_memorySize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_memorySize" "', argument " "1"" of type '" "VoiceActivityDetection const *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      result = (int)((VoiceActivityDetection const *)arg1)->memorySize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setMemorySize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setMemorySize" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setMemorySize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoiceActivityDetection_setMemorySize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setMemorySize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setMemorySize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setMemorySize" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setMemorySize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setMemorySize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setMemorySize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_setMemorySize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_VoiceActivityDetection_setMemorySize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_VoiceActivityDetection_setMemorySize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VoiceActivityDetection_setMemorySize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::setMemorySize(int,bool)\n"
    "    VoiceActivityDetection::setMemorySize(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_fftSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_fftSize" "', argument " "1"" of type '" "VoiceActivityDetection const *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  {
    try {
      result = (int)((VoiceActivityDetection const *)arg1)->fftSize();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setFftSize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setFftSize" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VoiceActivityDetection_setFftSize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->setFftSize(arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setFftSize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  VoiceActivityDetection *arg1 = (VoiceActivityDetection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VoiceActivityDetection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoiceActivityDetection_setFftSize" "', argument " "1"" of type '" "VoiceActivityDetection *""'"); 
  }
  arg1 = reinterpret_cast< VoiceActivityDetection * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VoiceActivityDetection_setFftSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setFftSize(arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoiceActivityDetection_setFftSize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "VoiceActivityDetection_setFftSize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_VoiceActivityDetection_setFftSize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VoiceActivityDetection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_VoiceActivityDetection_setFftSize__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'VoiceActivityDetection_setFftSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VoiceActivityDetection::setFftSize(int,bool)\n"
    "    VoiceActivityDetection::setFftSize(int)\n");
  return 0;
}


SWIGINTERN PyObject *VoiceActivityDetection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VoiceActivityDetection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VoiceActivityDetection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_OnsetComplex__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Window::WindowType arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  OnsetComplex *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OnsetComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OnsetComplex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OnsetComplex" "', argument " "3"" of type '" "Window::WindowType""'");
  } 
  arg3 = static_cast< Window::WindowType >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_OnsetComplex" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (OnsetComplex *)new OnsetComplex(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OnsetComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnsetComplex__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Window::WindowType arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  OnsetComplex *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OnsetComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OnsetComplex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OnsetComplex" "', argument " "3"" of type '" "Window::WindowType""'");
  } 
  arg3 = static_cast< Window::WindowType >(val3);
  {
    try {
      result = (OnsetComplex *)new OnsetComplex(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OnsetComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnsetComplex__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OnsetComplex *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OnsetComplex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OnsetComplex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (OnsetComplex *)new OnsetComplex(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OnsetComplex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnsetComplex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_OnsetComplex", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_OnsetComplex__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_new_OnsetComplex__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_new_OnsetComplex__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_OnsetComplex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OnsetComplex::OnsetComplex(int,int,Window::WindowType,bool)\n"
    "    OnsetComplex::OnsetComplex(int,int,Window::WindowType)\n"
    "    OnsetComplex::OnsetComplex(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_OnsetComplex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  OnsetComplex *arg1 = (OnsetComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_OnsetComplex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OnsetComplex" "', argument " "1"" of type '" "OnsetComplex *""'"); 
  }
  arg1 = reinterpret_cast< OnsetComplex * >(argp1);
  {
    try {
      delete arg1;
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OnsetComplex_setup(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  OnsetComplex *arg1 = (OnsetComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_OnsetComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnsetComplex_setup" "', argument " "1"" of type '" "OnsetComplex *""'"); 
  }
  arg1 = reinterpret_cast< OnsetComplex * >(argp1);
  {
    try {
      (arg1)->setup();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OnsetComplex_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  OnsetComplex *arg1 = (OnsetComplex *) 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "OnsetComplex_process", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_OnsetComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnsetComplex_process" "', argument " "1"" of type '" "OnsetComplex *""'"); 
  }
  arg1 = reinterpret_cast< OnsetComplex * >(argp1);
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      (arg1)->process((MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OnsetComplex_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  OnsetComplex *arg1 = (OnsetComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_OnsetComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OnsetComplex_reset" "', argument " "1"" of type '" "OnsetComplex *""'"); 
  }
  arg1 = reinterpret_cast< OnsetComplex * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OnsetComplex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OnsetComplex, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *OnsetComplex_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_linearToMelGreenwood1990(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "linearToMelGreenwood1990" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = linearToMelGreenwood1990(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearGreenwood1990(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "melToLinearGreenwood1990" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = melToLinearGreenwood1990(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearToMelMatrixGreenwood1990(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      linearToMelMatrixGreenwood1990((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearMatrixGreenwood1990(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      melToLinearMatrixGreenwood1990((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearToMelStevens1937(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "linearToMelStevens1937" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = linearToMelStevens1937(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearStevens1937(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "melToLinearStevens1937" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = melToLinearStevens1937(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearToMelMatrixStevens1937(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      linearToMelMatrixStevens1937((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearMatrixStevens1937(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      melToLinearMatrixStevens1937((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearToMelFant1968(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "linearToMelFant1968" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = linearToMelFant1968(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearFant1968(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  Real result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "melToLinearFant1968" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = melToLinearFant1968(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearToMelMatrixFant1968(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      linearToMelMatrixFant1968((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_melToLinearMatrixFant1968(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      melToLinearMatrixFant1968((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_roots(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXC *arg2 = (MatrixXC *) 0 ;
  MatrixXR temp1 ;
  MatrixXC temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      roots((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poly(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      poly((MatrixXC const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_convolve__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      convolve((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_convolve__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      convolve((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_convolve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "convolve", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        return _wrap_convolve__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_convolve__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'convolve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    convolve(MatrixXC const &,MatrixXC const &,MatrixXC *)\n"
    "    convolve(MatrixXR const &,MatrixXR const &,MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  int arg4 ;
  int arg5 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "correlate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "correlate" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      correlate((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  int arg4 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "correlate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      correlate((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      correlate((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  int arg4 ;
  int arg5 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "correlate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "correlate" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      correlate((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  int arg4 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "correlate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      correlate((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      correlate((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_correlate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "correlate", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        return _wrap_correlate__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_correlate__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_correlate__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_correlate__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_CFLOAT) || (array_type(argv[1]) == PyArray_CDOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_correlate__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_correlate__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'correlate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    correlate(MatrixXC const &,MatrixXC const &,MatrixXC *,int,int)\n"
    "    correlate(MatrixXC const &,MatrixXC const &,MatrixXC *,int)\n"
    "    correlate(MatrixXC const &,MatrixXC const &,MatrixXC *)\n"
    "    correlate(MatrixXR const &,MatrixXR const &,MatrixXR *,int,int)\n"
    "    correlate(MatrixXR const &,MatrixXR const &,MatrixXR *,int)\n"
    "    correlate(MatrixXR const &,MatrixXR const &,MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  int arg3 ;
  int arg4 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "autocorrelate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "autocorrelate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      autocorrelate((MatrixXR const &)*arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  int arg3 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "autocorrelate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      autocorrelate((MatrixXR const &)*arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      autocorrelate((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = (MatrixXC *) 0 ;
  int arg3 ;
  int arg4 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "autocorrelate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "autocorrelate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      autocorrelate((MatrixXC const &)*arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = (MatrixXC *) 0 ;
  int arg3 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "autocorrelate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      autocorrelate((MatrixXC const &)*arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    try {
      autocorrelate((MatrixXC const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_autocorrelate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "autocorrelate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      return _wrap_autocorrelate__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      return _wrap_autocorrelate__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_autocorrelate__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_autocorrelate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_autocorrelate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_CFLOAT) || (array_type(argv[0]) == PyArray_CDOUBLE);
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_autocorrelate__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'autocorrelate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    autocorrelate(MatrixXR const &,MatrixXR *,int,int)\n"
    "    autocorrelate(MatrixXR const &,MatrixXR *,int)\n"
    "    autocorrelate(MatrixXR const &,MatrixXR *)\n"
    "    autocorrelate(MatrixXC const &,MatrixXC *,int,int)\n"
    "    autocorrelate(MatrixXC const &,MatrixXC *,int)\n"
    "    autocorrelate(MatrixXC const &,MatrixXC *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_reverseCols__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  
  {
    arg1 = &temp1;
    
  }
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      reverseCols(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reverseCols__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  
  {
    arg1 = &temp1;
    
  }
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      reverseCols(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reverseCols(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "reverseCols", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_reverseCols__SWIG_0(self, argc, argv);
  }
  if (argc == 0) {
    return _wrap_reverseCols__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'reverseCols'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    reverseCols(MatrixXC *)\n"
    "    reverseCols(MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_rowCumsum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  
  {
    arg1 = &temp1;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "rowCumsum", 0, 0, 0)) SWIG_fail;
  {
    try {
      rowCumsum(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_colCumsum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  
  {
    arg1 = &temp1;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "colCumsum", 0, 0, 0)) SWIG_fail;
  {
    try {
      colCumsum(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rowShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = (MatrixXR *) 0 ;
  int arg2 ;
  MatrixXR temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  
  {
    arg1 = &temp1;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rowShift" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      rowShift(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_colShift(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = (MatrixXR *) 0 ;
  int arg2 ;
  MatrixXR temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  
  {
    arg1 = &temp1;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "colShift" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      colShift(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg1->rows(), arg1->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg1);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  
  {
    arg4 = &temp4;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      range(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXC temp5 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "range" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      range(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MatrixXR temp4 ;
  
  {
    arg4 = &temp4;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      range(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "range" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      range(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_4(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  MatrixXI *arg4 = (MatrixXI *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MatrixXI temp4 ;
  
  {
    arg4 = &temp4;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      range(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_INT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Integer* out_data = (Integer*)array_data(out_array);
    Eigen::Map<MatrixXIscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range__SWIG_5(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXI *arg5 = (MatrixXI *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXI temp5 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "range" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "range" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "range" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "range" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      range(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_INT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Integer* out_data = (Integer*)array_data(out_array);
    Eigen::Map<MatrixXIscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_range(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "range", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_range__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_range__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          return _wrap_range__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_range__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_range__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_range__SWIG_5(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    range(Real,Real,int,MatrixXC *)\n"
    "    range(Real,Real,int,int,MatrixXC *)\n"
    "    range(Real,Real,int,MatrixXR *)\n"
    "    range(Real,Real,int,int,MatrixXR *)\n"
    "    range(Real,Real,int,MatrixXI *)\n"
    "    range(Real,Real,int,int,MatrixXI *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_polar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "polar", 2, 2, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      polar((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_combination(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "combination", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "combination" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "combination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)combination(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_asinc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Real result;
  
  if (!SWIG_Python_UnpackTuple(args, "asinc", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "asinc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "asinc" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  {
    try {
      result = asinc(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raisedCosTransform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  Real arg5 ;
  Real arg6 ;
  MatrixXR *arg7 = (MatrixXR *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  MatrixXR temp7 ;
  int temp8 ;
  int temp9 ;
  int val10 ;
  int ecode10 = 0 ;
  
  {
    arg7 = &temp7;
    
  }
  {
    arg8 = &temp8;
    
  }
  {
    arg9 = &temp9;
    
  }
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "raisedCosTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raisedCosTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raisedCosTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "raisedCosTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "raisedCosTransform" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "raisedCosTransform" "', argument " "6"" of type '" "Real""'");
  } 
  arg6 = static_cast< Real >(val6);
  ecode10 = SWIG_AsVal_int(swig_obj[6], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "raisedCosTransform" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      raisedCosTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg7->rows(), arg7->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg7);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg8));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg9));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raisedCosTransform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  Real arg5 ;
  Real arg6 ;
  MatrixXR *arg7 = (MatrixXR *) 0 ;
  int arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  MatrixXR temp7 ;
  int val8 ;
  int ecode8 = 0 ;
  
  {
    arg7 = &temp7;
    
  }
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "raisedCosTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "raisedCosTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "raisedCosTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "raisedCosTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "raisedCosTransform" "', argument " "5"" of type '" "Real""'");
  } 
  arg5 = static_cast< Real >(val5);
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "raisedCosTransform" "', argument " "6"" of type '" "Real""'");
  } 
  arg6 = static_cast< Real >(val6);
  ecode8 = SWIG_AsVal_int(swig_obj[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "raisedCosTransform" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      raisedCosTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg7->rows(), arg7->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg7);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_raisedCosTransform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "raisedCosTransform", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                
              }
              if (_v) {
                {
                  _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  return _wrap_raisedCosTransform__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
              
            }
            if (_v) {
              {
                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                
              }
              if (_v) {
                {
                  _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                }
                if (_v) {
                  return _wrap_raisedCosTransform__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'raisedCosTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    raisedCosTransform(Real,Real,int,int,Real,Real,MatrixXR *,int *,int *,int)\n"
    "    raisedCosTransform(Real,Real,int,int,Real,Real,MatrixXR *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hannTransform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hannTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hannTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hannTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hannTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "hannTransform" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      hannTransform(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hannTransform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hannTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hannTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hannTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hannTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      hannTransform(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hannTransform__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int temp6 ;
  int temp7 ;
  int val8 ;
  int ecode8 = 0 ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  {
    arg7 = &temp7;
    
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hannTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hannTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hannTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hannTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode8 = SWIG_AsVal_int(swig_obj[4], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "hannTransform" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      hannTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg6));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg7));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hannTransform__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int temp6 ;
  int temp7 ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  {
    arg7 = &temp7;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hannTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hannTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hannTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hannTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      hannTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg6));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg7));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hannTransform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hannTransform", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_hannTransform__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_hannTransform__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_hannTransform__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_hannTransform__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hannTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hannTransform(Real,Real,int,int,MatrixXR *,int)\n"
    "    hannTransform(Real,Real,int,int,MatrixXR *)\n"
    "    hannTransform(Real,Real,int,int,MatrixXR *,int *,int *,int)\n"
    "    hannTransform(Real,Real,int,int,MatrixXR *,int *,int *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hammingTransform__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hammingTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hammingTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hammingTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hammingTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "hammingTransform" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      hammingTransform(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hammingTransform__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  
  {
    arg5 = &temp5;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hammingTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hammingTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hammingTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hammingTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      hammingTransform(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hammingTransform__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int temp6 ;
  int temp7 ;
  int val8 ;
  int ecode8 = 0 ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  {
    arg7 = &temp7;
    
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hammingTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hammingTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hammingTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hammingTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode8 = SWIG_AsVal_int(swig_obj[4], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "hammingTransform" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      hammingTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg6));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg7));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hammingTransform__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  int arg3 ;
  int arg4 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  MatrixXR temp5 ;
  int temp6 ;
  int temp7 ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  {
    arg7 = &temp7;
    
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hammingTransform" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hammingTransform" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hammingTransform" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hammingTransform" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      hammingTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg6));
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("i", *arg7));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hammingTransform(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "hammingTransform", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_hammingTransform__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            return _wrap_hammingTransform__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_hammingTransform__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
        }
        if (_v) {
          {
            _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
          }
          if (_v) {
            {
              _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
            }
            if (_v) {
              return _wrap_hammingTransform__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'hammingTransform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hammingTransform(Real,Real,int,int,MatrixXR *,int)\n"
    "    hammingTransform(Real,Real,int,int,MatrixXR *)\n"
    "    hammingTransform(Real,Real,int,int,MatrixXR *,int *,int *,int)\n"
    "    hammingTransform(Real,Real,int,int,MatrixXR *,int *,int *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dbToMag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      dbToMag((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_magToDb__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  Real arg3 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "magToDb" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      magToDb((MatrixXR const &)*arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_magToDb__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      magToDb((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_magToDb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "magToDb", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      return _wrap_magToDb__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_magToDb__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'magToDb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    magToDb(MatrixXR const &,MatrixXR *,Real)\n"
    "    magToDb(MatrixXR const &,MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_unwrap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      unwrap((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_freqz__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXR *arg3 = 0 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXR temp3 ;
  MatrixXC temp4 ;
  
  {
    arg4 = &temp4;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[2], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg3 = &temp3;
    
    // prepare the input array
    switch( array_type(swig_obj[2]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg3) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg3) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      freqz((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,(MatrixXR const &)*arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_freqz__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  
  {
    arg3 = &temp3;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      freqz((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_freqz(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "freqz", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        return _wrap_freqz__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (array_type(argv[2]) == PyArray_FLOAT) || (array_type(argv[2]) == PyArray_DOUBLE);
        }
        if (_v) {
          return _wrap_freqz__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'freqz'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freqz(MatrixXR const &,MatrixXR const &,MatrixXR const &,MatrixXC *)\n"
    "    freqz(MatrixXR const &,MatrixXR const &,MatrixXC *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_derivate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &temp2;
    
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      derivate((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nextPowerOf2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  int arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nextPowerOf2" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nextPowerOf2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)nextPowerOf2(arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nextPowerOf2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nextPowerOf2" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    try {
      result = (int)nextPowerOf2(arg1);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nextPowerOf2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nextPowerOf2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      return _wrap_nextPowerOf2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
      }
      if (_v) {
        return _wrap_nextPowerOf2__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'nextPowerOf2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nextPowerOf2(Real,int)\n"
    "    nextPowerOf2(Real)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gaussian__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  Real arg2 ;
  Real arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  Real result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gaussian" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gaussian" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gaussian" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      result = gaussian(arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Real arg1 ;
  MatrixXR arg2 ;
  MatrixXR arg3 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  MatrixXR temp4 ;
  
  {
    arg4 = &temp4;
    
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gaussian" "', argument " "1"" of type '" "Real""'");
  } 
  arg1 = static_cast< Real >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MatrixXR,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gaussian" "', argument " "2"" of type '" "MatrixXR""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gaussian" "', argument " "2"" of type '" "MatrixXR""'");
    } else {
      MatrixXR * temp = reinterpret_cast< MatrixXR * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_MatrixXR,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gaussian" "', argument " "3"" of type '" "MatrixXR""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gaussian" "', argument " "3"" of type '" "MatrixXR""'");
    } else {
      MatrixXR * temp = reinterpret_cast< MatrixXR * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      gaussian(arg1,arg2,arg3,arg4);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "gaussian", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        {
          _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
          
        }
        if (_v) {
          return _wrap_gaussian__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
      
    }
    if (_v) {
      {
        _v = (array_type(argv[1]) == PyArray_FLOAT) || (array_type(argv[1]) == PyArray_DOUBLE);
      }
      if (_v) {
        {
          _v = (array_type(argv[2]) == PyArray_FLOAT) || (array_type(argv[2]) == PyArray_DOUBLE);
        }
        if (_v) {
          return _wrap_gaussian__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'gaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gaussian(Real,Real,Real)\n"
    "    gaussian(Real,MatrixXR,MatrixXR,MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pseudoInverse__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  Real arg3 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pseudoInverse" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      pseudoInverse((MatrixXR const &)*arg1,arg2,arg3);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pseudoInverse__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = (MatrixXR *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  
  {
    arg2 = &temp2;
    
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      pseudoInverse((MatrixXR const &)*arg1,arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg2->rows(), arg2->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg2);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pseudoInverse(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "pseudoInverse", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      return _wrap_pseudoInverse__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = (array_type(argv[0]) == PyArray_FLOAT) || (array_type(argv[0]) == PyArray_DOUBLE);
    }
    if (_v) {
      {
        _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
        
      }
      if (_v) {
        return _wrap_pseudoInverse__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'pseudoInverse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    pseudoInverse(MatrixXR const &,MatrixXR *,Real)\n"
    "    pseudoInverse(MatrixXR const &,MatrixXR *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_chebyshev1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  Real *arg6 = (Real *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  MatrixXC temp5 ;
  Real temp6 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "chebyshev1", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "chebyshev1" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "chebyshev1" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "chebyshev1" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      chebyshev1(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("f", *arg6));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chebyshev2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Real arg2 ;
  int arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  Real *arg6 = (Real *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  MatrixXC temp5 ;
  Real temp6 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "chebyshev2", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "chebyshev2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "chebyshev2" "', argument " "2"" of type '" "Real""'");
  } 
  arg2 = static_cast< Real >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "chebyshev2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      chebyshev2(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("f", *arg6));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_butterworth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  Real *arg5 = (Real *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MatrixXC temp3 ;
  MatrixXC temp4 ;
  Real temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "butterworth", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "butterworth" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "butterworth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      butterworth(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("f", *arg5));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bessel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  Real *arg5 = (Real *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MatrixXC temp3 ;
  MatrixXC temp4 ;
  Real temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "bessel", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bessel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bessel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      bessel(arg1,arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("f", *arg5));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coeffsToZpk(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXR *arg1 = 0 ;
  MatrixXR *arg2 = 0 ;
  MatrixXC *arg3 = (MatrixXC *) 0 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  Real *arg5 = (Real *) 0 ;
  MatrixXR temp1 ;
  MatrixXR temp2 ;
  MatrixXC temp3 ;
  MatrixXC temp4 ;
  Real temp5 ;
  PyObject *swig_obj[2] ;
  
  {
    arg3 = &temp3;
    
  }
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "coeffsToZpk", 2, 2, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg1) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg1) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_DOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_FLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      
      return NULL;
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
      (*arg2) = Eigen::Map<MatrixXdscipy>((double*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
      (*arg2) = Eigen::Map<MatrixXfscipy>((float*)array_data( in_array ), in_rows, in_cols).cast<Real>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type int, float, long or double");
      return NULL;
    }
  }
  {
    try {
      coeffsToZpk((MatrixXR const &)*arg1,(MatrixXR const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg3->rows(), arg3->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg3);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, Py_BuildValue("f", *arg5));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_zpkToCoeffs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  MatrixXC temp5 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "zpkToCoeffs", 3, 3, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "zpkToCoeffs" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      zpkToCoeffs((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lowPassToLowPass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  MatrixXC temp5 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "lowPassToLowPass", 3, 3, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lowPassToLowPass" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      lowPassToLowPass((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lowPassToHighPass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  MatrixXC *arg4 = (MatrixXC *) 0 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  MatrixXC temp4 ;
  MatrixXC temp5 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "lowPassToHighPass", 3, 3, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lowPassToHighPass" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      lowPassToHighPass((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lowPassToBandPass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  Real arg4 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  MatrixXC *arg6 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  MatrixXC temp5 ;
  MatrixXC temp6 ;
  PyObject *swig_obj[4] ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "lowPassToBandPass", 4, 4, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lowPassToBandPass" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lowPassToBandPass" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      lowPassToBandPass((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lowPassToBandStop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  Real arg4 ;
  MatrixXC *arg5 = (MatrixXC *) 0 ;
  MatrixXC *arg6 = (MatrixXC *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  MatrixXC temp5 ;
  MatrixXC temp6 ;
  PyObject *swig_obj[4] ;
  
  {
    arg5 = &temp5;
    
  }
  {
    arg6 = &temp6;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "lowPassToBandStop", 4, 4, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lowPassToBandStop" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "lowPassToBandStop" "', argument " "4"" of type '" "Real""'");
  } 
  arg4 = static_cast< Real >(val4);
  {
    try {
      lowPassToBandStop((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg6->rows(), arg6->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_CFLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Complex* out_data = (Complex*)array_data(out_array);
    Eigen::Map<MatrixXCscipy>(out_data, dims[0], dims[1]) = (*arg6);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "normalize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_MatrixXC,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "MatrixXC &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "MatrixXC &""'"); 
  }
  arg1 = reinterpret_cast< MatrixXC * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_MatrixXC,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "normalize" "', argument " "2"" of type '" "MatrixXC &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "2"" of type '" "MatrixXC &""'"); 
  }
  arg2 = reinterpret_cast< MatrixXC * >(argp2);
  {
    try {
      normalize(*arg1,*arg2);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bilinear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MatrixXC *arg1 = 0 ;
  MatrixXC *arg2 = 0 ;
  Real arg3 ;
  MatrixXR *arg4 = (MatrixXR *) 0 ;
  MatrixXR *arg5 = (MatrixXR *) 0 ;
  MatrixXC temp1 ;
  MatrixXC temp2 ;
  float val3 ;
  int ecode3 = 0 ;
  MatrixXR temp4 ;
  MatrixXR temp5 ;
  PyObject *swig_obj[3] ;
  
  {
    arg4 = &temp4;
    
  }
  {
    arg5 = &temp5;
    
  }
  if (!SWIG_Python_UnpackTuple(args, "bilinear", 3, 3, swig_obj)) SWIG_fail;
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[0], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg1 = &temp1;
    
    // prepare the input array
    switch( array_type(swig_obj[0]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg1) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg1) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  {
    // create array from input
    int newObject;
    PyArrayObject * in_array;
    
    switch ( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CDOUBLE, &newObject);
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      in_array = obj_to_array_contiguous_allow_conversion(swig_obj[1], PyArray_CFLOAT, &newObject);
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
      
    }
    
    if( in_array == NULL ){
      PyErr_SetString(PyExc_ValueError,
        "array could not be created");
      
      return NULL;
    }
    
    // require one or two dimensions
    int dims[] = {
      1, 2
    };
    require_dimensions_n(in_array, dims, 2);
    
    // get the dimensions
    int in_rows;
    int in_cols;
    if(array_numdims(in_array) == 2){
      in_rows = array_size(in_array, 0);
      in_cols = array_size(in_array, 1);
      
    }else{
      in_rows = 1;
      in_cols = array_size(in_array, 0);
      
    }
    
    arg2 = &temp2;
    
    // prepare the input array
    switch( array_type(swig_obj[1]) ) {
    case PyArray_LONG:
    case PyArray_DOUBLE:
    case PyArray_CDOUBLE:
      (*arg2) = Eigen::Map<MatrixXcdscipy>((std::complex<double> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    case PyArray_INT:
    case PyArray_FLOAT:
    case PyArray_CFLOAT:
      (*arg2) = Eigen::Map<MatrixXcfscipy>((std::complex<float> *) array_data( in_array ), in_rows, in_cols).cast<Complex>();
      break;
      
    default:
      PyErr_SetString(PyExc_ValueError,
        "array must be of type complex int, complex float, complex long or complex double");
      return NULL;
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bilinear" "', argument " "3"" of type '" "Real""'");
  } 
  arg3 = static_cast< Real >(val3);
  {
    try {
      bilinear((MatrixXC const &)*arg1,(MatrixXC const &)*arg2,arg3,arg4,arg5);
    } catch (LoudiaException e) {
      PyErr_SetString(PyExc_RuntimeError, e.what());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg4->rows(), arg4->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg4);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  {
    // prepare resulting array
    npy_intp dims[] = {
      arg5->rows(), arg5->cols()
    };
    PyObject * out_array = PyArray_SimpleNew(2, dims, PyArray_FLOAT);
    
    if (out_array == NULL){
      PyErr_SetString(PyExc_ValueError,
        "Unable to create the output array.");
      
      return NULL;
    }
    
    Real* out_data = (Real*)array_data(out_array);
    Eigen::Map<MatrixXRscipy>(out_data, dims[0], dims[1]) = (*arg5);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, out_array);
  }
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "new_AudioLoader", _wrap_new_AudioLoader, METH_VARARGS, NULL},
	 { "delete_AudioLoader", _wrap_delete_AudioLoader, METH_O, NULL},
	 { "AudioLoader_process", _wrap_AudioLoader_process, METH_O, NULL},
	 { "AudioLoader_setup", _wrap_AudioLoader_setup, METH_O, NULL},
	 { "AudioLoader_sampleRate", _wrap_AudioLoader_sampleRate, METH_O, NULL},
	 { "AudioLoader_channelCount", _wrap_AudioLoader_channelCount, METH_O, NULL},
	 { "AudioLoader_isFinished", _wrap_AudioLoader_isFinished, METH_O, NULL},
	 { "AudioLoader_setFilename", _wrap_AudioLoader_setFilename, METH_VARARGS, NULL},
	 { "AudioLoader_filename", _wrap_AudioLoader_filename, METH_O, NULL},
	 { "AudioLoader_setFrameSize", _wrap_AudioLoader_setFrameSize, METH_VARARGS, NULL},
	 { "AudioLoader_frameSize", _wrap_AudioLoader_frameSize, METH_O, NULL},
	 { "AudioLoader_setChannel", _wrap_AudioLoader_setChannel, METH_VARARGS, NULL},
	 { "AudioLoader_channel", _wrap_AudioLoader_channel, METH_O, NULL},
	 { "AudioLoader_setLoadDuration", _wrap_AudioLoader_setLoadDuration, METH_VARARGS, NULL},
	 { "AudioLoader_loadDuration", _wrap_AudioLoader_loadDuration, METH_O, NULL},
	 { "AudioLoader_loadProgress", _wrap_AudioLoader_loadProgress, METH_O, NULL},
	 { "AudioLoader_fileProgress", _wrap_AudioLoader_fileProgress, METH_O, NULL},
	 { "AudioLoader_currentTime", _wrap_AudioLoader_currentTime, METH_O, NULL},
	 { "AudioLoader_totalTime", _wrap_AudioLoader_totalTime, METH_O, NULL},
	 { "AudioLoader_seek", _wrap_AudioLoader_seek, METH_VARARGS, NULL},
	 { "AudioLoader_finished", _wrap_AudioLoader_finished, METH_O, NULL},
	 { "AudioLoader_swigregister", AudioLoader_swigregister, METH_O, NULL},
	 { "AudioLoader_swiginit", AudioLoader_swiginit, METH_VARARGS, NULL},
	 { "new_FrameCutter", _wrap_new_FrameCutter, METH_VARARGS, NULL},
	 { "delete_FrameCutter", _wrap_delete_FrameCutter, METH_O, NULL},
	 { "FrameCutter_process", _wrap_FrameCutter_process, METH_VARARGS, NULL},
	 { "FrameCutter_setup", _wrap_FrameCutter_setup, METH_O, NULL},
	 { "FrameCutter_reset", _wrap_FrameCutter_reset, METH_O, NULL},
	 { "FrameCutter_maxInputSize", _wrap_FrameCutter_maxInputSize, METH_O, NULL},
	 { "FrameCutter_setMaxInputSize", _wrap_FrameCutter_setMaxInputSize, METH_VARARGS, NULL},
	 { "FrameCutter_frameSize", _wrap_FrameCutter_frameSize, METH_O, NULL},
	 { "FrameCutter_setFrameSize", _wrap_FrameCutter_setFrameSize, METH_VARARGS, NULL},
	 { "FrameCutter_hopSize", _wrap_FrameCutter_hopSize, METH_O, NULL},
	 { "FrameCutter_setHopSize", _wrap_FrameCutter_setHopSize, METH_VARARGS, NULL},
	 { "FrameCutter_setFirstSamplePosition", _wrap_FrameCutter_setFirstSamplePosition, METH_VARARGS, NULL},
	 { "FrameCutter_firstSamplePosition", _wrap_FrameCutter_firstSamplePosition, METH_O, NULL},
	 { "FrameCutter_maxFrameCount", _wrap_FrameCutter_maxFrameCount, METH_O, NULL},
	 { "FrameCutter_swigregister", FrameCutter_swigregister, METH_O, NULL},
	 { "FrameCutter_swiginit", FrameCutter_swiginit, METH_VARARGS, NULL},
	 { "new_Filter", _wrap_new_Filter, METH_VARARGS, NULL},
	 { "Filter_setup", _wrap_Filter_setup, METH_O, NULL},
	 { "Filter_reset", _wrap_Filter_reset, METH_O, NULL},
	 { "Filter_process", _wrap_Filter_process, METH_VARARGS, NULL},
	 { "Filter_a", _wrap_Filter_a, METH_O, NULL},
	 { "Filter_setA", _wrap_Filter_setA, METH_VARARGS, NULL},
	 { "Filter_b", _wrap_Filter_b, METH_O, NULL},
	 { "Filter_setB", _wrap_Filter_setB, METH_VARARGS, NULL},
	 { "Filter_channelCount", _wrap_Filter_channelCount, METH_O, NULL},
	 { "Filter_setChannelCount", _wrap_Filter_setChannelCount, METH_VARARGS, NULL},
	 { "Filter_length", _wrap_Filter_length, METH_O, NULL},
	 { "delete_Filter", _wrap_delete_Filter, METH_O, NULL},
	 { "Filter_swigregister", Filter_swigregister, METH_O, NULL},
	 { "Filter_swiginit", Filter_swiginit, METH_VARARGS, NULL},
	 { "new_DCT", _wrap_new_DCT, METH_VARARGS, NULL},
	 { "delete_DCT", _wrap_delete_DCT, METH_O, NULL},
	 { "DCT_reset", _wrap_DCT_reset, METH_O, NULL},
	 { "DCT_setup", _wrap_DCT_setup, METH_O, NULL},
	 { "DCT_process", _wrap_DCT_process, METH_VARARGS, NULL},
	 { "DCT_dctType", _wrap_DCT_dctType, METH_O, NULL},
	 { "DCT_setDctType", _wrap_DCT_setDctType, METH_VARARGS, NULL},
	 { "DCT_inputSize", _wrap_DCT_inputSize, METH_O, NULL},
	 { "DCT_setInputSize", _wrap_DCT_setInputSize, METH_VARARGS, NULL},
	 { "DCT_dctSize", _wrap_DCT_dctSize, METH_O, NULL},
	 { "DCT_setDctSize", _wrap_DCT_setDctSize, METH_VARARGS, NULL},
	 { "DCT_swigregister", DCT_swigregister, METH_O, NULL},
	 { "DCT_swiginit", DCT_swiginit, METH_VARARGS, NULL},
	 { "new_Window", _wrap_new_Window, METH_VARARGS, NULL},
	 { "delete_Window", _wrap_delete_Window, METH_O, NULL},
	 { "Window_setup", _wrap_Window_setup, METH_O, NULL},
	 { "Window_reset", _wrap_Window_reset, METH_O, NULL},
	 { "Window_process", _wrap_Window_process, METH_VARARGS, NULL},
	 { "Window_inputSize", _wrap_Window_inputSize, METH_O, NULL},
	 { "Window_setInputSize", _wrap_Window_setInputSize, METH_VARARGS, NULL},
	 { "Window_windowType", _wrap_Window_windowType, METH_O, NULL},
	 { "Window_setWindowType", _wrap_Window_setWindowType, METH_VARARGS, NULL},
	 { "Window_window", _wrap_Window_window, METH_O, NULL},
	 { "Window_setWindow", _wrap_Window_setWindow, METH_VARARGS, NULL},
	 { "Window_swigregister", Window_swigregister, METH_O, NULL},
	 { "Window_swiginit", Window_swiginit, METH_VARARGS, NULL},
	 { "new_MelBands", _wrap_new_MelBands, METH_VARARGS, NULL},
	 { "MelBands_setup", _wrap_MelBands_setup, METH_O, NULL},
	 { "MelBands_reset", _wrap_MelBands_reset, METH_O, NULL},
	 { "MelBands_process", _wrap_MelBands_process, METH_VARARGS, NULL},
	 { "MelBands_weights", _wrap_MelBands_weights, METH_O, NULL},
	 { "MelBands_bandWeights", _wrap_MelBands_bandWeights, METH_VARARGS, NULL},
	 { "MelBands_starts", _wrap_MelBands_starts, METH_O, NULL},
	 { "MelBands_bands", _wrap_MelBands_bands, METH_O, NULL},
	 { "MelBands_centers", _wrap_MelBands_centers, METH_O, NULL},
	 { "MelBands_bandCount", _wrap_MelBands_bandCount, METH_O, NULL},
	 { "MelBands_setBandCount", _wrap_MelBands_setBandCount, METH_VARARGS, NULL},
	 { "MelBands_lowFrequency", _wrap_MelBands_lowFrequency, METH_O, NULL},
	 { "MelBands_setLowFrequency", _wrap_MelBands_setLowFrequency, METH_VARARGS, NULL},
	 { "MelBands_highFrequency", _wrap_MelBands_highFrequency, METH_O, NULL},
	 { "MelBands_setHighFrequency", _wrap_MelBands_setHighFrequency, METH_VARARGS, NULL},
	 { "MelBands_sampleRate", _wrap_MelBands_sampleRate, METH_O, NULL},
	 { "MelBands_setSampleRate", _wrap_MelBands_setSampleRate, METH_VARARGS, NULL},
	 { "MelBands_fftSize", _wrap_MelBands_fftSize, METH_O, NULL},
	 { "MelBands_setFftSize", _wrap_MelBands_setFftSize, METH_VARARGS, NULL},
	 { "MelBands_scaleType", _wrap_MelBands_scaleType, METH_O, NULL},
	 { "MelBands_setScaleType", _wrap_MelBands_setScaleType, METH_VARARGS, NULL},
	 { "delete_MelBands", _wrap_delete_MelBands, METH_O, NULL},
	 { "MelBands_swigregister", MelBands_swigregister, METH_O, NULL},
	 { "MelBands_swiginit", MelBands_swiginit, METH_VARARGS, NULL},
	 { "new_BarkBands", _wrap_new_BarkBands, METH_VARARGS, NULL},
	 { "BarkBands_setup", _wrap_BarkBands_setup, METH_O, NULL},
	 { "BarkBands_reset", _wrap_BarkBands_reset, METH_O, NULL},
	 { "BarkBands_process", _wrap_BarkBands_process, METH_VARARGS, NULL},
	 { "BarkBands_weights", _wrap_BarkBands_weights, METH_O, NULL},
	 { "BarkBands_bandWeights", _wrap_BarkBands_bandWeights, METH_VARARGS, NULL},
	 { "BarkBands_starts", _wrap_BarkBands_starts, METH_O, NULL},
	 { "BarkBands_bands", _wrap_BarkBands_bands, METH_O, NULL},
	 { "BarkBands_centers", _wrap_BarkBands_centers, METH_O, NULL},
	 { "BarkBands_lowBand", _wrap_BarkBands_lowBand, METH_O, NULL},
	 { "BarkBands_setLowBand", _wrap_BarkBands_setLowBand, METH_VARARGS, NULL},
	 { "BarkBands_highBand", _wrap_BarkBands_highBand, METH_O, NULL},
	 { "BarkBands_setHighBand", _wrap_BarkBands_setHighBand, METH_VARARGS, NULL},
	 { "BarkBands_sampleRate", _wrap_BarkBands_sampleRate, METH_O, NULL},
	 { "BarkBands_setSampleRate", _wrap_BarkBands_setSampleRate, METH_VARARGS, NULL},
	 { "BarkBands_fftSize", _wrap_BarkBands_fftSize, METH_O, NULL},
	 { "BarkBands_setFftSize", _wrap_BarkBands_setFftSize, METH_VARARGS, NULL},
	 { "delete_BarkBands", _wrap_delete_BarkBands, METH_O, NULL},
	 { "BarkBands_swigregister", BarkBands_swigregister, METH_O, NULL},
	 { "BarkBands_swiginit", BarkBands_swiginit, METH_VARARGS, NULL},
	 { "new_Bands", _wrap_new_Bands, METH_VARARGS, NULL},
	 { "delete_Bands", _wrap_delete_Bands, METH_O, NULL},
	 { "Bands_process", _wrap_Bands_process, METH_VARARGS, NULL},
	 { "Bands_setup", _wrap_Bands_setup, METH_O, NULL},
	 { "Bands_reset", _wrap_Bands_reset, METH_O, NULL},
	 { "Bands_weights", _wrap_Bands_weights, METH_O, NULL},
	 { "Bands_bandWeights", _wrap_Bands_bandWeights, METH_VARARGS, NULL},
	 { "Bands_starts", _wrap_Bands_starts, METH_O, NULL},
	 { "Bands_bands", _wrap_Bands_bands, METH_O, NULL},
	 { "Bands_setStartsWeights", _wrap_Bands_setStartsWeights, METH_VARARGS, NULL},
	 { "Bands_swigregister", Bands_swigregister, METH_O, NULL},
	 { "Bands_swiginit", Bands_swiginit, METH_VARARGS, NULL},
	 { "new_FFT", _wrap_new_FFT, METH_VARARGS, NULL},
	 { "delete_FFT", _wrap_delete_FFT, METH_O, NULL},
	 { "FFT_process", _wrap_FFT_process, METH_VARARGS, NULL},
	 { "FFT_setup", _wrap_FFT_setup, METH_O, NULL},
	 { "FFT_reset", _wrap_FFT_reset, METH_O, NULL},
	 { "FFT_fftSize", _wrap_FFT_fftSize, METH_O, NULL},
	 { "FFT_setFftSize", _wrap_FFT_setFftSize, METH_VARARGS, NULL},
	 { "FFT_zeroPhase", _wrap_FFT_zeroPhase, METH_O, NULL},
	 { "FFT_setZeroPhase", _wrap_FFT_setZeroPhase, METH_VARARGS, NULL},
	 { "FFT_swigregister", FFT_swigregister, METH_O, NULL},
	 { "FFT_swiginit", FFT_swiginit, METH_VARARGS, NULL},
	 { "new_FFTComplex", _wrap_new_FFTComplex, METH_VARARGS, NULL},
	 { "delete_FFTComplex", _wrap_delete_FFTComplex, METH_O, NULL},
	 { "FFTComplex_process", _wrap_FFTComplex_process, METH_VARARGS, NULL},
	 { "FFTComplex_setup", _wrap_FFTComplex_setup, METH_O, NULL},
	 { "FFTComplex_reset", _wrap_FFTComplex_reset, METH_O, NULL},
	 { "FFTComplex_fftSize", _wrap_FFTComplex_fftSize, METH_O, NULL},
	 { "FFTComplex_setFftSize", _wrap_FFTComplex_setFftSize, METH_VARARGS, NULL},
	 { "FFTComplex_frameSize", _wrap_FFTComplex_frameSize, METH_O, NULL},
	 { "FFTComplex_setFrameSize", _wrap_FFTComplex_setFrameSize, METH_VARARGS, NULL},
	 { "FFTComplex_zeroPhase", _wrap_FFTComplex_zeroPhase, METH_O, NULL},
	 { "FFTComplex_setZeroPhase", _wrap_FFTComplex_setZeroPhase, METH_VARARGS, NULL},
	 { "FFTComplex_swigregister", FFTComplex_swigregister, METH_O, NULL},
	 { "FFTComplex_swiginit", FFTComplex_swiginit, METH_VARARGS, NULL},
	 { "new_IFFT", _wrap_new_IFFT, METH_VARARGS, NULL},
	 { "delete_IFFT", _wrap_delete_IFFT, METH_O, NULL},
	 { "IFFT_process", _wrap_IFFT_process, METH_VARARGS, NULL},
	 { "IFFT_setup", _wrap_IFFT_setup, METH_O, NULL},
	 { "IFFT_reset", _wrap_IFFT_reset, METH_O, NULL},
	 { "IFFT_fftSize", _wrap_IFFT_fftSize, METH_O, NULL},
	 { "IFFT_setFftSize", _wrap_IFFT_setFftSize, METH_VARARGS, NULL},
	 { "IFFT_zeroPhase", _wrap_IFFT_zeroPhase, METH_O, NULL},
	 { "IFFT_setZeroPhase", _wrap_IFFT_setZeroPhase, METH_VARARGS, NULL},
	 { "IFFT_swigregister", IFFT_swigregister, METH_O, NULL},
	 { "IFFT_swiginit", IFFT_swiginit, METH_VARARGS, NULL},
	 { "new_MFCC", _wrap_new_MFCC, METH_VARARGS, NULL},
	 { "delete_MFCC", _wrap_delete_MFCC, METH_O, NULL},
	 { "MFCC_reset", _wrap_MFCC_reset, METH_O, NULL},
	 { "MFCC_setup", _wrap_MFCC_setup, METH_O, NULL},
	 { "MFCC_process", _wrap_MFCC_process, METH_VARARGS, NULL},
	 { "MFCC_coefficientCount", _wrap_MFCC_coefficientCount, METH_O, NULL},
	 { "MFCC_setCoefficientCount", _wrap_MFCC_setCoefficientCount, METH_VARARGS, NULL},
	 { "MFCC_bandCount", _wrap_MFCC_bandCount, METH_O, NULL},
	 { "MFCC_setBandCount", _wrap_MFCC_setBandCount, METH_VARARGS, NULL},
	 { "MFCC_lowFrequency", _wrap_MFCC_lowFrequency, METH_O, NULL},
	 { "MFCC_setLowFrequency", _wrap_MFCC_setLowFrequency, METH_VARARGS, NULL},
	 { "MFCC_highFrequency", _wrap_MFCC_highFrequency, METH_O, NULL},
	 { "MFCC_setHighFrequency", _wrap_MFCC_setHighFrequency, METH_VARARGS, NULL},
	 { "MFCC_sampleRate", _wrap_MFCC_sampleRate, METH_O, NULL},
	 { "MFCC_setSampleRate", _wrap_MFCC_setSampleRate, METH_VARARGS, NULL},
	 { "MFCC_fftSize", _wrap_MFCC_fftSize, METH_O, NULL},
	 { "MFCC_setFftSize", _wrap_MFCC_setFftSize, METH_VARARGS, NULL},
	 { "MFCC_power", _wrap_MFCC_power, METH_O, NULL},
	 { "MFCC_setPower", _wrap_MFCC_setPower, METH_VARARGS, NULL},
	 { "MFCC_swigregister", MFCC_swigregister, METH_O, NULL},
	 { "MFCC_swiginit", MFCC_swiginit, METH_VARARGS, NULL},
	 { "new_AOK", _wrap_new_AOK, METH_VARARGS, NULL},
	 { "delete_AOK", _wrap_delete_AOK, METH_O, NULL},
	 { "AOK_setup", _wrap_AOK_setup, METH_O, NULL},
	 { "AOK_process", _wrap_AOK_process, METH_VARARGS, NULL},
	 { "AOK_reset", _wrap_AOK_reset, METH_O, NULL},
	 { "AOK_frameSize", _wrap_AOK_frameSize, METH_O, NULL},
	 { "AOK_fftSize", _wrap_AOK_fftSize, METH_O, NULL},
	 { "AOK_swigregister", AOK_swigregister, METH_O, NULL},
	 { "AOK_swiginit", AOK_swiginit, METH_VARARGS, NULL},
	 { "new_Meddis", _wrap_new_Meddis, METH_VARARGS, NULL},
	 { "delete_Meddis", _wrap_delete_Meddis, METH_O, NULL},
	 { "Meddis_setup", _wrap_Meddis_setup, METH_O, NULL},
	 { "Meddis_process", _wrap_Meddis_process, METH_VARARGS, NULL},
	 { "Meddis_channels", _wrap_Meddis_channels, METH_O, NULL},
	 { "Meddis_sampleRate", _wrap_Meddis_sampleRate, METH_O, NULL},
	 { "Meddis_reset", _wrap_Meddis_reset, METH_O, NULL},
	 { "Meddis_swigregister", Meddis_swigregister, METH_O, NULL},
	 { "Meddis_swiginit", Meddis_swiginit, METH_VARARGS, NULL},
	 { "new_SpectralReassignment", _wrap_new_SpectralReassignment, METH_VARARGS, NULL},
	 { "delete_SpectralReassignment", _wrap_delete_SpectralReassignment, METH_O, NULL},
	 { "SpectralReassignment_process", _wrap_SpectralReassignment_process, METH_VARARGS, NULL},
	 { "SpectralReassignment_setup", _wrap_SpectralReassignment_setup, METH_O, NULL},
	 { "SpectralReassignment_reset", _wrap_SpectralReassignment_reset, METH_O, NULL},
	 { "SpectralReassignment_frameSize", _wrap_SpectralReassignment_frameSize, METH_O, NULL},
	 { "SpectralReassignment_fftSize", _wrap_SpectralReassignment_fftSize, METH_O, NULL},
	 { "SpectralReassignment_windowType", _wrap_SpectralReassignment_windowType, METH_O, NULL},
	 { "SpectralReassignment_swigregister", SpectralReassignment_swigregister, METH_O, NULL},
	 { "SpectralReassignment_swiginit", SpectralReassignment_swiginit, METH_VARARGS, NULL},
	 { "new_PeakDetection", _wrap_new_PeakDetection, METH_VARARGS, NULL},
	 { "delete_PeakDetection", _wrap_delete_PeakDetection, METH_O, NULL},
	 { "PeakDetection_reset", _wrap_PeakDetection_reset, METH_O, NULL},
	 { "PeakDetection_setup", _wrap_PeakDetection_setup, METH_O, NULL},
	 { "PeakDetection_process", _wrap_PeakDetection_process, METH_VARARGS, NULL},
	 { "PeakDetection_peakCount", _wrap_PeakDetection_peakCount, METH_O, NULL},
	 { "PeakDetection_setPeakCount", _wrap_PeakDetection_setPeakCount, METH_VARARGS, NULL},
	 { "PeakDetection_minimumPeakWidth", _wrap_PeakDetection_minimumPeakWidth, METH_O, NULL},
	 { "PeakDetection_setMinimumPeakWidth", _wrap_PeakDetection_setMinimumPeakWidth, METH_VARARGS, NULL},
	 { "PeakDetection_candidateCount", _wrap_PeakDetection_candidateCount, METH_O, NULL},
	 { "PeakDetection_setCandidateCount", _wrap_PeakDetection_setCandidateCount, METH_VARARGS, NULL},
	 { "PeakDetection_minimumPeakContrast", _wrap_PeakDetection_minimumPeakContrast, METH_O, NULL},
	 { "PeakDetection_setMinimumPeakContrast", _wrap_PeakDetection_setMinimumPeakContrast, METH_VARARGS, NULL},
	 { "PeakDetection_sortMethod", _wrap_PeakDetection_sortMethod, METH_O, NULL},
	 { "PeakDetection_setSortMethod", _wrap_PeakDetection_setSortMethod, METH_VARARGS, NULL},
	 { "PeakDetection_swigregister", PeakDetection_swigregister, METH_O, NULL},
	 { "PeakDetection_swiginit", PeakDetection_swiginit, METH_VARARGS, NULL},
	 { "new_PeakDetectionComplex", _wrap_new_PeakDetectionComplex, METH_VARARGS, NULL},
	 { "delete_PeakDetectionComplex", _wrap_delete_PeakDetectionComplex, METH_O, NULL},
	 { "PeakDetectionComplex_reset", _wrap_PeakDetectionComplex_reset, METH_O, NULL},
	 { "PeakDetectionComplex_setup", _wrap_PeakDetectionComplex_setup, METH_O, NULL},
	 { "PeakDetectionComplex_process", _wrap_PeakDetectionComplex_process, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_peakCount", _wrap_PeakDetectionComplex_peakCount, METH_O, NULL},
	 { "PeakDetectionComplex_setPeakCount", _wrap_PeakDetectionComplex_setPeakCount, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_minimumPeakWidth", _wrap_PeakDetectionComplex_minimumPeakWidth, METH_O, NULL},
	 { "PeakDetectionComplex_setMinimumPeakWidth", _wrap_PeakDetectionComplex_setMinimumPeakWidth, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_candidateCount", _wrap_PeakDetectionComplex_candidateCount, METH_O, NULL},
	 { "PeakDetectionComplex_setCandidateCount", _wrap_PeakDetectionComplex_setCandidateCount, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_minimumPeakContrast", _wrap_PeakDetectionComplex_minimumPeakContrast, METH_O, NULL},
	 { "PeakDetectionComplex_setMinimumPeakContrast", _wrap_PeakDetectionComplex_setMinimumPeakContrast, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_sortMethod", _wrap_PeakDetectionComplex_sortMethod, METH_O, NULL},
	 { "PeakDetectionComplex_setSortMethod", _wrap_PeakDetectionComplex_setSortMethod, METH_VARARGS, NULL},
	 { "PeakDetectionComplex_swigregister", PeakDetectionComplex_swigregister, METH_O, NULL},
	 { "PeakDetectionComplex_swiginit", PeakDetectionComplex_swiginit, METH_VARARGS, NULL},
	 { "new_PeakCOG", _wrap_new_PeakCOG, METH_VARARGS, NULL},
	 { "delete_PeakCOG", _wrap_delete_PeakCOG, METH_O, NULL},
	 { "PeakCOG_setup", _wrap_PeakCOG_setup, METH_O, NULL},
	 { "PeakCOG_process", _wrap_PeakCOG_process, METH_VARARGS, NULL},
	 { "PeakCOG_reset", _wrap_PeakCOG_reset, METH_O, NULL},
	 { "PeakCOG_swigregister", PeakCOG_swigregister, METH_O, NULL},
	 { "PeakCOG_swiginit", PeakCOG_swiginit, METH_VARARGS, NULL},
	 { "new_PeakInterpolation", _wrap_new_PeakInterpolation, METH_NOARGS, NULL},
	 { "delete_PeakInterpolation", _wrap_delete_PeakInterpolation, METH_O, NULL},
	 { "PeakInterpolation_setup", _wrap_PeakInterpolation_setup, METH_O, NULL},
	 { "PeakInterpolation_reset", _wrap_PeakInterpolation_reset, METH_O, NULL},
	 { "PeakInterpolation_process", _wrap_PeakInterpolation_process, METH_VARARGS, NULL},
	 { "PeakInterpolation_swigregister", PeakInterpolation_swigregister, METH_O, NULL},
	 { "PeakInterpolation_swiginit", PeakInterpolation_swiginit, METH_VARARGS, NULL},
	 { "new_PeakInterpolationComplex", _wrap_new_PeakInterpolationComplex, METH_NOARGS, NULL},
	 { "delete_PeakInterpolationComplex", _wrap_delete_PeakInterpolationComplex, METH_O, NULL},
	 { "PeakInterpolationComplex_setup", _wrap_PeakInterpolationComplex_setup, METH_O, NULL},
	 { "PeakInterpolationComplex_reset", _wrap_PeakInterpolationComplex_reset, METH_O, NULL},
	 { "PeakInterpolationComplex_process", _wrap_PeakInterpolationComplex_process, METH_VARARGS, NULL},
	 { "PeakInterpolationComplex_swigregister", PeakInterpolationComplex_swigregister, METH_O, NULL},
	 { "PeakInterpolationComplex_swiginit", PeakInterpolationComplex_swiginit, METH_VARARGS, NULL},
	 { "new_PeakTracking", _wrap_new_PeakTracking, METH_VARARGS, NULL},
	 { "delete_PeakTracking", _wrap_delete_PeakTracking, METH_O, NULL},
	 { "PeakTracking_setup", _wrap_PeakTracking_setup, METH_O, NULL},
	 { "PeakTracking_reset", _wrap_PeakTracking_reset, METH_O, NULL},
	 { "PeakTracking_process", _wrap_PeakTracking_process, METH_VARARGS, NULL},
	 { "PeakTracking_trajectoryCount", _wrap_PeakTracking_trajectoryCount, METH_O, NULL},
	 { "PeakTracking_setTrajectoryCount", _wrap_PeakTracking_setTrajectoryCount, METH_VARARGS, NULL},
	 { "PeakTracking_maximumFrequencyChange", _wrap_PeakTracking_maximumFrequencyChange, METH_O, NULL},
	 { "PeakTracking_setMaximumFrequencyChange", _wrap_PeakTracking_setMaximumFrequencyChange, METH_VARARGS, NULL},
	 { "PeakTracking_silentFrameCount", _wrap_PeakTracking_silentFrameCount, METH_O, NULL},
	 { "PeakTracking_setSilentFrameCount", _wrap_PeakTracking_setSilentFrameCount, METH_VARARGS, NULL},
	 { "PeakTracking_swigregister", PeakTracking_swigregister, METH_O, NULL},
	 { "PeakTracking_swiginit", PeakTracking_swiginit, METH_VARARGS, NULL},
	 { "new_PeakSynthesize", _wrap_new_PeakSynthesize, METH_VARARGS, NULL},
	 { "delete_PeakSynthesize", _wrap_delete_PeakSynthesize, METH_O, NULL},
	 { "PeakSynthesize_setup", _wrap_PeakSynthesize_setup, METH_O, NULL},
	 { "PeakSynthesize_process", _wrap_PeakSynthesize_process, METH_VARARGS, NULL},
	 { "PeakSynthesize_reset", _wrap_PeakSynthesize_reset, METH_O, NULL},
	 { "PeakSynthesize_swigregister", PeakSynthesize_swigregister, METH_O, NULL},
	 { "PeakSynthesize_swiginit", PeakSynthesize_swiginit, METH_VARARGS, NULL},
	 { "new_BandFilter", _wrap_new_BandFilter, METH_VARARGS, NULL},
	 { "BandFilter_setup", _wrap_BandFilter_setup, METH_O, NULL},
	 { "BandFilter_reset", _wrap_BandFilter_reset, METH_O, NULL},
	 { "BandFilter_process", _wrap_BandFilter_process, METH_VARARGS, NULL},
	 { "BandFilter_a", _wrap_BandFilter_a, METH_O, NULL},
	 { "BandFilter_b", _wrap_BandFilter_b, METH_O, NULL},
	 { "BandFilter_order", _wrap_BandFilter_order, METH_O, NULL},
	 { "BandFilter_setOrder", _wrap_BandFilter_setOrder, METH_VARARGS, NULL},
	 { "BandFilter_lowFrequency", _wrap_BandFilter_lowFrequency, METH_O, NULL},
	 { "BandFilter_setLowFrequency", _wrap_BandFilter_setLowFrequency, METH_VARARGS, NULL},
	 { "BandFilter_highFrequency", _wrap_BandFilter_highFrequency, METH_O, NULL},
	 { "BandFilter_setHighFrequency", _wrap_BandFilter_setHighFrequency, METH_VARARGS, NULL},
	 { "BandFilter_filterType", _wrap_BandFilter_filterType, METH_O, NULL},
	 { "BandFilter_setFilterType", _wrap_BandFilter_setFilterType, METH_VARARGS, NULL},
	 { "BandFilter_bandType", _wrap_BandFilter_bandType, METH_O, NULL},
	 { "BandFilter_setBandType", _wrap_BandFilter_setBandType, METH_VARARGS, NULL},
	 { "BandFilter_passRipple", _wrap_BandFilter_passRipple, METH_O, NULL},
	 { "BandFilter_setPassRipple", _wrap_BandFilter_setPassRipple, METH_VARARGS, NULL},
	 { "BandFilter_stopAttenuation", _wrap_BandFilter_stopAttenuation, METH_O, NULL},
	 { "BandFilter_setStopAttenuation", _wrap_BandFilter_setStopAttenuation, METH_VARARGS, NULL},
	 { "delete_BandFilter", _wrap_delete_BandFilter, METH_O, NULL},
	 { "BandFilter_swigregister", BandFilter_swigregister, METH_O, NULL},
	 { "BandFilter_swiginit", BandFilter_swiginit, METH_VARARGS, NULL},
	 { "new_Unwrap", _wrap_new_Unwrap, METH_NOARGS, NULL},
	 { "delete_Unwrap", _wrap_delete_Unwrap, METH_O, NULL},
	 { "Unwrap_setup", _wrap_Unwrap_setup, METH_O, NULL},
	 { "Unwrap_reset", _wrap_Unwrap_reset, METH_O, NULL},
	 { "Unwrap_process", _wrap_Unwrap_process, METH_VARARGS, NULL},
	 { "Unwrap_swigregister", Unwrap_swigregister, METH_O, NULL},
	 { "Unwrap_swiginit", Unwrap_swiginit, METH_VARARGS, NULL},
	 { "new_LPC", _wrap_new_LPC, METH_VARARGS, NULL},
	 { "delete_LPC", _wrap_delete_LPC, METH_O, NULL},
	 { "LPC_setup", _wrap_LPC_setup, METH_O, NULL},
	 { "LPC_reset", _wrap_LPC_reset, METH_O, NULL},
	 { "LPC_process", _wrap_LPC_process, METH_VARARGS, NULL},
	 { "LPC_inputSize", _wrap_LPC_inputSize, METH_O, NULL},
	 { "LPC_setInputSize", _wrap_LPC_setInputSize, METH_VARARGS, NULL},
	 { "LPC_coefficientCount", _wrap_LPC_coefficientCount, METH_O, NULL},
	 { "LPC_setCoefficientCount", _wrap_LPC_setCoefficientCount, METH_VARARGS, NULL},
	 { "LPC_preEmphasis", _wrap_LPC_preEmphasis, METH_O, NULL},
	 { "LPC_setPreEmphasis", _wrap_LPC_setPreEmphasis, METH_VARARGS, NULL},
	 { "LPC_swigregister", LPC_swigregister, METH_O, NULL},
	 { "LPC_swiginit", LPC_swiginit, METH_VARARGS, NULL},
	 { "new_LPCResidual", _wrap_new_LPCResidual, METH_O, NULL},
	 { "delete_LPCResidual", _wrap_delete_LPCResidual, METH_O, NULL},
	 { "LPCResidual_setup", _wrap_LPCResidual_setup, METH_O, NULL},
	 { "LPCResidual_process", _wrap_LPCResidual_process, METH_VARARGS, NULL},
	 { "LPCResidual_reset", _wrap_LPCResidual_reset, METH_O, NULL},
	 { "LPCResidual_swigregister", LPCResidual_swigregister, METH_O, NULL},
	 { "LPCResidual_swiginit", LPCResidual_swiginit, METH_VARARGS, NULL},
	 { "new_NMF", _wrap_new_NMF, METH_VARARGS, NULL},
	 { "delete_NMF", _wrap_delete_NMF, METH_O, NULL},
	 { "NMF_reset", _wrap_NMF_reset, METH_O, NULL},
	 { "NMF_setup", _wrap_NMF_setup, METH_O, NULL},
	 { "NMF_process", _wrap_NMF_process, METH_VARARGS, NULL},
	 { "NMF_inputSize", _wrap_NMF_inputSize, METH_O, NULL},
	 { "NMF_setInputSize", _wrap_NMF_setInputSize, METH_VARARGS, NULL},
	 { "NMF_componentCount", _wrap_NMF_componentCount, METH_O, NULL},
	 { "NMF_setComponentCount", _wrap_NMF_setComponentCount, METH_VARARGS, NULL},
	 { "NMF_iterationCount", _wrap_NMF_iterationCount, METH_O, NULL},
	 { "NMF_setIterationCount", _wrap_NMF_setIterationCount, METH_VARARGS, NULL},
	 { "NMF_epsilon", _wrap_NMF_epsilon, METH_O, NULL},
	 { "NMF_setEpsilon", _wrap_NMF_setEpsilon, METH_VARARGS, NULL},
	 { "NMF_swigregister", NMF_swigregister, METH_O, NULL},
	 { "NMF_swiginit", NMF_swiginit, METH_VARARGS, NULL},
	 { "new_INMF", _wrap_new_INMF, METH_VARARGS, NULL},
	 { "delete_INMF", _wrap_delete_INMF, METH_O, NULL},
	 { "INMF_setup", _wrap_INMF_setup, METH_O, NULL},
	 { "INMF_process", _wrap_INMF_process, METH_VARARGS, NULL},
	 { "INMF_reset", _wrap_INMF_reset, METH_O, NULL},
	 { "INMF_swigregister", INMF_swigregister, METH_O, NULL},
	 { "INMF_swiginit", INMF_swiginit, METH_VARARGS, NULL},
	 { "new_Resample", _wrap_new_Resample, METH_VARARGS, NULL},
	 { "delete_Resample", _wrap_delete_Resample, METH_O, NULL},
	 { "Resample_process", _wrap_Resample_process, METH_VARARGS, NULL},
	 { "Resample_setup", _wrap_Resample_setup, METH_O, NULL},
	 { "Resample_reset", _wrap_Resample_reset, METH_O, NULL},
	 { "Resample_inputSize", _wrap_Resample_inputSize, METH_O, NULL},
	 { "Resample_setInputSize", _wrap_Resample_setInputSize, METH_VARARGS, NULL},
	 { "Resample_outputSize", _wrap_Resample_outputSize, METH_O, NULL},
	 { "Resample_setOutputSize", _wrap_Resample_setOutputSize, METH_VARARGS, NULL},
	 { "Resample_resamplingRatio", _wrap_Resample_resamplingRatio, METH_O, NULL},
	 { "Resample_setResamplingRatio", _wrap_Resample_setResamplingRatio, METH_VARARGS, NULL},
	 { "Resample_resamplingMethod", _wrap_Resample_resamplingMethod, METH_O, NULL},
	 { "Resample_setResamplingMethod", _wrap_Resample_setResamplingMethod, METH_VARARGS, NULL},
	 { "Resample_swigregister", Resample_swigregister, METH_O, NULL},
	 { "Resample_swiginit", Resample_swiginit, METH_VARARGS, NULL},
	 { "new_Correlation", _wrap_new_Correlation, METH_VARARGS, NULL},
	 { "delete_Correlation", _wrap_delete_Correlation, METH_O, NULL},
	 { "Correlation_setup", _wrap_Correlation_setup, METH_O, NULL},
	 { "Correlation_reset", _wrap_Correlation_reset, METH_O, NULL},
	 { "Correlation_process", _wrap_Correlation_process, METH_VARARGS, NULL},
	 { "Correlation_inputSizeA", _wrap_Correlation_inputSizeA, METH_O, NULL},
	 { "Correlation_setInputSizeA", _wrap_Correlation_setInputSizeA, METH_VARARGS, NULL},
	 { "Correlation_inputSizeB", _wrap_Correlation_inputSizeB, METH_O, NULL},
	 { "Correlation_setInputSizeB", _wrap_Correlation_setInputSizeB, METH_VARARGS, NULL},
	 { "Correlation_minLag", _wrap_Correlation_minLag, METH_O, NULL},
	 { "Correlation_setMinLag", _wrap_Correlation_setMinLag, METH_VARARGS, NULL},
	 { "Correlation_maxLag", _wrap_Correlation_maxLag, METH_O, NULL},
	 { "Correlation_setMaxLag", _wrap_Correlation_setMaxLag, METH_VARARGS, NULL},
	 { "Correlation_useFft", _wrap_Correlation_useFft, METH_O, NULL},
	 { "Correlation_setUseFft", _wrap_Correlation_setUseFft, METH_VARARGS, NULL},
	 { "Correlation_swigregister", Correlation_swigregister, METH_O, NULL},
	 { "Correlation_swiginit", Correlation_swiginit, METH_VARARGS, NULL},
	 { "new_Autocorrelation", _wrap_new_Autocorrelation, METH_VARARGS, NULL},
	 { "delete_Autocorrelation", _wrap_delete_Autocorrelation, METH_O, NULL},
	 { "Autocorrelation_setup", _wrap_Autocorrelation_setup, METH_O, NULL},
	 { "Autocorrelation_reset", _wrap_Autocorrelation_reset, METH_O, NULL},
	 { "Autocorrelation_process", _wrap_Autocorrelation_process, METH_VARARGS, NULL},
	 { "Autocorrelation_inputSize", _wrap_Autocorrelation_inputSize, METH_O, NULL},
	 { "Autocorrelation_setInputSize", _wrap_Autocorrelation_setInputSize, METH_VARARGS, NULL},
	 { "Autocorrelation_minLag", _wrap_Autocorrelation_minLag, METH_O, NULL},
	 { "Autocorrelation_setMinLag", _wrap_Autocorrelation_setMinLag, METH_VARARGS, NULL},
	 { "Autocorrelation_maxLag", _wrap_Autocorrelation_maxLag, METH_O, NULL},
	 { "Autocorrelation_setMaxLag", _wrap_Autocorrelation_setMaxLag, METH_VARARGS, NULL},
	 { "Autocorrelation_useFft", _wrap_Autocorrelation_useFft, METH_O, NULL},
	 { "Autocorrelation_setUseFft", _wrap_Autocorrelation_setUseFft, METH_VARARGS, NULL},
	 { "Autocorrelation_swigregister", Autocorrelation_swigregister, METH_O, NULL},
	 { "Autocorrelation_swiginit", Autocorrelation_swiginit, METH_VARARGS, NULL},
	 { "new_SpectralNoiseSuppression", _wrap_new_SpectralNoiseSuppression, METH_VARARGS, NULL},
	 { "delete_SpectralNoiseSuppression", _wrap_delete_SpectralNoiseSuppression, METH_O, NULL},
	 { "SpectralNoiseSuppression_setup", _wrap_SpectralNoiseSuppression_setup, METH_O, NULL},
	 { "SpectralNoiseSuppression_reset", _wrap_SpectralNoiseSuppression_reset, METH_O, NULL},
	 { "SpectralNoiseSuppression_process", _wrap_SpectralNoiseSuppression_process, METH_VARARGS, NULL},
	 { "SpectralNoiseSuppression_lowFrequency", _wrap_SpectralNoiseSuppression_lowFrequency, METH_O, NULL},
	 { "SpectralNoiseSuppression_setLowFrequency", _wrap_SpectralNoiseSuppression_setLowFrequency, METH_VARARGS, NULL},
	 { "SpectralNoiseSuppression_highFrequency", _wrap_SpectralNoiseSuppression_highFrequency, METH_O, NULL},
	 { "SpectralNoiseSuppression_setHighFrequency", _wrap_SpectralNoiseSuppression_setHighFrequency, METH_VARARGS, NULL},
	 { "SpectralNoiseSuppression_sampleRate", _wrap_SpectralNoiseSuppression_sampleRate, METH_O, NULL},
	 { "SpectralNoiseSuppression_setSampleRate", _wrap_SpectralNoiseSuppression_setSampleRate, METH_VARARGS, NULL},
	 { "SpectralNoiseSuppression_fftSize", _wrap_SpectralNoiseSuppression_fftSize, METH_O, NULL},
	 { "SpectralNoiseSuppression_setFftSize", _wrap_SpectralNoiseSuppression_setFftSize, METH_VARARGS, NULL},
	 { "SpectralNoiseSuppression_swigregister", SpectralNoiseSuppression_swigregister, METH_O, NULL},
	 { "SpectralNoiseSuppression_swiginit", SpectralNoiseSuppression_swiginit, METH_VARARGS, NULL},
	 { "new_SpectralWhitening", _wrap_new_SpectralWhitening, METH_VARARGS, NULL},
	 { "delete_SpectralWhitening", _wrap_delete_SpectralWhitening, METH_O, NULL},
	 { "SpectralWhitening_setup", _wrap_SpectralWhitening_setup, METH_O, NULL},
	 { "SpectralWhitening_reset", _wrap_SpectralWhitening_reset, METH_O, NULL},
	 { "SpectralWhitening_process", _wrap_SpectralWhitening_process, METH_VARARGS, NULL},
	 { "SpectralWhitening_bandCount", _wrap_SpectralWhitening_bandCount, METH_O, NULL},
	 { "SpectralWhitening_setBandCount", _wrap_SpectralWhitening_setBandCount, METH_VARARGS, NULL},
	 { "SpectralWhitening_lowFrequency", _wrap_SpectralWhitening_lowFrequency, METH_O, NULL},
	 { "SpectralWhitening_setLowFrequency", _wrap_SpectralWhitening_setLowFrequency, METH_VARARGS, NULL},
	 { "SpectralWhitening_highFrequency", _wrap_SpectralWhitening_highFrequency, METH_O, NULL},
	 { "SpectralWhitening_setHighFrequency", _wrap_SpectralWhitening_setHighFrequency, METH_VARARGS, NULL},
	 { "SpectralWhitening_sampleRate", _wrap_SpectralWhitening_sampleRate, METH_O, NULL},
	 { "SpectralWhitening_setSampleRate", _wrap_SpectralWhitening_setSampleRate, METH_VARARGS, NULL},
	 { "SpectralWhitening_fftSize", _wrap_SpectralWhitening_fftSize, METH_O, NULL},
	 { "SpectralWhitening_setFftSize", _wrap_SpectralWhitening_setFftSize, METH_VARARGS, NULL},
	 { "SpectralWhitening_scaleType", _wrap_SpectralWhitening_scaleType, METH_O, NULL},
	 { "SpectralWhitening_setScaleType", _wrap_SpectralWhitening_setScaleType, METH_VARARGS, NULL},
	 { "SpectralWhitening_compressionFactor", _wrap_SpectralWhitening_compressionFactor, METH_O, NULL},
	 { "SpectralWhitening_setCompressionFactor", _wrap_SpectralWhitening_setCompressionFactor, METH_VARARGS, NULL},
	 { "SpectralWhitening_swigregister", SpectralWhitening_swigregister, METH_O, NULL},
	 { "SpectralWhitening_swiginit", SpectralWhitening_swiginit, METH_VARARGS, NULL},
	 { "new_SpectralODF", _wrap_new_SpectralODF, METH_VARARGS, NULL},
	 { "delete_SpectralODF", _wrap_delete_SpectralODF, METH_O, NULL},
	 { "SpectralODF_setup", _wrap_SpectralODF_setup, METH_O, NULL},
	 { "SpectralODF_reset", _wrap_SpectralODF_reset, METH_O, NULL},
	 { "SpectralODF_process", _wrap_SpectralODF_process, METH_VARARGS, NULL},
	 { "SpectralODF_odfMethod", _wrap_SpectralODF_odfMethod, METH_O, NULL},
	 { "SpectralODF_setOdfMethod", _wrap_SpectralODF_setOdfMethod, METH_VARARGS, NULL},
	 { "SpectralODF_swigregister", SpectralODF_swigregister, METH_O, NULL},
	 { "SpectralODF_swiginit", SpectralODF_swiginit, METH_VARARGS, NULL},
	 { "new_PitchSaliency", _wrap_new_PitchSaliency, METH_VARARGS, NULL},
	 { "delete_PitchSaliency", _wrap_delete_PitchSaliency, METH_O, NULL},
	 { "PitchSaliency_setup", _wrap_PitchSaliency_setup, METH_O, NULL},
	 { "PitchSaliency_process", _wrap_PitchSaliency_process, METH_VARARGS, NULL},
	 { "PitchSaliency_reset", _wrap_PitchSaliency_reset, METH_O, NULL},
	 { "PitchSaliency_swigregister", PitchSaliency_swigregister, METH_O, NULL},
	 { "PitchSaliency_swiginit", PitchSaliency_swiginit, METH_VARARGS, NULL},
	 { "new_PitchACF", _wrap_new_PitchACF, METH_VARARGS, NULL},
	 { "delete_PitchACF", _wrap_delete_PitchACF, METH_O, NULL},
	 { "PitchACF_setup", _wrap_PitchACF_setup, METH_O, NULL},
	 { "PitchACF_reset", _wrap_PitchACF_reset, METH_O, NULL},
	 { "PitchACF_process", _wrap_PitchACF_process, METH_VARARGS, NULL},
	 { "PitchACF_fftSize", _wrap_PitchACF_fftSize, METH_O, NULL},
	 { "PitchACF_setFftSize", _wrap_PitchACF_setFftSize, METH_VARARGS, NULL},
	 { "PitchACF_minimumPeakWidth", _wrap_PitchACF_minimumPeakWidth, METH_O, NULL},
	 { "PitchACF_setMinimumPeakWidth", _wrap_PitchACF_setMinimumPeakWidth, METH_VARARGS, NULL},
	 { "PitchACF_peakCandidateCount", _wrap_PitchACF_peakCandidateCount, METH_O, NULL},
	 { "PitchACF_setPeakCandidateCount", _wrap_PitchACF_setPeakCandidateCount, METH_VARARGS, NULL},
	 { "PitchACF_sampleRate", _wrap_PitchACF_sampleRate, METH_O, NULL},
	 { "PitchACF_setSampleRate", _wrap_PitchACF_setSampleRate, METH_VARARGS, NULL},
	 { "PitchACF_swigregister", PitchACF_swigregister, METH_O, NULL},
	 { "PitchACF_swiginit", PitchACF_swiginit, METH_VARARGS, NULL},
	 { "new_PitchInverseProblem", _wrap_new_PitchInverseProblem, METH_VARARGS, NULL},
	 { "delete_PitchInverseProblem", _wrap_delete_PitchInverseProblem, METH_O, NULL},
	 { "PitchInverseProblem_reset", _wrap_PitchInverseProblem_reset, METH_O, NULL},
	 { "PitchInverseProblem_setup", _wrap_PitchInverseProblem_setup, METH_O, NULL},
	 { "PitchInverseProblem_process", _wrap_PitchInverseProblem_process, METH_VARARGS, NULL},
	 { "PitchInverseProblem_projectionMatrix", _wrap_PitchInverseProblem_projectionMatrix, METH_O, NULL},
	 { "PitchInverseProblem_lowFrequency", _wrap_PitchInverseProblem_lowFrequency, METH_O, NULL},
	 { "PitchInverseProblem_setLowFrequency", _wrap_PitchInverseProblem_setLowFrequency, METH_VARARGS, NULL},
	 { "PitchInverseProblem_highFrequency", _wrap_PitchInverseProblem_highFrequency, METH_O, NULL},
	 { "PitchInverseProblem_setHighFrequency", _wrap_PitchInverseProblem_setHighFrequency, METH_VARARGS, NULL},
	 { "PitchInverseProblem_sampleRate", _wrap_PitchInverseProblem_sampleRate, METH_O, NULL},
	 { "PitchInverseProblem_setSampleRate", _wrap_PitchInverseProblem_setSampleRate, METH_VARARGS, NULL},
	 { "PitchInverseProblem_fftSize", _wrap_PitchInverseProblem_fftSize, METH_O, NULL},
	 { "PitchInverseProblem_setFftSize", _wrap_PitchInverseProblem_setFftSize, METH_VARARGS, NULL},
	 { "PitchInverseProblem_frequencyCandidateCount", _wrap_PitchInverseProblem_frequencyCandidateCount, METH_O, NULL},
	 { "PitchInverseProblem_setFrequencyCandidateCount", _wrap_PitchInverseProblem_setFrequencyCandidateCount, METH_VARARGS, NULL},
	 { "PitchInverseProblem_peakWidth", _wrap_PitchInverseProblem_peakWidth, METH_O, NULL},
	 { "PitchInverseProblem_setPeakWidth", _wrap_PitchInverseProblem_setPeakWidth, METH_VARARGS, NULL},
	 { "PitchInverseProblem_pitchCount", _wrap_PitchInverseProblem_pitchCount, METH_O, NULL},
	 { "PitchInverseProblem_setPitchCount", _wrap_PitchInverseProblem_setPitchCount, METH_VARARGS, NULL},
	 { "PitchInverseProblem_harmonicCount", _wrap_PitchInverseProblem_harmonicCount, METH_O, NULL},
	 { "PitchInverseProblem_setHarmonicCount", _wrap_PitchInverseProblem_setHarmonicCount, METH_VARARGS, NULL},
	 { "PitchInverseProblem_swigregister", PitchInverseProblem_swigregister, METH_O, NULL},
	 { "PitchInverseProblem_swiginit", PitchInverseProblem_swiginit, METH_VARARGS, NULL},
	 { "new_VoiceActivityDetection", _wrap_new_VoiceActivityDetection, METH_VARARGS, NULL},
	 { "delete_VoiceActivityDetection", _wrap_delete_VoiceActivityDetection, METH_O, NULL},
	 { "VoiceActivityDetection_process", _wrap_VoiceActivityDetection_process, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_setup", _wrap_VoiceActivityDetection_setup, METH_O, NULL},
	 { "VoiceActivityDetection_reset", _wrap_VoiceActivityDetection_reset, METH_O, NULL},
	 { "VoiceActivityDetection_lowBand", _wrap_VoiceActivityDetection_lowBand, METH_O, NULL},
	 { "VoiceActivityDetection_setLowBand", _wrap_VoiceActivityDetection_setLowBand, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_highBand", _wrap_VoiceActivityDetection_highBand, METH_O, NULL},
	 { "VoiceActivityDetection_setHighBand", _wrap_VoiceActivityDetection_setHighBand, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_sampleRate", _wrap_VoiceActivityDetection_sampleRate, METH_O, NULL},
	 { "VoiceActivityDetection_setSampleRate", _wrap_VoiceActivityDetection_setSampleRate, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_memorySize", _wrap_VoiceActivityDetection_memorySize, METH_O, NULL},
	 { "VoiceActivityDetection_setMemorySize", _wrap_VoiceActivityDetection_setMemorySize, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_fftSize", _wrap_VoiceActivityDetection_fftSize, METH_O, NULL},
	 { "VoiceActivityDetection_setFftSize", _wrap_VoiceActivityDetection_setFftSize, METH_VARARGS, NULL},
	 { "VoiceActivityDetection_swigregister", VoiceActivityDetection_swigregister, METH_O, NULL},
	 { "VoiceActivityDetection_swiginit", VoiceActivityDetection_swiginit, METH_VARARGS, NULL},
	 { "new_OnsetComplex", _wrap_new_OnsetComplex, METH_VARARGS, NULL},
	 { "delete_OnsetComplex", _wrap_delete_OnsetComplex, METH_O, NULL},
	 { "OnsetComplex_setup", _wrap_OnsetComplex_setup, METH_O, NULL},
	 { "OnsetComplex_process", _wrap_OnsetComplex_process, METH_VARARGS, NULL},
	 { "OnsetComplex_reset", _wrap_OnsetComplex_reset, METH_O, NULL},
	 { "OnsetComplex_swigregister", OnsetComplex_swigregister, METH_O, NULL},
	 { "OnsetComplex_swiginit", OnsetComplex_swiginit, METH_VARARGS, NULL},
	 { "linearToMelGreenwood1990", _wrap_linearToMelGreenwood1990, METH_O, NULL},
	 { "melToLinearGreenwood1990", _wrap_melToLinearGreenwood1990, METH_O, NULL},
	 { "linearToMelMatrixGreenwood1990", _wrap_linearToMelMatrixGreenwood1990, METH_O, NULL},
	 { "melToLinearMatrixGreenwood1990", _wrap_melToLinearMatrixGreenwood1990, METH_O, NULL},
	 { "linearToMelStevens1937", _wrap_linearToMelStevens1937, METH_O, NULL},
	 { "melToLinearStevens1937", _wrap_melToLinearStevens1937, METH_O, NULL},
	 { "linearToMelMatrixStevens1937", _wrap_linearToMelMatrixStevens1937, METH_O, NULL},
	 { "melToLinearMatrixStevens1937", _wrap_melToLinearMatrixStevens1937, METH_O, NULL},
	 { "linearToMelFant1968", _wrap_linearToMelFant1968, METH_O, NULL},
	 { "melToLinearFant1968", _wrap_melToLinearFant1968, METH_O, NULL},
	 { "linearToMelMatrixFant1968", _wrap_linearToMelMatrixFant1968, METH_O, NULL},
	 { "melToLinearMatrixFant1968", _wrap_melToLinearMatrixFant1968, METH_O, NULL},
	 { "roots", _wrap_roots, METH_O, NULL},
	 { "poly", _wrap_poly, METH_O, NULL},
	 { "convolve", _wrap_convolve, METH_VARARGS, NULL},
	 { "correlate", _wrap_correlate, METH_VARARGS, NULL},
	 { "autocorrelate", _wrap_autocorrelate, METH_VARARGS, NULL},
	 { "reverseCols", _wrap_reverseCols, METH_VARARGS, NULL},
	 { "rowCumsum", _wrap_rowCumsum, METH_NOARGS, NULL},
	 { "colCumsum", _wrap_colCumsum, METH_NOARGS, NULL},
	 { "rowShift", _wrap_rowShift, METH_O, NULL},
	 { "colShift", _wrap_colShift, METH_O, NULL},
	 { "range", _wrap_range, METH_VARARGS, NULL},
	 { "polar", _wrap_polar, METH_VARARGS, NULL},
	 { "combination", _wrap_combination, METH_VARARGS, NULL},
	 { "asinc", _wrap_asinc, METH_VARARGS, NULL},
	 { "raisedCosTransform", _wrap_raisedCosTransform, METH_VARARGS, NULL},
	 { "hannTransform", _wrap_hannTransform, METH_VARARGS, NULL},
	 { "hammingTransform", _wrap_hammingTransform, METH_VARARGS, NULL},
	 { "dbToMag", _wrap_dbToMag, METH_O, NULL},
	 { "magToDb", _wrap_magToDb, METH_VARARGS, NULL},
	 { "unwrap", _wrap_unwrap, METH_O, NULL},
	 { "freqz", _wrap_freqz, METH_VARARGS, NULL},
	 { "derivate", _wrap_derivate, METH_O, NULL},
	 { "nextPowerOf2", _wrap_nextPowerOf2, METH_VARARGS, NULL},
	 { "gaussian", _wrap_gaussian, METH_VARARGS, NULL},
	 { "pseudoInverse", _wrap_pseudoInverse, METH_VARARGS, NULL},
	 { "chebyshev1", _wrap_chebyshev1, METH_VARARGS, NULL},
	 { "chebyshev2", _wrap_chebyshev2, METH_VARARGS, NULL},
	 { "butterworth", _wrap_butterworth, METH_VARARGS, NULL},
	 { "bessel", _wrap_bessel, METH_VARARGS, NULL},
	 { "coeffsToZpk", _wrap_coeffsToZpk, METH_VARARGS, NULL},
	 { "zpkToCoeffs", _wrap_zpkToCoeffs, METH_VARARGS, NULL},
	 { "lowPassToLowPass", _wrap_lowPassToLowPass, METH_VARARGS, NULL},
	 { "lowPassToHighPass", _wrap_lowPassToHighPass, METH_VARARGS, NULL},
	 { "lowPassToBandPass", _wrap_lowPassToBandPass, METH_VARARGS, NULL},
	 { "lowPassToBandStop", _wrap_lowPassToBandStop, METH_VARARGS, NULL},
	 { "normalize", _wrap_normalize, METH_VARARGS, NULL},
	 { "bilinear", _wrap_bilinear, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_AOK = {"_p_AOK", "AOK *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioLoader = {"_p_AudioLoader", "AudioLoader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Autocorrelation = {"_p_Autocorrelation", "Autocorrelation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BandFilter = {"_p_BandFilter", "BandFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Bands = {"_p_Bands", "Bands *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BarkBands = {"_p_BarkBands", "BarkBands *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Correlation = {"_p_Correlation", "Correlation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DCT = {"_p_DCT", "DCT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFT = {"_p_FFT", "FFT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTComplex = {"_p_FFTComplex", "FFTComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Filter = {"_p_Filter", "Filter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FrameCutter = {"_p_FrameCutter", "FrameCutter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IFFT = {"_p_IFFT", "IFFT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INMF = {"_p_INMF", "INMF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPC = {"_p_LPC", "LPC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPCResidual = {"_p_LPCResidual", "LPCResidual *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MFCC = {"_p_MFCC", "MFCC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixXC = {"_p_MatrixXC", "MatrixXC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixXI = {"_p_MatrixXI", "MatrixXI *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixXR = {"_p_MatrixXR", "MatrixXR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Meddis = {"_p_Meddis", "Meddis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MelBands = {"_p_MelBands", "MelBands *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NMF = {"_p_NMF", "NMF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OnsetComplex = {"_p_OnsetComplex", "OnsetComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakCOG = {"_p_PeakCOG", "PeakCOG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakDetection = {"_p_PeakDetection", "PeakDetection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakDetectionComplex = {"_p_PeakDetectionComplex", "PeakDetectionComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakInterpolation = {"_p_PeakInterpolation", "PeakInterpolation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakInterpolationComplex = {"_p_PeakInterpolationComplex", "PeakInterpolationComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakSynthesize = {"_p_PeakSynthesize", "PeakSynthesize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PeakTracking = {"_p_PeakTracking", "PeakTracking *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PitchACF = {"_p_PitchACF", "PitchACF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PitchInverseProblem = {"_p_PitchInverseProblem", "PitchInverseProblem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PitchSaliency = {"_p_PitchSaliency", "PitchSaliency *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Real = {"_p_Real", "Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Resample = {"_p_Resample", "Resample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralNoiseSuppression = {"_p_SpectralNoiseSuppression", "SpectralNoiseSuppression *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralODF = {"_p_SpectralODF", "SpectralODF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralReassignment = {"_p_SpectralReassignment", "SpectralReassignment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralWhitening = {"_p_SpectralWhitening", "SpectralWhitening *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unwrap = {"_p_Unwrap", "Unwrap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VoiceActivityDetection = {"_p_VoiceActivityDetection", "VoiceActivityDetection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Window = {"_p_Window", "Window *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "sample_type *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MatrixXR_t = {"_p_std__vectorT_MatrixXR_t", "std::vector< MatrixXR > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AOK,
  &_swigt__p_AudioLoader,
  &_swigt__p_Autocorrelation,
  &_swigt__p_BandFilter,
  &_swigt__p_Bands,
  &_swigt__p_BarkBands,
  &_swigt__p_Correlation,
  &_swigt__p_DCT,
  &_swigt__p_FFT,
  &_swigt__p_FFTComplex,
  &_swigt__p_Filter,
  &_swigt__p_FrameCutter,
  &_swigt__p_IFFT,
  &_swigt__p_INMF,
  &_swigt__p_LPC,
  &_swigt__p_LPCResidual,
  &_swigt__p_MFCC,
  &_swigt__p_MatrixXC,
  &_swigt__p_MatrixXI,
  &_swigt__p_MatrixXR,
  &_swigt__p_Meddis,
  &_swigt__p_MelBands,
  &_swigt__p_NMF,
  &_swigt__p_OnsetComplex,
  &_swigt__p_PeakCOG,
  &_swigt__p_PeakDetection,
  &_swigt__p_PeakDetectionComplex,
  &_swigt__p_PeakInterpolation,
  &_swigt__p_PeakInterpolationComplex,
  &_swigt__p_PeakSynthesize,
  &_swigt__p_PeakTracking,
  &_swigt__p_PitchACF,
  &_swigt__p_PitchInverseProblem,
  &_swigt__p_PitchSaliency,
  &_swigt__p_Real,
  &_swigt__p_Resample,
  &_swigt__p_SpectralNoiseSuppression,
  &_swigt__p_SpectralODF,
  &_swigt__p_SpectralReassignment,
  &_swigt__p_SpectralWhitening,
  &_swigt__p_Unwrap,
  &_swigt__p_VoiceActivityDetection,
  &_swigt__p_Window,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_int16_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_MatrixXR_t,
};

static swig_cast_info _swigc__p_AOK[] = {  {&_swigt__p_AOK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioLoader[] = {  {&_swigt__p_AudioLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Autocorrelation[] = {  {&_swigt__p_Autocorrelation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BandFilter[] = {  {&_swigt__p_BandFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Bands[] = {  {&_swigt__p_Bands, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BarkBands[] = {  {&_swigt__p_BarkBands, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Correlation[] = {  {&_swigt__p_Correlation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DCT[] = {  {&_swigt__p_DCT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFT[] = {  {&_swigt__p_FFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTComplex[] = {  {&_swigt__p_FFTComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filter[] = {  {&_swigt__p_Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FrameCutter[] = {  {&_swigt__p_FrameCutter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IFFT[] = {  {&_swigt__p_IFFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INMF[] = {  {&_swigt__p_INMF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPC[] = {  {&_swigt__p_LPC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPCResidual[] = {  {&_swigt__p_LPCResidual, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFCC[] = {  {&_swigt__p_MFCC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixXC[] = {  {&_swigt__p_MatrixXC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixXI[] = {  {&_swigt__p_MatrixXI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixXR[] = {  {&_swigt__p_MatrixXR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Meddis[] = {  {&_swigt__p_Meddis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MelBands[] = {  {&_swigt__p_MelBands, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NMF[] = {  {&_swigt__p_NMF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OnsetComplex[] = {  {&_swigt__p_OnsetComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakCOG[] = {  {&_swigt__p_PeakCOG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakDetection[] = {  {&_swigt__p_PeakDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakDetectionComplex[] = {  {&_swigt__p_PeakDetectionComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakInterpolation[] = {  {&_swigt__p_PeakInterpolation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakInterpolationComplex[] = {  {&_swigt__p_PeakInterpolationComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakSynthesize[] = {  {&_swigt__p_PeakSynthesize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PeakTracking[] = {  {&_swigt__p_PeakTracking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PitchACF[] = {  {&_swigt__p_PitchACF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PitchInverseProblem[] = {  {&_swigt__p_PitchInverseProblem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PitchSaliency[] = {  {&_swigt__p_PitchSaliency, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Real[] = {  {&_swigt__p_Real, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Resample[] = {  {&_swigt__p_Resample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralNoiseSuppression[] = {  {&_swigt__p_SpectralNoiseSuppression, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralODF[] = {  {&_swigt__p_SpectralODF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralReassignment[] = {  {&_swigt__p_SpectralReassignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralWhitening[] = {  {&_swigt__p_SpectralWhitening, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unwrap[] = {  {&_swigt__p_Unwrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VoiceActivityDetection[] = {  {&_swigt__p_VoiceActivityDetection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Window[] = {  {&_swigt__p_Window, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MatrixXR_t[] = {  {&_swigt__p_std__vectorT_MatrixXR_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AOK,
  _swigc__p_AudioLoader,
  _swigc__p_Autocorrelation,
  _swigc__p_BandFilter,
  _swigc__p_Bands,
  _swigc__p_BarkBands,
  _swigc__p_Correlation,
  _swigc__p_DCT,
  _swigc__p_FFT,
  _swigc__p_FFTComplex,
  _swigc__p_Filter,
  _swigc__p_FrameCutter,
  _swigc__p_IFFT,
  _swigc__p_INMF,
  _swigc__p_LPC,
  _swigc__p_LPCResidual,
  _swigc__p_MFCC,
  _swigc__p_MatrixXC,
  _swigc__p_MatrixXI,
  _swigc__p_MatrixXR,
  _swigc__p_Meddis,
  _swigc__p_MelBands,
  _swigc__p_NMF,
  _swigc__p_OnsetComplex,
  _swigc__p_PeakCOG,
  _swigc__p_PeakDetection,
  _swigc__p_PeakDetectionComplex,
  _swigc__p_PeakInterpolation,
  _swigc__p_PeakInterpolationComplex,
  _swigc__p_PeakSynthesize,
  _swigc__p_PeakTracking,
  _swigc__p_PitchACF,
  _swigc__p_PitchInverseProblem,
  _swigc__p_PitchSaliency,
  _swigc__p_Real,
  _swigc__p_Resample,
  _swigc__p_SpectralNoiseSuppression,
  _swigc__p_SpectralODF,
  _swigc__p_SpectralReassignment,
  _swigc__p_SpectralWhitening,
  _swigc__p_Unwrap,
  _swigc__p_VoiceActivityDetection,
  _swigc__p_Window,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_int16_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_MatrixXR_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "AudioLoader_ALL",SWIG_From_int(static_cast< int >(AudioLoader::ALL)));
  SWIG_Python_SetConstant(d, "AudioLoader_MONOMIX",SWIG_From_int(static_cast< int >(AudioLoader::MONOMIX)));
  SWIG_Python_SetConstant(d, "AudioLoader_LEFT",SWIG_From_int(static_cast< int >(AudioLoader::LEFT)));
  SWIG_Python_SetConstant(d, "AudioLoader_RIGHT",SWIG_From_int(static_cast< int >(AudioLoader::RIGHT)));
  SWIG_Python_SetConstant(d, "DCT_I",SWIG_From_int(static_cast< int >(DCT::I)));
  SWIG_Python_SetConstant(d, "DCT_II",SWIG_From_int(static_cast< int >(DCT::II)));
  SWIG_Python_SetConstant(d, "DCT_III",SWIG_From_int(static_cast< int >(DCT::III)));
  SWIG_Python_SetConstant(d, "DCT_IV",SWIG_From_int(static_cast< int >(DCT::IV)));
  SWIG_Python_SetConstant(d, "DCT_OCTAVE",SWIG_From_int(static_cast< int >(DCT::OCTAVE)));
  SWIG_Python_SetConstant(d, "Window_RECTANGULAR",SWIG_From_int(static_cast< int >(Window::RECTANGULAR)));
  SWIG_Python_SetConstant(d, "Window_HANN",SWIG_From_int(static_cast< int >(Window::HANN)));
  SWIG_Python_SetConstant(d, "Window_HANNING",SWIG_From_int(static_cast< int >(Window::HANNING)));
  SWIG_Python_SetConstant(d, "Window_HAMMING",SWIG_From_int(static_cast< int >(Window::HAMMING)));
  SWIG_Python_SetConstant(d, "Window_COSINE",SWIG_From_int(static_cast< int >(Window::COSINE)));
  SWIG_Python_SetConstant(d, "Window_BLACKMAN",SWIG_From_int(static_cast< int >(Window::BLACKMAN)));
  SWIG_Python_SetConstant(d, "Window_BLACKMANHARRIS",SWIG_From_int(static_cast< int >(Window::BLACKMANHARRIS)));
  SWIG_Python_SetConstant(d, "Window_NUTTALL",SWIG_From_int(static_cast< int >(Window::NUTTALL)));
  SWIG_Python_SetConstant(d, "Window_BLACKMANNUTTALL",SWIG_From_int(static_cast< int >(Window::BLACKMANNUTTALL)));
  SWIG_Python_SetConstant(d, "Window_CUSTOM",SWIG_From_int(static_cast< int >(Window::CUSTOM)));
  SWIG_Python_SetConstant(d, "MelBands_STEVENS",SWIG_From_int(static_cast< int >(MelBands::STEVENS)));
  SWIG_Python_SetConstant(d, "MelBands_FANT",SWIG_From_int(static_cast< int >(MelBands::FANT)));
  SWIG_Python_SetConstant(d, "MelBands_GREENWOOD",SWIG_From_int(static_cast< int >(MelBands::GREENWOOD)));
  SWIG_Python_SetConstant(d, "PeakDetection_NONE",SWIG_From_int(static_cast< int >(PeakDetection::NONE)));
  SWIG_Python_SetConstant(d, "PeakDetection_BYMAGNITUDE",SWIG_From_int(static_cast< int >(PeakDetection::BYMAGNITUDE)));
  SWIG_Python_SetConstant(d, "PeakDetection_BYPOSITION",SWIG_From_int(static_cast< int >(PeakDetection::BYPOSITION)));
  SWIG_Python_SetConstant(d, "PeakDetectionComplex_NONE",SWIG_From_int(static_cast< int >(PeakDetectionComplex::NONE)));
  SWIG_Python_SetConstant(d, "PeakDetectionComplex_BYMAGNITUDE",SWIG_From_int(static_cast< int >(PeakDetectionComplex::BYMAGNITUDE)));
  SWIG_Python_SetConstant(d, "PeakDetectionComplex_BYPOSITION",SWIG_From_int(static_cast< int >(PeakDetectionComplex::BYPOSITION)));
  SWIG_Python_SetConstant(d, "BandFilter_CHEBYSHEVI",SWIG_From_int(static_cast< int >(BandFilter::CHEBYSHEVI)));
  SWIG_Python_SetConstant(d, "BandFilter_CHEBYSHEVII",SWIG_From_int(static_cast< int >(BandFilter::CHEBYSHEVII)));
  SWIG_Python_SetConstant(d, "BandFilter_BUTTERWORTH",SWIG_From_int(static_cast< int >(BandFilter::BUTTERWORTH)));
  SWIG_Python_SetConstant(d, "BandFilter_BESSEL",SWIG_From_int(static_cast< int >(BandFilter::BESSEL)));
  SWIG_Python_SetConstant(d, "BandFilter_LOWPASS",SWIG_From_int(static_cast< int >(BandFilter::LOWPASS)));
  SWIG_Python_SetConstant(d, "BandFilter_HIGHPASS",SWIG_From_int(static_cast< int >(BandFilter::HIGHPASS)));
  SWIG_Python_SetConstant(d, "BandFilter_BANDPASS",SWIG_From_int(static_cast< int >(BandFilter::BANDPASS)));
  SWIG_Python_SetConstant(d, "BandFilter_BANDSTOP",SWIG_From_int(static_cast< int >(BandFilter::BANDSTOP)));
  SWIG_Python_SetConstant(d, "Resample_SINC_BEST_QUALITY",SWIG_From_int(static_cast< int >(Resample::SINC_BEST_QUALITY)));
  SWIG_Python_SetConstant(d, "Resample_SINC_MEDIUM_QUALITY",SWIG_From_int(static_cast< int >(Resample::SINC_MEDIUM_QUALITY)));
  SWIG_Python_SetConstant(d, "Resample_SINC_FASTEST",SWIG_From_int(static_cast< int >(Resample::SINC_FASTEST)));
  SWIG_Python_SetConstant(d, "Resample_ZERO_ORDER_HOLD",SWIG_From_int(static_cast< int >(Resample::ZERO_ORDER_HOLD)));
  SWIG_Python_SetConstant(d, "Resample_LINEAR",SWIG_From_int(static_cast< int >(Resample::LINEAR)));
  SWIG_Python_SetConstant(d, "SpectralODF_FLUX",SWIG_From_int(static_cast< int >(SpectralODF::FLUX)));
  SWIG_Python_SetConstant(d, "SpectralODF_HIGH_FREQUENCY_CONTENT",SWIG_From_int(static_cast< int >(SpectralODF::HIGH_FREQUENCY_CONTENT)));
  SWIG_Python_SetConstant(d, "SpectralODF_PHASE_DEVIATION",SWIG_From_int(static_cast< int >(SpectralODF::PHASE_DEVIATION)));
  SWIG_Python_SetConstant(d, "SpectralODF_WEIGHTED_PHASE_DEVIATION",SWIG_From_int(static_cast< int >(SpectralODF::WEIGHTED_PHASE_DEVIATION)));
  SWIG_Python_SetConstant(d, "SpectralODF_NORM_WEIGHTED_PHASE_DEVIATION",SWIG_From_int(static_cast< int >(SpectralODF::NORM_WEIGHTED_PHASE_DEVIATION)));
  SWIG_Python_SetConstant(d, "SpectralODF_MODIFIED_KULLBACK_LIEBLER",SWIG_From_int(static_cast< int >(SpectralODF::MODIFIED_KULLBACK_LIEBLER)));
  SWIG_Python_SetConstant(d, "SpectralODF_COMPLEX_DOMAIN",SWIG_From_int(static_cast< int >(SpectralODF::COMPLEX_DOMAIN)));
  SWIG_Python_SetConstant(d, "SpectralODF_RECTIFIED_COMPLEX_DOMAIN",SWIG_From_int(static_cast< int >(SpectralODF::RECTIFIED_COMPLEX_DOMAIN)));
  SWIG_Python_SetConstant(d, "SpectralODF_CENTER_OF_GRAVITY",SWIG_From_int(static_cast< int >(SpectralODF::CENTER_OF_GRAVITY)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

