# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _loudia
else:
    import _loudia

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class AudioLoader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ALL = _loudia.AudioLoader_ALL
    MONOMIX = _loudia.AudioLoader_MONOMIX
    LEFT = _loudia.AudioLoader_LEFT
    RIGHT = _loudia.AudioLoader_RIGHT

    def __init__(self, *args):
        _loudia.AudioLoader_swiginit(self, _loudia.new_AudioLoader(*args))
    __swig_destroy__ = _loudia.delete_AudioLoader

    def process(self):
        return _loudia.AudioLoader_process(self)

    def setup(self):
        return _loudia.AudioLoader_setup(self)

    def sampleRate(self):
        return _loudia.AudioLoader_sampleRate(self)

    def channelCount(self):
        return _loudia.AudioLoader_channelCount(self)

    def isFinished(self):
        return _loudia.AudioLoader_isFinished(self)

    def setFilename(self, *args):
        return _loudia.AudioLoader_setFilename(self, *args)

    def filename(self):
        return _loudia.AudioLoader_filename(self)

    def setFrameSize(self, size, callSetup=True):
        return _loudia.AudioLoader_setFrameSize(self, size, callSetup)

    def frameSize(self):
        return _loudia.AudioLoader_frameSize(self)

    def setChannel(self, channel, callSetup=True):
        return _loudia.AudioLoader_setChannel(self, channel, callSetup)

    def channel(self):
        return _loudia.AudioLoader_channel(self)

    def setLoadDuration(self, duration, callSetup=True):
        return _loudia.AudioLoader_setLoadDuration(self, duration, callSetup)

    def loadDuration(self):
        return _loudia.AudioLoader_loadDuration(self)

    def loadProgress(self):
        return _loudia.AudioLoader_loadProgress(self)

    def fileProgress(self):
        return _loudia.AudioLoader_fileProgress(self)

    def currentTime(self):
        return _loudia.AudioLoader_currentTime(self)

    def totalTime(self):
        return _loudia.AudioLoader_totalTime(self)

    def seek(self, time):
        return _loudia.AudioLoader_seek(self, time)

    def finished(self):
        return _loudia.AudioLoader_finished(self)

# Register AudioLoader in _loudia:
_loudia.AudioLoader_swigregister(AudioLoader)

class FrameCutter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxInputSize=1024, frameSize=1024, hopSize=-1, firstSamplePosition=0, defaultValue=0.0):
        _loudia.FrameCutter_swiginit(self, _loudia.new_FrameCutter(maxInputSize, frameSize, hopSize, firstSamplePosition, defaultValue))
    __swig_destroy__ = _loudia.delete_FrameCutter

    def process(self, stream):
        return _loudia.FrameCutter_process(self, stream)

    def setup(self):
        return _loudia.FrameCutter_setup(self)

    def reset(self):
        return _loudia.FrameCutter_reset(self)

    def maxInputSize(self):
        return _loudia.FrameCutter_maxInputSize(self)

    def setMaxInputSize(self, size, callSetup=True):
        return _loudia.FrameCutter_setMaxInputSize(self, size, callSetup)

    def frameSize(self):
        return _loudia.FrameCutter_frameSize(self)

    def setFrameSize(self, size, callSetup=True):
        return _loudia.FrameCutter_setFrameSize(self, size, callSetup)

    def hopSize(self):
        return _loudia.FrameCutter_hopSize(self)

    def setHopSize(self, size, callSetup=True):
        return _loudia.FrameCutter_setHopSize(self, size, callSetup)

    def setFirstSamplePosition(self, position, callSetup=True):
        return _loudia.FrameCutter_setFirstSamplePosition(self, position, callSetup)

    def firstSamplePosition(self):
        return _loudia.FrameCutter_firstSamplePosition(self)

    def maxFrameCount(self):
        return _loudia.FrameCutter_maxFrameCount(self)

# Register FrameCutter in _loudia:
_loudia.FrameCutter_swigregister(FrameCutter)

class Filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.Filter_swiginit(self, _loudia.new_Filter(*args))

    def setup(self):
        return _loudia.Filter_setup(self)

    def reset(self):
        return _loudia.Filter_reset(self)

    def process(self, samples):
        return _loudia.Filter_process(self, samples)

    def a(self):
        return _loudia.Filter_a(self)

    def setA(self, a, callSetup=True):
        return _loudia.Filter_setA(self, a, callSetup)

    def b(self):
        return _loudia.Filter_b(self)

    def setB(self, b, callSetup=True):
        return _loudia.Filter_setB(self, b, callSetup)

    def channelCount(self):
        return _loudia.Filter_channelCount(self)

    def setChannelCount(self, count, callSetup=True):
        return _loudia.Filter_setChannelCount(self, count, callSetup)

    def length(self):
        return _loudia.Filter_length(self)
    __swig_destroy__ = _loudia.delete_Filter

# Register Filter in _loudia:
_loudia.Filter_swigregister(Filter)

class DCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    I = _loudia.DCT_I
    II = _loudia.DCT_II
    III = _loudia.DCT_III
    IV = _loudia.DCT_IV
    OCTAVE = _loudia.DCT_OCTAVE

    def __init__(self, *args):
        _loudia.DCT_swiginit(self, _loudia.new_DCT(*args))
    __swig_destroy__ = _loudia.delete_DCT

    def reset(self):
        return _loudia.DCT_reset(self)

    def setup(self):
        return _loudia.DCT_setup(self)

    def process(self, frames):
        return _loudia.DCT_process(self, frames)

    def dctType(self):
        return _loudia.DCT_dctType(self)

    def setDctType(self, type, callSetup=True):
        return _loudia.DCT_setDctType(self, type, callSetup)

    def inputSize(self):
        return _loudia.DCT_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.DCT_setInputSize(self, size, callSetup)

    def dctSize(self):
        return _loudia.DCT_dctSize(self)

    def setDctSize(self, size, callSetup=True):
        return _loudia.DCT_setDctSize(self, size, callSetup)

# Register DCT in _loudia:
_loudia.DCT_swigregister(DCT)

class Window(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RECTANGULAR = _loudia.Window_RECTANGULAR
    HANN = _loudia.Window_HANN
    HANNING = _loudia.Window_HANNING
    HAMMING = _loudia.Window_HAMMING
    COSINE = _loudia.Window_COSINE
    BLACKMAN = _loudia.Window_BLACKMAN
    BLACKMANHARRIS = _loudia.Window_BLACKMANHARRIS
    NUTTALL = _loudia.Window_NUTTALL
    BLACKMANNUTTALL = _loudia.Window_BLACKMANNUTTALL
    CUSTOM = _loudia.Window_CUSTOM

    def __init__(self, *args):
        _loudia.Window_swiginit(self, _loudia.new_Window(*args))
    __swig_destroy__ = _loudia.delete_Window

    def setup(self):
        return _loudia.Window_setup(self)

    def reset(self):
        return _loudia.Window_reset(self)

    def process(self, *args):
        return _loudia.Window_process(self, *args)

    def inputSize(self):
        return _loudia.Window_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.Window_setInputSize(self, size, callSetup)

    def windowType(self):
        return _loudia.Window_windowType(self)

    def setWindowType(self, type, callSetup=True):
        return _loudia.Window_setWindowType(self, type, callSetup)

    def window(self):
        return _loudia.Window_window(self)

    def setWindow(self, window, callSetup=True):
        return _loudia.Window_setWindow(self, window, callSetup)

# Register Window in _loudia:
_loudia.Window_swigregister(Window)

class MelBands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STEVENS = _loudia.MelBands_STEVENS
    FANT = _loudia.MelBands_FANT
    GREENWOOD = _loudia.MelBands_GREENWOOD

    def __init__(self, *args):
        _loudia.MelBands_swiginit(self, _loudia.new_MelBands(*args))

    def setup(self):
        return _loudia.MelBands_setup(self)

    def reset(self):
        return _loudia.MelBands_reset(self)

    def process(self, spectrums):
        return _loudia.MelBands_process(self, spectrums)

    def weights(self):
        return _loudia.MelBands_weights(self)

    def bandWeights(self, band):
        return _loudia.MelBands_bandWeights(self, band)

    def starts(self):
        return _loudia.MelBands_starts(self)

    def bands(self):
        return _loudia.MelBands_bands(self)

    def centers(self):
        return _loudia.MelBands_centers(self)

    def bandCount(self):
        return _loudia.MelBands_bandCount(self)

    def setBandCount(self, count, callSetup=True):
        return _loudia.MelBands_setBandCount(self, count, callSetup)

    def lowFrequency(self):
        return _loudia.MelBands_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.MelBands_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.MelBands_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.MelBands_setHighFrequency(self, frequency, callSetup)

    def sampleRate(self):
        return _loudia.MelBands_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.MelBands_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.MelBands_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.MelBands_setFftSize(self, size, callSetup)

    def scaleType(self):
        return _loudia.MelBands_scaleType(self)

    def setScaleType(self, type, callSetup=True):
        return _loudia.MelBands_setScaleType(self, type, callSetup)
    __swig_destroy__ = _loudia.delete_MelBands

# Register MelBands in _loudia:
_loudia.MelBands_swigregister(MelBands)

class BarkBands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowBand=0, highBand=23, sampleRate=44100.0, fftSize=1024):
        _loudia.BarkBands_swiginit(self, _loudia.new_BarkBands(lowBand, highBand, sampleRate, fftSize))

    def setup(self):
        return _loudia.BarkBands_setup(self)

    def reset(self):
        return _loudia.BarkBands_reset(self)

    def process(self, spectrums):
        return _loudia.BarkBands_process(self, spectrums)

    def weights(self):
        return _loudia.BarkBands_weights(self)

    def bandWeights(self, band):
        return _loudia.BarkBands_bandWeights(self, band)

    def starts(self):
        return _loudia.BarkBands_starts(self)

    def bands(self):
        return _loudia.BarkBands_bands(self)

    def centers(self):
        return _loudia.BarkBands_centers(self)

    def lowBand(self):
        return _loudia.BarkBands_lowBand(self)

    def setLowBand(self, band, callSetup=True):
        return _loudia.BarkBands_setLowBand(self, band, callSetup)

    def highBand(self):
        return _loudia.BarkBands_highBand(self)

    def setHighBand(self, band, callSetup=True):
        return _loudia.BarkBands_setHighBand(self, band, callSetup)

    def sampleRate(self):
        return _loudia.BarkBands_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.BarkBands_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.BarkBands_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.BarkBands_setFftSize(self, size, callSetup)
    __swig_destroy__ = _loudia.delete_BarkBands

# Register BarkBands in _loudia:
_loudia.BarkBands_swigregister(BarkBands)

class Bands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.Bands_swiginit(self, _loudia.new_Bands(*args))
    __swig_destroy__ = _loudia.delete_Bands

    def process(self, frames):
        return _loudia.Bands_process(self, frames)

    def setup(self):
        return _loudia.Bands_setup(self)

    def reset(self):
        return _loudia.Bands_reset(self)

    def weights(self):
        return _loudia.Bands_weights(self)

    def bandWeights(self, band):
        return _loudia.Bands_bandWeights(self, band)

    def starts(self):
        return _loudia.Bands_starts(self)

    def bands(self):
        return _loudia.Bands_bands(self)

    def setStartsWeights(self, starts, weights, callSetup=True):
        return _loudia.Bands_setStartsWeights(self, starts, weights, callSetup)

# Register Bands in _loudia:
_loudia.Bands_swigregister(Bands)

class FFT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize=1024, zeroPhase=True):
        _loudia.FFT_swiginit(self, _loudia.new_FFT(fftSize, zeroPhase))
    __swig_destroy__ = _loudia.delete_FFT

    def process(self, frames):
        return _loudia.FFT_process(self, frames)

    def setup(self):
        return _loudia.FFT_setup(self)

    def reset(self):
        return _loudia.FFT_reset(self)

    def fftSize(self):
        return _loudia.FFT_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.FFT_setFftSize(self, size, callSetup)

    def zeroPhase(self):
        return _loudia.FFT_zeroPhase(self)

    def setZeroPhase(self, zeroPhase, callSetup=True):
        return _loudia.FFT_setZeroPhase(self, zeroPhase, callSetup)

# Register FFT in _loudia:
_loudia.FFT_swigregister(FFT)

class FFTComplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frameSize, fftSize, zeroPhase=True):
        _loudia.FFTComplex_swiginit(self, _loudia.new_FFTComplex(frameSize, fftSize, zeroPhase))
    __swig_destroy__ = _loudia.delete_FFTComplex

    def process(self, *args):
        return _loudia.FFTComplex_process(self, *args)

    def setup(self):
        return _loudia.FFTComplex_setup(self)

    def reset(self):
        return _loudia.FFTComplex_reset(self)

    def fftSize(self):
        return _loudia.FFTComplex_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.FFTComplex_setFftSize(self, size, callSetup)

    def frameSize(self):
        return _loudia.FFTComplex_frameSize(self)

    def setFrameSize(self, size, callSetup=True):
        return _loudia.FFTComplex_setFrameSize(self, size, callSetup)

    def zeroPhase(self):
        return _loudia.FFTComplex_zeroPhase(self)

    def setZeroPhase(self, zeroPhase, callSetup=True):
        return _loudia.FFTComplex_setZeroPhase(self, zeroPhase, callSetup)

# Register FFTComplex in _loudia:
_loudia.FFTComplex_swigregister(FFTComplex)

class IFFT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize=1024, zeroPhase=True):
        _loudia.IFFT_swiginit(self, _loudia.new_IFFT(fftSize, zeroPhase))
    __swig_destroy__ = _loudia.delete_IFFT

    def process(self, fft):
        return _loudia.IFFT_process(self, fft)

    def setup(self):
        return _loudia.IFFT_setup(self)

    def reset(self):
        return _loudia.IFFT_reset(self)

    def fftSize(self):
        return _loudia.IFFT_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.IFFT_setFftSize(self, size, callSetup)

    def zeroPhase(self):
        return _loudia.IFFT_zeroPhase(self)

    def setZeroPhase(self, zeroPhase, callSetup=True):
        return _loudia.IFFT_setZeroPhase(self, zeroPhase, callSetup)

# Register IFFT in _loudia:
_loudia.IFFT_swigregister(IFFT)

class MFCC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowFrequency=300.0, highFrequency=16000.0, bandCount=40.0, sampleRate=44100.0, fftSize=1024, coefficientCount=13, minSpectrum=1e-10, power=1.0):
        _loudia.MFCC_swiginit(self, _loudia.new_MFCC(lowFrequency, highFrequency, bandCount, sampleRate, fftSize, coefficientCount, minSpectrum, power))
    __swig_destroy__ = _loudia.delete_MFCC

    def reset(self):
        return _loudia.MFCC_reset(self)

    def setup(self):
        return _loudia.MFCC_setup(self)

    def process(self, spectrums):
        return _loudia.MFCC_process(self, spectrums)

    def coefficientCount(self):
        return _loudia.MFCC_coefficientCount(self)

    def setCoefficientCount(self, count, callSetup=True):
        return _loudia.MFCC_setCoefficientCount(self, count, callSetup)

    def bandCount(self):
        return _loudia.MFCC_bandCount(self)

    def setBandCount(self, count, callSetup=True):
        return _loudia.MFCC_setBandCount(self, count, callSetup)

    def lowFrequency(self):
        return _loudia.MFCC_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.MFCC_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.MFCC_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.MFCC_setHighFrequency(self, frequency, callSetup)

    def sampleRate(self):
        return _loudia.MFCC_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.MFCC_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.MFCC_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.MFCC_setFftSize(self, size, callSetup)

    def power(self):
        return _loudia.MFCC_power(self)

    def setPower(self, factor, callSetup=True):
        return _loudia.MFCC_setPower(self, factor, callSetup)

# Register MFCC in _loudia:
_loudia.MFCC_swigregister(MFCC)

class AOK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, windowSize, hopSize, fftSize, normVolume=3.0):
        _loudia.AOK_swiginit(self, _loudia.new_AOK(windowSize, hopSize, fftSize, normVolume))
    __swig_destroy__ = _loudia.delete_AOK

    def setup(self):
        return _loudia.AOK_setup(self)

    def process(self, frames):
        return _loudia.AOK_process(self, frames)

    def reset(self):
        return _loudia.AOK_reset(self)

    def frameSize(self):
        return _loudia.AOK_frameSize(self)

    def fftSize(self):
        return _loudia.AOK_fftSize(self)

# Register AOK in _loudia:
_loudia.AOK_swigregister(AOK)

class Meddis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate, channels, substractSpont=True):
        _loudia.Meddis_swiginit(self, _loudia.new_Meddis(sampleRate, channels, substractSpont))
    __swig_destroy__ = _loudia.delete_Meddis

    def setup(self):
        return _loudia.Meddis_setup(self)

    def process(self, data):
        return _loudia.Meddis_process(self, data)

    def channels(self):
        return _loudia.Meddis_channels(self)

    def sampleRate(self):
        return _loudia.Meddis_sampleRate(self)

    def reset(self):
        return _loudia.Meddis_reset(self)

# Register Meddis in _loudia:
_loudia.Meddis_swigregister(Meddis)

class SpectralReassignment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.SpectralReassignment_swiginit(self, _loudia.new_SpectralReassignment(*args))
    __swig_destroy__ = _loudia.delete_SpectralReassignment

    def process(self, frames):
        return _loudia.SpectralReassignment_process(self, frames)

    def setup(self):
        return _loudia.SpectralReassignment_setup(self)

    def reset(self):
        return _loudia.SpectralReassignment_reset(self)

    def frameSize(self):
        return _loudia.SpectralReassignment_frameSize(self)

    def fftSize(self):
        return _loudia.SpectralReassignment_fftSize(self)

    def windowType(self):
        return _loudia.SpectralReassignment_windowType(self)

# Register SpectralReassignment in _loudia:
_loudia.SpectralReassignment_swigregister(SpectralReassignment)

class PeakDetection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _loudia.PeakDetection_NONE
    BYMAGNITUDE = _loudia.PeakDetection_BYMAGNITUDE
    BYPOSITION = _loudia.PeakDetection_BYPOSITION

    def __init__(self, *args):
        _loudia.PeakDetection_swiginit(self, _loudia.new_PeakDetection(*args))
    __swig_destroy__ = _loudia.delete_PeakDetection

    def reset(self):
        return _loudia.PeakDetection_reset(self)

    def setup(self):
        return _loudia.PeakDetection_setup(self)

    def process(self, frames):
        return _loudia.PeakDetection_process(self, frames)

    def peakCount(self):
        return _loudia.PeakDetection_peakCount(self)

    def setPeakCount(self, count, callSetup=True):
        return _loudia.PeakDetection_setPeakCount(self, count, callSetup)

    def minimumPeakWidth(self):
        return _loudia.PeakDetection_minimumPeakWidth(self)

    def setMinimumPeakWidth(self, width, callSetup=True):
        return _loudia.PeakDetection_setMinimumPeakWidth(self, width, callSetup)

    def candidateCount(self):
        return _loudia.PeakDetection_candidateCount(self)

    def setCandidateCount(self, count, callSetup=True):
        return _loudia.PeakDetection_setCandidateCount(self, count, callSetup)

    def minimumPeakContrast(self):
        return _loudia.PeakDetection_minimumPeakContrast(self)

    def setMinimumPeakContrast(self, contrast, callSetup=True):
        return _loudia.PeakDetection_setMinimumPeakContrast(self, contrast, callSetup)

    def sortMethod(self):
        return _loudia.PeakDetection_sortMethod(self)

    def setSortMethod(self, method, callSetup=True):
        return _loudia.PeakDetection_setSortMethod(self, method, callSetup)

# Register PeakDetection in _loudia:
_loudia.PeakDetection_swigregister(PeakDetection)

class PeakDetectionComplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _loudia.PeakDetectionComplex_NONE
    BYMAGNITUDE = _loudia.PeakDetectionComplex_BYMAGNITUDE
    BYPOSITION = _loudia.PeakDetectionComplex_BYPOSITION

    def __init__(self, *args):
        _loudia.PeakDetectionComplex_swiginit(self, _loudia.new_PeakDetectionComplex(*args))
    __swig_destroy__ = _loudia.delete_PeakDetectionComplex

    def reset(self):
        return _loudia.PeakDetectionComplex_reset(self)

    def setup(self):
        return _loudia.PeakDetectionComplex_setup(self)

    def process(self, frames):
        return _loudia.PeakDetectionComplex_process(self, frames)

    def peakCount(self):
        return _loudia.PeakDetectionComplex_peakCount(self)

    def setPeakCount(self, count, callSetup=True):
        return _loudia.PeakDetectionComplex_setPeakCount(self, count, callSetup)

    def minimumPeakWidth(self):
        return _loudia.PeakDetectionComplex_minimumPeakWidth(self)

    def setMinimumPeakWidth(self, width, callSetup=True):
        return _loudia.PeakDetectionComplex_setMinimumPeakWidth(self, width, callSetup)

    def candidateCount(self):
        return _loudia.PeakDetectionComplex_candidateCount(self)

    def setCandidateCount(self, count, callSetup=True):
        return _loudia.PeakDetectionComplex_setCandidateCount(self, count, callSetup)

    def minimumPeakContrast(self):
        return _loudia.PeakDetectionComplex_minimumPeakContrast(self)

    def setMinimumPeakContrast(self, contrast, callSetup=True):
        return _loudia.PeakDetectionComplex_setMinimumPeakContrast(self, contrast, callSetup)

    def sortMethod(self):
        return _loudia.PeakDetectionComplex_sortMethod(self)

    def setSortMethod(self, method, callSetup=True):
        return _loudia.PeakDetectionComplex_setSortMethod(self, method, callSetup)

# Register PeakDetectionComplex in _loudia:
_loudia.PeakDetectionComplex_swigregister(PeakDetectionComplex)

class PeakCOG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftLength, bandwidth=6):
        _loudia.PeakCOG_swiginit(self, _loudia.new_PeakCOG(fftLength, bandwidth))
    __swig_destroy__ = _loudia.delete_PeakCOG

    def setup(self):
        return _loudia.PeakCOG_setup(self)

    def process(self, fft, peakPos):
        return _loudia.PeakCOG_process(self, fft, peakPos)

    def reset(self):
        return _loudia.PeakCOG_reset(self)

# Register PeakCOG in _loudia:
_loudia.PeakCOG_swigregister(PeakCOG)

class PeakInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _loudia.PeakInterpolation_swiginit(self, _loudia.new_PeakInterpolation())
    __swig_destroy__ = _loudia.delete_PeakInterpolation

    def setup(self):
        return _loudia.PeakInterpolation_setup(self)

    def reset(self):
        return _loudia.PeakInterpolation_reset(self)

    def process(self, frames, peakPositions, peakMagnitudes):
        return _loudia.PeakInterpolation_process(self, frames, peakPositions, peakMagnitudes)

# Register PeakInterpolation in _loudia:
_loudia.PeakInterpolation_swigregister(PeakInterpolation)

class PeakInterpolationComplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _loudia.PeakInterpolationComplex_swiginit(self, _loudia.new_PeakInterpolationComplex())
    __swig_destroy__ = _loudia.delete_PeakInterpolationComplex

    def setup(self):
        return _loudia.PeakInterpolationComplex_setup(self)

    def reset(self):
        return _loudia.PeakInterpolationComplex_reset(self)

    def process(self, frames, peakPositions, peakMagnitudes, peakPhases):
        return _loudia.PeakInterpolationComplex_process(self, frames, peakPositions, peakMagnitudes, peakPhases)

# Register PeakInterpolationComplex in _loudia:
_loudia.PeakInterpolationComplex_swigregister(PeakInterpolationComplex)

class PeakTracking(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, trajectoryCount=20, maximumFrequencyChange=3.0, silentFrameCount=3):
        _loudia.PeakTracking_swiginit(self, _loudia.new_PeakTracking(trajectoryCount, maximumFrequencyChange, silentFrameCount))
    __swig_destroy__ = _loudia.delete_PeakTracking

    def setup(self):
        return _loudia.PeakTracking_setup(self)

    def reset(self):
        return _loudia.PeakTracking_reset(self)

    def process(self, ffts, peakPositions, peakMagnitudes):
        return _loudia.PeakTracking_process(self, ffts, peakPositions, peakMagnitudes)

    def trajectoryCount(self):
        return _loudia.PeakTracking_trajectoryCount(self)

    def setTrajectoryCount(self, count, callSetup=True):
        return _loudia.PeakTracking_setTrajectoryCount(self, count, callSetup)

    def maximumFrequencyChange(self):
        return _loudia.PeakTracking_maximumFrequencyChange(self)

    def setMaximumFrequencyChange(self, change, callSetup=True):
        return _loudia.PeakTracking_setMaximumFrequencyChange(self, change, callSetup)

    def silentFrameCount(self):
        return _loudia.PeakTracking_silentFrameCount(self)

    def setSilentFrameCount(self, count, callSetup=True):
        return _loudia.PeakTracking_setSilentFrameCount(self, count, callSetup)

# Register PeakTracking in _loudia:
_loudia.PeakTracking_swigregister(PeakTracking)

class PeakSynthesize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.PeakSynthesize_swiginit(self, _loudia.new_PeakSynthesize(*args))
    __swig_destroy__ = _loudia.delete_PeakSynthesize

    def setup(self):
        return _loudia.PeakSynthesize_setup(self)

    def process(self, trajPositions, trajMagnitudes):
        return _loudia.PeakSynthesize_process(self, trajPositions, trajMagnitudes)

    def reset(self):
        return _loudia.PeakSynthesize_reset(self)

# Register PeakSynthesize in _loudia:
_loudia.PeakSynthesize_swigregister(PeakSynthesize)

class BandFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CHEBYSHEVI = _loudia.BandFilter_CHEBYSHEVI
    CHEBYSHEVII = _loudia.BandFilter_CHEBYSHEVII
    BUTTERWORTH = _loudia.BandFilter_BUTTERWORTH
    BESSEL = _loudia.BandFilter_BESSEL
    LOWPASS = _loudia.BandFilter_LOWPASS
    HIGHPASS = _loudia.BandFilter_HIGHPASS
    BANDPASS = _loudia.BandFilter_BANDPASS
    BANDSTOP = _loudia.BandFilter_BANDSTOP

    def __init__(self, *args):
        _loudia.BandFilter_swiginit(self, _loudia.new_BandFilter(*args))

    def setup(self):
        return _loudia.BandFilter_setup(self)

    def reset(self):
        return _loudia.BandFilter_reset(self)

    def process(self, samples):
        return _loudia.BandFilter_process(self, samples)

    def a(self):
        return _loudia.BandFilter_a(self)

    def b(self):
        return _loudia.BandFilter_b(self)

    def order(self):
        return _loudia.BandFilter_order(self)

    def setOrder(self, order, callSetup=True):
        return _loudia.BandFilter_setOrder(self, order, callSetup)

    def lowFrequency(self):
        return _loudia.BandFilter_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.BandFilter_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.BandFilter_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.BandFilter_setHighFrequency(self, frequency, callSetup)

    def filterType(self):
        return _loudia.BandFilter_filterType(self)

    def setFilterType(self, type, callSetup=True):
        return _loudia.BandFilter_setFilterType(self, type, callSetup)

    def bandType(self):
        return _loudia.BandFilter_bandType(self)

    def setBandType(self, type, callSetup=True):
        return _loudia.BandFilter_setBandType(self, type, callSetup)

    def passRipple(self):
        return _loudia.BandFilter_passRipple(self)

    def setPassRipple(self, rippleDB, callSetup=True):
        return _loudia.BandFilter_setPassRipple(self, rippleDB, callSetup)

    def stopAttenuation(self):
        return _loudia.BandFilter_stopAttenuation(self)

    def setStopAttenuation(self, attenuationDB, callSetup=True):
        return _loudia.BandFilter_setStopAttenuation(self, attenuationDB, callSetup)
    __swig_destroy__ = _loudia.delete_BandFilter

# Register BandFilter in _loudia:
_loudia.BandFilter_swigregister(BandFilter)

class Unwrap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _loudia.Unwrap_swiginit(self, _loudia.new_Unwrap())
    __swig_destroy__ = _loudia.delete_Unwrap

    def setup(self):
        return _loudia.Unwrap_setup(self)

    def reset(self):
        return _loudia.Unwrap_reset(self)

    def process(self, phases):
        return _loudia.Unwrap_process(self, phases)

# Register Unwrap in _loudia:
_loudia.Unwrap_swigregister(Unwrap)

class LPC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputSize=1024, coefficientCount=15, preEmphasis=0.0):
        _loudia.LPC_swiginit(self, _loudia.new_LPC(inputSize, coefficientCount, preEmphasis))
    __swig_destroy__ = _loudia.delete_LPC

    def setup(self):
        return _loudia.LPC_setup(self)

    def reset(self):
        return _loudia.LPC_reset(self)

    def process(self, frames):
        return _loudia.LPC_process(self, frames)

    def inputSize(self):
        return _loudia.LPC_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.LPC_setInputSize(self, size, callSetup)

    def coefficientCount(self):
        return _loudia.LPC_coefficientCount(self)

    def setCoefficientCount(self, count, callSetup=True):
        return _loudia.LPC_setCoefficientCount(self, count, callSetup)

    def preEmphasis(self):
        return _loudia.LPC_preEmphasis(self)

    def setPreEmphasis(self, coefficient, callSetup=True):
        return _loudia.LPC_setPreEmphasis(self, coefficient, callSetup)

# Register LPC in _loudia:
_loudia.LPC_swigregister(LPC)

class LPCResidual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frameSize):
        _loudia.LPCResidual_swiginit(self, _loudia.new_LPCResidual(frameSize))
    __swig_destroy__ = _loudia.delete_LPCResidual

    def setup(self):
        return _loudia.LPCResidual_setup(self)

    def process(self, frame, lpcCoeffs):
        return _loudia.LPCResidual_process(self, frame, lpcCoeffs)

    def reset(self):
        return _loudia.LPCResidual_reset(self)

# Register LPCResidual in _loudia:
_loudia.LPCResidual_swigregister(LPCResidual)

class NMF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, inputSize=1024, componentCount=3, iterationCount=10, epsilon=1e-9):
        _loudia.NMF_swiginit(self, _loudia.new_NMF(inputSize, componentCount, iterationCount, epsilon))
    __swig_destroy__ = _loudia.delete_NMF

    def reset(self):
        return _loudia.NMF_reset(self)

    def setup(self):
        return _loudia.NMF_setup(self)

    def process(self, frames):
        return _loudia.NMF_process(self, frames)

    def inputSize(self):
        return _loudia.NMF_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.NMF_setInputSize(self, size, callSetup)

    def componentCount(self):
        return _loudia.NMF_componentCount(self)

    def setComponentCount(self, count, callSetup=True):
        return _loudia.NMF_setComponentCount(self, count, callSetup)

    def iterationCount(self):
        return _loudia.NMF_iterationCount(self)

    def setIterationCount(self, count, callSetup=True):
        return _loudia.NMF_setIterationCount(self, count, callSetup)

    def epsilon(self):
        return _loudia.NMF_epsilon(self)

    def setEpsilon(self, epsilon, callSetup=True):
        return _loudia.NMF_setEpsilon(self, epsilon, callSetup)

# Register NMF in _loudia:
_loudia.NMF_swigregister(NMF)

class INMF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize, numComponents, numPast, pastCoeff, maxIterations=10, eps=1e-9):
        _loudia.INMF_swiginit(self, _loudia.new_INMF(fftSize, numComponents, numPast, pastCoeff, maxIterations, eps))
    __swig_destroy__ = _loudia.delete_INMF

    def setup(self):
        return _loudia.INMF_setup(self)

    def process(self, v):
        return _loudia.INMF_process(self, v)

    def reset(self):
        return _loudia.INMF_reset(self)

# Register INMF in _loudia:
_loudia.INMF_swigregister(INMF)

class Resample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SINC_BEST_QUALITY = _loudia.Resample_SINC_BEST_QUALITY
    SINC_MEDIUM_QUALITY = _loudia.Resample_SINC_MEDIUM_QUALITY
    SINC_FASTEST = _loudia.Resample_SINC_FASTEST
    ZERO_ORDER_HOLD = _loudia.Resample_ZERO_ORDER_HOLD
    LINEAR = _loudia.Resample_LINEAR

    def __init__(self, *args):
        _loudia.Resample_swiginit(self, _loudia.new_Resample(*args))
    __swig_destroy__ = _loudia.delete_Resample

    def process(self, frames):
        return _loudia.Resample_process(self, frames)

    def setup(self):
        return _loudia.Resample_setup(self)

    def reset(self):
        return _loudia.Resample_reset(self)

    def inputSize(self):
        return _loudia.Resample_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.Resample_setInputSize(self, size, callSetup)

    def outputSize(self):
        return _loudia.Resample_outputSize(self)

    def setOutputSize(self, size, callSetup=True):
        return _loudia.Resample_setOutputSize(self, size, callSetup)

    def resamplingRatio(self):
        return _loudia.Resample_resamplingRatio(self)

    def setResamplingRatio(self, ratio, callSetup=True):
        return _loudia.Resample_setResamplingRatio(self, ratio, callSetup)

    def resamplingMethod(self):
        return _loudia.Resample_resamplingMethod(self)

    def setResamplingMethod(self, method, callSetup=True):
        return _loudia.Resample_setResamplingMethod(self, method, callSetup)

# Register Resample in _loudia:
_loudia.Resample_swigregister(Resample)

class Correlation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.Correlation_swiginit(self, _loudia.new_Correlation(*args))
    __swig_destroy__ = _loudia.delete_Correlation

    def setup(self):
        return _loudia.Correlation_setup(self)

    def reset(self):
        return _loudia.Correlation_reset(self)

    def process(self, framesA, framesB):
        return _loudia.Correlation_process(self, framesA, framesB)

    def inputSizeA(self):
        return _loudia.Correlation_inputSizeA(self)

    def setInputSizeA(self, size, callSetup=True):
        return _loudia.Correlation_setInputSizeA(self, size, callSetup)

    def inputSizeB(self):
        return _loudia.Correlation_inputSizeB(self)

    def setInputSizeB(self, size, callSetup=True):
        return _loudia.Correlation_setInputSizeB(self, size, callSetup)

    def minLag(self):
        return _loudia.Correlation_minLag(self)

    def setMinLag(self, lag, callSetup=True):
        return _loudia.Correlation_setMinLag(self, lag, callSetup)

    def maxLag(self):
        return _loudia.Correlation_maxLag(self)

    def setMaxLag(self, lag, callSetup=True):
        return _loudia.Correlation_setMaxLag(self, lag, callSetup)

    def useFft(self):
        return _loudia.Correlation_useFft(self)

    def setUseFft(self, useFft, callSetup=True):
        return _loudia.Correlation_setUseFft(self, useFft, callSetup)

# Register Correlation in _loudia:
_loudia.Correlation_swigregister(Correlation)

class Autocorrelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.Autocorrelation_swiginit(self, _loudia.new_Autocorrelation(*args))
    __swig_destroy__ = _loudia.delete_Autocorrelation

    def setup(self):
        return _loudia.Autocorrelation_setup(self)

    def reset(self):
        return _loudia.Autocorrelation_reset(self)

    def process(self, frames):
        return _loudia.Autocorrelation_process(self, frames)

    def inputSize(self):
        return _loudia.Autocorrelation_inputSize(self)

    def setInputSize(self, size, callSetup=True):
        return _loudia.Autocorrelation_setInputSize(self, size, callSetup)

    def minLag(self):
        return _loudia.Autocorrelation_minLag(self)

    def setMinLag(self, lag, callSetup=True):
        return _loudia.Autocorrelation_setMinLag(self, lag, callSetup)

    def maxLag(self):
        return _loudia.Autocorrelation_maxLag(self)

    def setMaxLag(self, lag, callSetup=True):
        return _loudia.Autocorrelation_setMaxLag(self, lag, callSetup)

    def useFft(self):
        return _loudia.Autocorrelation_useFft(self)

    def setUseFft(self, useFft, callSetup=True):
        return _loudia.Autocorrelation_setUseFft(self, useFft, callSetup)

# Register Autocorrelation in _loudia:
_loudia.Autocorrelation_swigregister(Autocorrelation)

class SpectralNoiseSuppression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize=1024, lowFrequency=50.0, highFrequency=6000.0, sampleRate=44100.0):
        _loudia.SpectralNoiseSuppression_swiginit(self, _loudia.new_SpectralNoiseSuppression(fftSize, lowFrequency, highFrequency, sampleRate))
    __swig_destroy__ = _loudia.delete_SpectralNoiseSuppression

    def setup(self):
        return _loudia.SpectralNoiseSuppression_setup(self)

    def reset(self):
        return _loudia.SpectralNoiseSuppression_reset(self)

    def process(self, spectrums):
        return _loudia.SpectralNoiseSuppression_process(self, spectrums)

    def lowFrequency(self):
        return _loudia.SpectralNoiseSuppression_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.SpectralNoiseSuppression_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.SpectralNoiseSuppression_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.SpectralNoiseSuppression_setHighFrequency(self, frequency, callSetup)

    def sampleRate(self):
        return _loudia.SpectralNoiseSuppression_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.SpectralNoiseSuppression_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.SpectralNoiseSuppression_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.SpectralNoiseSuppression_setFftSize(self, size, callSetup)

# Register SpectralNoiseSuppression in _loudia:
_loudia.SpectralNoiseSuppression_swigregister(SpectralNoiseSuppression)

class SpectralWhitening(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.SpectralWhitening_swiginit(self, _loudia.new_SpectralWhitening(*args))
    __swig_destroy__ = _loudia.delete_SpectralWhitening

    def setup(self):
        return _loudia.SpectralWhitening_setup(self)

    def reset(self):
        return _loudia.SpectralWhitening_reset(self)

    def process(self, spectrums):
        return _loudia.SpectralWhitening_process(self, spectrums)

    def bandCount(self):
        return _loudia.SpectralWhitening_bandCount(self)

    def setBandCount(self, count, callSetup=True):
        return _loudia.SpectralWhitening_setBandCount(self, count, callSetup)

    def lowFrequency(self):
        return _loudia.SpectralWhitening_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.SpectralWhitening_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.SpectralWhitening_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.SpectralWhitening_setHighFrequency(self, frequency, callSetup)

    def sampleRate(self):
        return _loudia.SpectralWhitening_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.SpectralWhitening_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.SpectralWhitening_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.SpectralWhitening_setFftSize(self, size, callSetup)

    def scaleType(self):
        return _loudia.SpectralWhitening_scaleType(self)

    def setScaleType(self, type, callSetup=True):
        return _loudia.SpectralWhitening_setScaleType(self, type, callSetup)

    def compressionFactor(self):
        return _loudia.SpectralWhitening_compressionFactor(self)

    def setCompressionFactor(self, factor, callSetup=True):
        return _loudia.SpectralWhitening_setCompressionFactor(self, factor, callSetup)

# Register SpectralWhitening in _loudia:
_loudia.SpectralWhitening_swigregister(SpectralWhitening)

class SpectralODF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FLUX = _loudia.SpectralODF_FLUX
    HIGH_FREQUENCY_CONTENT = _loudia.SpectralODF_HIGH_FREQUENCY_CONTENT
    PHASE_DEVIATION = _loudia.SpectralODF_PHASE_DEVIATION
    WEIGHTED_PHASE_DEVIATION = _loudia.SpectralODF_WEIGHTED_PHASE_DEVIATION
    NORM_WEIGHTED_PHASE_DEVIATION = _loudia.SpectralODF_NORM_WEIGHTED_PHASE_DEVIATION
    MODIFIED_KULLBACK_LIEBLER = _loudia.SpectralODF_MODIFIED_KULLBACK_LIEBLER
    COMPLEX_DOMAIN = _loudia.SpectralODF_COMPLEX_DOMAIN
    RECTIFIED_COMPLEX_DOMAIN = _loudia.SpectralODF_RECTIFIED_COMPLEX_DOMAIN
    CENTER_OF_GRAVITY = _loudia.SpectralODF_CENTER_OF_GRAVITY

    def __init__(self, *args):
        _loudia.SpectralODF_swiginit(self, _loudia.new_SpectralODF(*args))
    __swig_destroy__ = _loudia.delete_SpectralODF

    def setup(self):
        return _loudia.SpectralODF_setup(self)

    def reset(self):
        return _loudia.SpectralODF_reset(self)

    def process(self, ffts):
        return _loudia.SpectralODF_process(self, ffts)

    def odfMethod(self):
        return _loudia.SpectralODF_odfMethod(self)

    def setOdfMethod(self, method, callSetup=True):
        return _loudia.SpectralODF_setOdfMethod(self, method, callSetup)

# Register SpectralODF in _loudia:
_loudia.SpectralODF_swigregister(SpectralODF)

class PitchSaliency(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize, f0, f1, sampleRate=1.0, fPrec=0.01, numHarmonics=5):
        _loudia.PitchSaliency_swiginit(self, _loudia.new_PitchSaliency(fftSize, f0, f1, sampleRate, fPrec, numHarmonics))
    __swig_destroy__ = _loudia.delete_PitchSaliency

    def setup(self):
        return _loudia.PitchSaliency_setup(self)

    def process(self, spectrum):
        return _loudia.PitchSaliency_process(self, spectrum)

    def reset(self):
        return _loudia.PitchSaliency_reset(self)

# Register PitchSaliency in _loudia:
_loudia.PitchSaliency_swigregister(PitchSaliency)

class PitchACF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize=1024, sampleRate=1.0, minimumPeakWidth=6, peakCandidateCount=10):
        _loudia.PitchACF_swiginit(self, _loudia.new_PitchACF(fftSize, sampleRate, minimumPeakWidth, peakCandidateCount))
    __swig_destroy__ = _loudia.delete_PitchACF

    def setup(self):
        return _loudia.PitchACF_setup(self)

    def reset(self):
        return _loudia.PitchACF_reset(self)

    def process(self, spectrums):
        return _loudia.PitchACF_process(self, spectrums)

    def fftSize(self):
        return _loudia.PitchACF_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.PitchACF_setFftSize(self, size, callSetup)

    def minimumPeakWidth(self):
        return _loudia.PitchACF_minimumPeakWidth(self)

    def setMinimumPeakWidth(self, width, callSetup=True):
        return _loudia.PitchACF_setMinimumPeakWidth(self, width, callSetup)

    def peakCandidateCount(self):
        return _loudia.PitchACF_peakCandidateCount(self)

    def setPeakCandidateCount(self, count, callSetup=True):
        return _loudia.PitchACF_setPeakCandidateCount(self, count, callSetup)

    def sampleRate(self):
        return _loudia.PitchACF_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.PitchACF_setSampleRate(self, frequency, callSetup)

# Register PitchACF in _loudia:
_loudia.PitchACF_swigregister(PitchACF)

class PitchInverseProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fftSize=1024, lowFrequency=50.0, highFrequency=2100.0, sampleRate=44100.0, pitchCount=5, harmonicCount=10, frequencyCandidateCount=-1, peakWidth=8):
        _loudia.PitchInverseProblem_swiginit(self, _loudia.new_PitchInverseProblem(fftSize, lowFrequency, highFrequency, sampleRate, pitchCount, harmonicCount, frequencyCandidateCount, peakWidth))
    __swig_destroy__ = _loudia.delete_PitchInverseProblem

    def reset(self):
        return _loudia.PitchInverseProblem_reset(self)

    def setup(self):
        return _loudia.PitchInverseProblem_setup(self)

    def process(self, spectrum):
        return _loudia.PitchInverseProblem_process(self, spectrum)

    def projectionMatrix(self):
        return _loudia.PitchInverseProblem_projectionMatrix(self)

    def lowFrequency(self):
        return _loudia.PitchInverseProblem_lowFrequency(self)

    def setLowFrequency(self, frequency, callSetup=True):
        return _loudia.PitchInverseProblem_setLowFrequency(self, frequency, callSetup)

    def highFrequency(self):
        return _loudia.PitchInverseProblem_highFrequency(self)

    def setHighFrequency(self, frequency, callSetup=True):
        return _loudia.PitchInverseProblem_setHighFrequency(self, frequency, callSetup)

    def sampleRate(self):
        return _loudia.PitchInverseProblem_sampleRate(self)

    def setSampleRate(self, frequency, callSetup=True):
        return _loudia.PitchInverseProblem_setSampleRate(self, frequency, callSetup)

    def fftSize(self):
        return _loudia.PitchInverseProblem_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.PitchInverseProblem_setFftSize(self, size, callSetup)

    def frequencyCandidateCount(self):
        return _loudia.PitchInverseProblem_frequencyCandidateCount(self)

    def setFrequencyCandidateCount(self, count, callSetup=True):
        return _loudia.PitchInverseProblem_setFrequencyCandidateCount(self, count, callSetup)

    def peakWidth(self):
        return _loudia.PitchInverseProblem_peakWidth(self)

    def setPeakWidth(self, width, callSetup=True):
        return _loudia.PitchInverseProblem_setPeakWidth(self, width, callSetup)

    def pitchCount(self):
        return _loudia.PitchInverseProblem_pitchCount(self)

    def setPitchCount(self, count, callSetup=True):
        return _loudia.PitchInverseProblem_setPitchCount(self, count, callSetup)

    def harmonicCount(self):
        return _loudia.PitchInverseProblem_harmonicCount(self)

    def setHarmonicCount(self, count, callSetup=True):
        return _loudia.PitchInverseProblem_setHarmonicCount(self, count, callSetup)

# Register PitchInverseProblem in _loudia:
_loudia.PitchInverseProblem_swigregister(PitchInverseProblem)

class VoiceActivityDetection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lowBand=4, highBand=16, sampleRate=44100, fftSize=1024, memorySize=12):
        _loudia.VoiceActivityDetection_swiginit(self, _loudia.new_VoiceActivityDetection(lowBand, highBand, sampleRate, fftSize, memorySize))
    __swig_destroy__ = _loudia.delete_VoiceActivityDetection

    def process(self, frames):
        return _loudia.VoiceActivityDetection_process(self, frames)

    def setup(self):
        return _loudia.VoiceActivityDetection_setup(self)

    def reset(self):
        return _loudia.VoiceActivityDetection_reset(self)

    def lowBand(self):
        return _loudia.VoiceActivityDetection_lowBand(self)

    def setLowBand(self, lowBand, callSetup=True):
        return _loudia.VoiceActivityDetection_setLowBand(self, lowBand, callSetup)

    def highBand(self):
        return _loudia.VoiceActivityDetection_highBand(self)

    def setHighBand(self, highBand, callSetup=True):
        return _loudia.VoiceActivityDetection_setHighBand(self, highBand, callSetup)

    def sampleRate(self):
        return _loudia.VoiceActivityDetection_sampleRate(self)

    def setSampleRate(self, sampleRate, callSetup=True):
        return _loudia.VoiceActivityDetection_setSampleRate(self, sampleRate, callSetup)

    def memorySize(self):
        return _loudia.VoiceActivityDetection_memorySize(self)

    def setMemorySize(self, memorySize, callSetup=True):
        return _loudia.VoiceActivityDetection_setMemorySize(self, memorySize, callSetup)

    def fftSize(self):
        return _loudia.VoiceActivityDetection_fftSize(self)

    def setFftSize(self, size, callSetup=True):
        return _loudia.VoiceActivityDetection_setFftSize(self, size, callSetup)

# Register VoiceActivityDetection in _loudia:
_loudia.VoiceActivityDetection_swigregister(VoiceActivityDetection)

class OnsetComplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _loudia.OnsetComplex_swiginit(self, _loudia.new_OnsetComplex(*args))
    __swig_destroy__ = _loudia.delete_OnsetComplex

    def setup(self):
        return _loudia.OnsetComplex_setup(self)

    def process(self, samples):
        return _loudia.OnsetComplex_process(self, samples)

    def reset(self):
        return _loudia.OnsetComplex_reset(self)

# Register OnsetComplex in _loudia:
_loudia.OnsetComplex_swigregister(OnsetComplex)


def linearToMelGreenwood1990(linearFreq):
    return _loudia.linearToMelGreenwood1990(linearFreq)

def melToLinearGreenwood1990(melFreq):
    return _loudia.melToLinearGreenwood1990(melFreq)

def linearToMelMatrixGreenwood1990(linearFreq):
    return _loudia.linearToMelMatrixGreenwood1990(linearFreq)

def melToLinearMatrixGreenwood1990(melFreq):
    return _loudia.melToLinearMatrixGreenwood1990(melFreq)

def linearToMelStevens1937(linearFreq):
    return _loudia.linearToMelStevens1937(linearFreq)

def melToLinearStevens1937(melFreq):
    return _loudia.melToLinearStevens1937(melFreq)

def linearToMelMatrixStevens1937(linearFreq):
    return _loudia.linearToMelMatrixStevens1937(linearFreq)

def melToLinearMatrixStevens1937(melFreq):
    return _loudia.melToLinearMatrixStevens1937(melFreq)

def linearToMelFant1968(linearFreq):
    return _loudia.linearToMelFant1968(linearFreq)

def melToLinearFant1968(melFreq):
    return _loudia.melToLinearFant1968(melFreq)

def linearToMelMatrixFant1968(linearFreq):
    return _loudia.linearToMelMatrixFant1968(linearFreq)

def melToLinearMatrixFant1968(melFreq):
    return _loudia.melToLinearMatrixFant1968(melFreq)

def roots(poly):
    return _loudia.roots(poly)

def poly(roots):
    return _loudia.poly(roots)

def convolve(*args):
    return _loudia.convolve(*args)

def correlate(*args):
    return _loudia.correlate(*args)

def autocorrelate(*args):
    return _loudia.autocorrelate(*args)

def reverseCols(*args):
    return _loudia.reverseCols(*args)

def rowCumsum():
    return _loudia.rowCumsum()

def colCumsum():
    return _loudia.colCumsum()

def rowShift(num):
    return _loudia.rowShift(num)

def colShift(num):
    return _loudia.colShift(num)

def range(*args):
    return _loudia.range(*args)

def polar(mag, phase):
    return _loudia.polar(mag, phase)

def combination(N, k):
    return _loudia.combination(N, k)

def asinc(M, omega):
    return _loudia.asinc(M, omega)

def raisedCosTransform(*args):
    return _loudia.raisedCosTransform(*args)

def hannTransform(*args):
    return _loudia.hannTransform(*args)

def hammingTransform(*args):
    return _loudia.hammingTransform(*args)

def dbToMag(db):
    return _loudia.dbToMag(db)

def magToDb(mag, minMag=0.0001):
    return _loudia.magToDb(mag, minMag)

def unwrap(phases):
    return _loudia.unwrap(phases)

def freqz(*args):
    return _loudia.freqz(*args)

def derivate(a):
    return _loudia.derivate(a)

def nextPowerOf2(a, factor=0):
    return _loudia.nextPowerOf2(a, factor)

def gaussian(*args):
    return _loudia.gaussian(*args)

def pseudoInverse(a, epsilon=1e-6):
    return _loudia.pseudoInverse(a, epsilon)

def chebyshev1(order, rippleDB, channels):
    return _loudia.chebyshev1(order, rippleDB, channels)

def chebyshev2(order, rippleDB, channels):
    return _loudia.chebyshev2(order, rippleDB, channels)

def butterworth(order, channels):
    return _loudia.butterworth(order, channels)

def bessel(order, channels):
    return _loudia.bessel(order, channels)

def coeffsToZpk(b, a):
    return _loudia.coeffsToZpk(b, a)

def zpkToCoeffs(zeros, poles, gain):
    return _loudia.zpkToCoeffs(zeros, poles, gain)

def lowPassToLowPass(b, a, freq):
    return _loudia.lowPassToLowPass(b, a, freq)

def lowPassToHighPass(b, a, freq):
    return _loudia.lowPassToHighPass(b, a, freq)

def lowPassToBandPass(b, a, freq, freqStop):
    return _loudia.lowPassToBandPass(b, a, freq, freqStop)

def lowPassToBandStop(b, a, freq, freqStop):
    return _loudia.lowPassToBandStop(b, a, freq, freqStop)

def normalize(b, a):
    return _loudia.normalize(b, a)

def bilinear(b, a, fs):
    return _loudia.bilinear(b, a, fs)


