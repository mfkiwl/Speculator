# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nanosnap
else:
    import _nanosnap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def rfft(*args):
    return _nanosnap.rfft(*args)

def ifft(input, ncolumns, nrows, n, output):
    return _nanosnap.ifft(input, ncolumns, nrows, n, output)

def stft(signal, nsamples, n_fft, hop_length, win_length, output, center=True):
    return _nanosnap.stft(signal, nsamples, n_fft, hop_length, win_length, output, center)

def istft(stft, ncolumns, nrows, hop_length, win_length, output, center=True):
    return _nanosnap.istft(stft, ncolumns, nrows, hop_length, win_length, output, center)

def pad_reflect(input, n, pad_width_before, pad_width_after, output):
    return _nanosnap.pad_reflect(input, n, pad_width_before, pad_width_after, output)

def pad_constant(input, n, pad_width_before, pad_width_after, output, pad_constant_value=0.0):
    return _nanosnap.pad_constant(input, n, pad_width_before, pad_width_after, output, pad_constant_value)

def reshape_with_strides(x, n, shape, strides, output):
    return _nanosnap.reshape_with_strides(x, n, shape, strides, output)

def medfilt1(x, n, k, y, include_nan=False, padding=True):
    return _nanosnap.medfilt1(x, n, k, y, include_nan, padding)

def lfilter(b, nb, a, na, x, nx, mx):
    return _nanosnap.lfilter(b, nb, a, na, x, nx, mx)

def convolve(a, n, v, m, output, mode):
    return _nanosnap.convolve(a, n, v, m, output, mode)

def window_hann(m, symmetric=True):
    return _nanosnap.window_hann(m, symmetric)

def get_window(window_type, nx, output, periodic=True):
    return _nanosnap.get_window(window_type, nx, output, periodic)

def random_uniform(lowval, highval, n, seed):
    return _nanosnap.random_uniform(lowval, highval, n, seed)

def random_normal(mean, stddev, n, seed):
    return _nanosnap.random_normal(mean, stddev, n, seed)

def random_shuffle(*args):
    return _nanosnap.random_shuffle(*args)

def wav_read(filename, rate, dtype, channels, samples, data, err):
    return _nanosnap.wav_read(filename, rate, dtype, channels, samples, data, err)

def wav_write(filename, rate, dtype, channels, samples, data, err):
    return _nanosnap.wav_write(filename, rate, dtype, channels, samples, data, err)

def fIdentityWindowingFunction(n):
    return _nanosnap.fIdentityWindowingFunction(n)

def lifter(cepstra, nframes, ncoeffs, output, L=22):
    return _nanosnap.lifter(cepstra, nframes, ncoeffs, output, L)

def mfcc(signal, sig_len, samplerate, winlen, winstep, ncep, nfilt, nfft, low_freq, high_freq, preemph, cep_lifter, append_energy, winfunc, mfcc):
    return _nanosnap.mfcc(signal, sig_len, samplerate, winlen, winstep, ncep, nfilt, nfft, low_freq, high_freq, preemph, cep_lifter, append_energy, winfunc, mfcc)

def fbank(signal, nframes, samplerate, winlen, winstep, winfunc, nfilt, nfft, lowfreq, highfreq, preemph, features, energies):
    return _nanosnap.fbank(signal, nframes, samplerate, winlen, winstep, winfunc, nfilt, nfft, lowfreq, highfreq, preemph, features, energies)

def logfbank(signal, nframes, samplerate, winlen, winstep, winfunc, nfilt, nfft, lowfreq, highfreq, preemph, features, energies):
    return _nanosnap.logfbank(signal, nframes, samplerate, winlen, winstep, winfunc, nfilt, nfft, lowfreq, highfreq, preemph, features, energies)

def ssc(signal, sig_len, samplerate, winlen, winstep, nfilt, nfft, lowfreq, highfreq, preemph, winfunc, features):
    return _nanosnap.ssc(signal, sig_len, samplerate, winlen, winstep, nfilt, nfft, lowfreq, highfreq, preemph, winfunc, features)

def calculate_nfft(sample_rate, winlen):
    return _nanosnap.calculate_nfft(sample_rate, winlen)

def mel_filter(sample_rate, n_fft, M, n_mel=128, fmin=0.0, fmax=-1.0, htk=False, norm=True):
    return _nanosnap.mel_filter(sample_rate, n_fft, M, n_mel, fmin, fmax, htk, norm)

def loadtxt(filename, values, n, m, err):
    return _nanosnap.loadtxt(filename, values, n, m, err)

def savetxt(filename, values, n, m, err):
    return _nanosnap.savetxt(filename, values, n, m, err)

def resize_bilinear(src, src_width, src_width_stride, src_height, channels, dst_width, dst_width_stride, dst_height, dst):
    return _nanosnap.resize_bilinear(src, src_width, src_width_stride, src_height, channels, dst_width, dst_width_stride, dst_height, dst)

def imread(filename, image, width, height, channels, srgb_to_linear=True):
    return _nanosnap.imread(filename, image, width, height, channels, srgb_to_linear)

def imsave(filename, image, width, height, channels, linear_to_srgb=True):
    return _nanosnap.imsave(filename, image, width, height, channels, linear_to_srgb)


