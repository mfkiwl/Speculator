openBliSSART drum beat demonstrator
===================================


This directory contains the files that are required to perform drum beat 
separation from popular music using openBliSSART. It includes:

- a component database (db / storage),
- the configuration for classification (etc).

A working installation of openBliSSART is required (see the INSTALL file in 
the top-level source directory for instructions).

Copy the directories "db", "etc", and "storage" into your openBliSSART
installation directory (backup them if they already exist).

The directory "wav" contains a set of short WAV extracts from popular music.
You can use these to test the drum beat separation with various parameters.
Some of them correspond to the test cases from
http://www.cs.tut.fi/~heln/demonstrations/NMF_SVM_demonstrations.html to allow
comparison with that study.

We provide short (< 10 seconds, and hence royalty-free) excerpts of the
following pieces:
- "Bolero" by Maurice Ravel
- "Clocks" by Coldplay
- "A Little Less Conversation" by Elvis vs. JXL
- "Enter Sandman" by Metallica
- "Hotel California" by The Eagles
- "Like A Virgin" by Madonna
- "Money for Nothing" by Dire Straits
- "Rock DJ" by Robbie Williams
- "Sultans of Swing" by Dire Straits
- "Why Does My Heart Feel So Bad" by Moby
- "Tempo Di Estate" by jazz trio Durham, Conte, Farao

These represent a good spectrum of music, with and without vocals, and include
challenging tasks for drum beat separation such as cowbells, synthetic
percussion, distorted guitars etc.

You can also try the demonstrator on your own music files. Besides WAV, also
OGG and FLAC formats are supported. MP3 may work, depending on the version of
SDL_sound that you are using. If you encounter "empty" output files (i.e. no
sound) when using MP3 input, this is probably due problems with SDL_sound's MP3
implementation, and can be solved by decoding to WAV format first (e.g. using
mpg123).

Open a command line window and change to the openBliSSART "bin" directory. You
may try the following commands (use "./septool" under Unix):

septool -v -l9 <file.wav>

This performs a "default" drum beat separation process which decomposes the
signal into 20 components, classifies them as drum or harmonic, and creates two
WAV files (file_Drum.wav and file_Harmonic.wav) in the same directory as the
original WAV file. The -v option tells the tool not to write anything to the
database ("volatile" mode), and "-l9" is the database ID of the training set
used for drum/harmonic classification.

You can try to adjust the number of NMF components by using the -c option. Try,
for once, 30 components:

septool -v -l9 -c30 <file.wav>

and compare the result. Try to increase the components so, say, 40 or 50.

openBliSSART also features stereophonic subtraction as a preprocessing step.
Due the the recording setting, often drum beats and harmonic sounds occur in
one channel of stereophonic music more than in the other. To this end, use the
"--reduce-mids" option of the septool, and a stereophonic file like 
"demo\wav\tempo.wav":

septool -v -l9 -c30 --reduce-mids <file.wav>

As NMF is initialized randomly, results may vary from execution to execution,
so you can try the same command several times and listen to the results.

Next, you can use supervised NMF where some of the components are initialized
with drum sounds. Issue the following command:

septool -v -l9 -c40 -I7231..7250 -P <file.wav>

The "-I7231..7250" tells the separation tool the IDs of the components in the
database that should be used for initialization. -P keeps the spectrum of these
components constant.

It makes sense to automatically assign the initialized drum components to the 
drum class, regardless of the classifier output. This can be achieved with the
option -L1:

septool -v -l9 -c40 -I7231..7250 -P -L1 <file.wav>

Finally, you can also adjust the features which are used for component
classification. To this end, edit the file "etc/blissart.properties" with a
text editor. For once, you can try a classification based on MFCCs only by
deleting the lines corresponding to feature extraction (starting with
"blissart.features"), or by setting the option value to "false". (The default
is "true" for MFCCs and "false" for all other features). Then you can use
either of the above commands again.

====

openBliSSART speaker separation demo
====================================

This is a demo of supervised speaker separation using NMF.  It requires wave
files from the TIMIT database which cannot be distributed for copyright
reasons.

Instructions:

- Copy TIMIT files from speakers dr1_m_cpm0 and dr1_f_aks0 in the openBliSSART
  "bin" directory.
- Copy the shell script speaker_separation_timit.sh in the same directory.
- Execute speaker_separation_timit.sh.
