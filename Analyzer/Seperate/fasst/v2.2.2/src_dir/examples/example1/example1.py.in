#!/usr/bin/python
#
# This is an example of script for source separation of 3 tracks (drums, voice 
# and piano) from an instantaneous mixture.
# 
# Parameters used to initialize FASST in this example:
# * Mixture type : instantaneous.
# * Time-Frequency representation : STFT with 1024 frequency bins.
# * Source paramater Wex : Normally distributed random matrix (default init).
# * Source paramater Hex : Normally distributed random matrix (default init).
# * Source paramater A : balanced gains (left, middle, right)
# * Source paramater adaptability : free, all previous parameters are
#   updated during the iterative EM process.
# * Number of EM iterations : 200
#
###########################################################################
# Copyright 2018 Ewen Camberlein (INRIA), Romain Lebarbenchon (INRIA)
# This software is distributed under the terms of the GNU Public License
# version 3 (http://www.gnu.org/licenses/gpl.txt)
###########################################################################

from __future__ import division
import numpy as np
import os, sys
import wave
import shutil

# ------------------------------------------------------------------------
#                      Paths management
# ------------------------------------------------------------------------

# Path of current folder
script_path = os.path.dirname(os.path.abspath(__file__))

# add tools folder to python path to import get_freqScaleParams module
sys.path.append(script_path+"/../tools/")
import get_freqScaleParams

# Import the fasst package
fasst_python_dir = '@FASST_PYTHON_DIR@'
if fasst_python_dir not in sys.path:
    sys.path.insert(0, fasst_python_dir)
import fasst

# Create temp/ and result/ directory if it does not exist
tmp_dir = os.path.join(script_path,'temp/');
if not os.path.exists(tmp_dir):
    os.makedirs(tmp_dir)
    
results_dir = os.path.join(script_path, 'results/')
if not os.path.exists(results_dir):
    os.makedirs(results_dir)

# ------------------------------------------------------------------------
#                   Mixture and audio scene information
# ------------------------------------------------------------------------

mixture_wavname = os.path.join(script_path, 'Shannon_Hurley__Sunrise__inst__mix.wav')
fid = wave.open(mixture_wavname)
fs  = fid.getframerate();

# Number of sources
J = 3 

# Number of channels
I = fid.getnchannels()

# Number of mixture samples
nbSamples_Mix = fid.getnframes()    

# ------------------------------------------------------------------------
#               FASST Initialization (compute input xml file)
# ------------------------------------------------------------------------

print ('\n> FASST initialization')

# --- FASST general configuration (direct inputs for FASST)

transformType     = 'STFT'    # Time-frequency transform (STFT | ERB | ERBLET)
wlen              = 1024        # Window length in samples (frame length in time domain) - should be multiple of 4 for STFT

nbin_ERB          = 32      # Number of total frequency bins for ERB - ERB mandatory param
nbinPerERB_ERBLET = 1       # Number of frequency bins per ERB for ERBLET (1 bin per ERB with 1600 kHz fs lead to nbin = 34 ) - ERBLET mandatory param

Niteration_EM     = 200      # Number of iteration of EM algorithm for sources models estimation

# --- Initialization of models and FASST specific parameters for each source

# Define necessary parameters
N    = int(np.ceil(nbSamples_Mix/wlen*2))  # Number of frames
K    = 4                                   # NFM rank (number of spectral patterns in the dictionary)

# --- Compute the number of frequency bins and the center of frequency bands / clean unused params with respect to chosen transform ---
freqBandCenters_Hz, nbin, nbinPerERB_ERBLET, nbin_ERB =  get_freqScaleParams.run(transformType,wlen,nbin_ERB,nbinPerERB_ERBLET,fs)

print'>> User Params:'
print('   Transform: ' + transformType)
print('     - wlen: ' + str(wlen))
print('     - nbin: ' + str(nbin))
print('     - nbin_ERB: ' + str(nbin_ERB))
print('     - nbinPerERB_ERBLET: ' + str(nbinPerERB_ERBLET))
print('   J (number of sources): ' + str(J))
print('   K (NMF rank): ' + str(K))

sources = []
# Set common parameters for sources models
for j in range(J):
    source = {}
    
    # Name of output audio file for source j
    source['name'] = {}
    source['name'] = 'EstimatedSource_' + str(j) + '.wav'
    
    # Spatial model 
    source['A'] = {}
    source['A']['mixingType'] = 'inst'    # Instantaneous mixture
    source['A']['adaptability'] = 'free'  # Will be adapted by FASST
    
    # Spectral patterns (Wex) and time activation patterns applied to spectral patterns (Hex)   
    source['Wex'] = {}
    source['Wex']['adaptability'] = 'free' # Will be adapted by FASST
    source['Wex']['data'] = 0.75 * abs(np.random.randn(nbin, K)) + 0.25 * np.ones((nbin, K))
    source['Hex'] = {}
    source['Hex']['data'] = 0.75 * abs(np.random.randn(K, N)) + 0.25 * np.ones((K, N))
    source['Hex']['adaptability'] = 'free' # Will be adapted by FASST
    
    # Wiener filter parameters 
    source['wiener'] = {}
    source['wiener']['a']  = 0             # a  : Over-substraction parameter (in dB) - Default value = 0 
    source['wiener']['b']  = 0             # b  : Phase ponderation parameter (between [0,1]) - Default value = 0 
    source['wiener']['c1'] = 0             # c1 : Half-time width of the covariance smoothing window ( c1 >= 0) - Default value = 0 
    source['wiener']['c2'] = 0             # c2 : Half-frequency width of the covariance smoothing window ( c2 >= 0) - Default value = 0 
    source['wiener']['d']  = float("-inf") # d  : Thresholding parameter ( in dB, d <= 0) - Default value = -Inf

    sources.append(source)
    
# Set specific initialization parameters for sources models (spatial initialization ~ init gain balance for each source for instantaneous mixture)
sources[0]['A']['data'] = np.array(([np.sin(np.pi/8)],[np.cos(np.pi/8)]))
sources[1]['A']['data'] = np.array(([np.sin(np.pi/4)],[np.cos(np.pi/4)]))
sources[2]['A']['data'] = np.array(([np.sin(3*np.pi/8)],[np.cos(3*np.pi/8)]))
    
# --- Write FASST_data structure in FASST input xml file

# Define FASST_data structure
FASST_data = {}
FASST_data['tfr_type']          = transformType
FASST_data['wlen']              = wlen
FASST_data['nbin']              = nbin;
FASST_data['nbinPerERB_ERBLET'] = nbinPerERB_ERBLET;
FASST_data['iterations']        = Niteration_EM
FASST_data['sources']           = sources

# Write to XML
xml_fname = os.path.join(tmp_dir,'sources.xml');
fasst.writeXML(xml_fname, FASST_data)

# ------------------------------------------------------------------------
#                        Call FASST binaries
# ------------------------------------------------------------------------

print ('\n> FASST execution')

print '>> Input time-frequency representation'
fasst.compute_mixture_covariance_matrix(mixture_wavname, xml_fname, tmp_dir)

print '>> Refinement of sources models (EM algorithm)'
fasst.estimate_source_parameters(xml_fname, tmp_dir, xml_fname + '.new')

print '>> Computation of estimated sources'
fasst.estimate_sources(mixture_wavname, xml_fname + '.new',tmp_dir, results_dir)

# Delete temporary folder
shutil.rmtree(tmp_dir)

