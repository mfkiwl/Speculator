% This is an example of script for source separation of two speakers on an
% 8 channel reverberated mixture using FASST software. This script shows
% how to use FASST to learn models for each source during an enrollment (i.e. training step).
% These models are learnt from a single speaker 8 channel audio stream
% record (for each speaker) and then fixed for the mixture separation step.
% 
% input.wav (input file) can be divided in three parts:
% * Part 1 (5.161 to 21.270 sec): only speaker 1 is talking (used as training data to initialize source 1 models)
% * Part 2 (25.641 to 41.308 sec): only speaker 2 is talking (used as training data to initialize source 2 models)
% * Part 3 (47.584 to 71.285 sec): speaker 1 and 2 are talking together (the mixture to be separated)
% These three parts have been recorded in one record session with fixed microphone array and fixed
% speakers (located at different positions). all pronounced sentences are different.
% 
% Parameters used to initialize FASST for the training step (called once for each source):
% * Mixture type : convolutive.
% * Number of source : one
% * Time-Frequency representation : ERB filterbank with 64 frequency bins.
% * Source parameter Wex : Normally distributed random matrix (default init).
% * Source parameter Hex : Normally distributed random matrix (default init).
% * Source parameter A : Identity for all frequencies (default init).
% * Source parameter adaptability : free, all previous parameters are
%   updated during the iterative EM process.
% * Number of EM iterations : 50
%
% Parameters used to initialize FASST for the separation step:
% * Mixture type : convolutive.
% * Number of source : two
% * Time-Frequency representation : ERB filterbank with 64 frequency bins.
% * Source parameter Wex : Wex computed during training step for corresponding source
% * Source parameter Hex : Normally distributed random matrix (default init).
% * Source parameter A : A computed during training step for corresponding source
% * Source parameter adaptability : 
%      Hex -> free  (updated during the iterative EM process)
%      Wex -> fixed (not updated during the iterative EM process)
%      A   -> fixed (not updated during the iterative EM process)
% * Number of EM iterations : 100
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2018 Ewen Camberlein (INRIA), Romain Lebarbenchon (INRIA)
% This software is distributed under the terms of the GNU Public License
% version 3 (http://www.gnu.org/licenses/gpl.txt)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cleaning
clear all;
close all;

%% ------------------------------------------------------------------------
%                      Paths management
%--------------------------------------------------------------------------

% Add FASST directory to PATH
FASST_MATLAB_DIR = '@FASST_MATLAB_DIR@';

if ~exist('fasst_writeXML', 'file')
    addpath(FASST_MATLAB_DIR);
end

% Add tools PATH to MATLAB
addpath('../tools')

% Create necessary folders
results_dir = 'results/';  % Results folder
train_dir   = 'train/';    % Temporary folder that contains trained source models
tmp_dir     = 'temp/';     % Temporary folder (intermediate files generated by FASST)

if ~exist(results_dir, 'dir')
    mkdir(results_dir);
end

if ~exist(train_dir, 'dir')
    mkdir(train_dir);
end

if ~exist(tmp_dir, 'dir')
    mkdir(tmp_dir);
end

%% ------------------------------------------------------------------------
%                   Mixture information
%--------------------------------------------------------------------------

% Number of sources
J = 2; 

% Number of channels
I = 8;

%% ------------------------------------------------------------------------
%                          Audio file configuration
%--------------------------------------------------------------------------
% Sampling frequency
fs = 16000; 

% Input file name
wavFileName = 'input.wav';

% Output Source 1 and Source 2 (training data) file names
trainFileName = {[results_dir 'src1_train.wav'],[results_dir 'src2_train.wav']};

% Output Mixture file name
mixFileName = [results_dir 'mixture.wav'];

% Extract training data (part1 and 2) from input.wav and save them as wav files
timeStamps_trainSrc = round([5.161,21.270;25.641,41.308].*fs); % Start/End sample of each source image (part1 and 2)
timeStamps_mix = round([47.584,71.285].*fs); % Start/End sample of the mixture (part 3)
nbSamples_trainSrc = zeros(1,J);
for j=1:J
    [x_train,~] = audioread(wavFileName,timeStamps_trainSrc(j,:));
    audiowrite(trainFileName{j},x_train,fs);
    nbSamples_trainSrc(j) = size(x_train,1);
    clear x_train;
end

% Extract the mixture (part 3) from the input wav file
x_mix = audioread(wavFileName,timeStamps_mix);

% Get the number of samples and number of channels (I)
[nbSamples_Mix,~] = size(x_mix); 

% Save the mixture as wav file
audiowrite(mixFileName,x_mix,fs);

% Clear x_mix
clear x_mix;

%% ------------------------------------------------------------------------
%                          FASST Configuration
%--------------------------------------------------------------------------

disp([newline '> FASST initialization']);

% --- FASST general configuration (direct inputs for FASST)

transformType     = 'ERBLET';   % Time-frequency transform (STFT | ERB | ERBLET)
wlen              = 1024;     % Window length in samples (frame length in time domain) - should be multiple of 4 for STFT

nbin_ERB          = 64;      % Number of total frequency bins for ERB - ERB mandatory param
nbinPerERB_ERBLET = 2;       % Number of frequency bins per ERB for ERBLET (1 bin per ERB with 1600 kHz fs lead to nbin = 34 ) - ERBLET mandatory param

Niteration_EM_training   = 50;       % Number of iteration of EM algorithm for sources models training
Niteration_EM_separation = 100;      % Number of iteration of EM algorithm for sources separation

% --- Initialization of models and FASST specific parameters for each source
% Define necessary parameters
N_mix          = ceil(nbSamples_Mix/wlen*2);       % Number of mixture frames
N_trainSrcImag = ceil(nbSamples_trainSrc./wlen*2); % Number of frames of training data (for each source)
K = 32;                                            % Requested NFM rank (size of spectral patterns dictionary)

% --- Compute the number of frequency bins and the center of frequency bands / clean unused params with respect to chosen transform ---
[freqBandCenters_Hz, nbin, nbinPerERB_ERBLET, nbin_ERB] =  get_freqScaleParams(transformType,wlen,nbin_ERB,nbinPerERB_ERBLET,fs);

disp('>> User Params:');
disp(['   Transform:' transformType] );
disp(['     - wlen:' num2str(wlen) ]);
disp(['     - nbin:' num2str(nbin) ]);
disp(['     - nbin_ERB:' num2str(nbin_ERB) ]);
disp(['     - nbinPerERB_ERBLET:' num2str(nbinPerERB_ERBLET) ]);
disp(['   J (number of sources):' num2str(J) ]);
disp(['   K (NMF rank):' num2str(K) ]);

%% ------------------------------------------------------------------------
%     Training step (FASST structure initialization and processing)
%--------------------------------------------------------------------------
% Define FASST data structure
FASST_data = struct;
FASST_data.tfr_type                = transformType;
FASST_data.wlen                    = wlen;
FASST_data.nbin                    = nbin;
FASST_data.nbinPerERB_ERBLET       = nbinPerERB_ERBLET;
FASST_data.iterations              = Niteration_EM_training;
FASST_data.sources                 = [];

for j = 1:J
    FASST_data.sources = cell(1);
    FASST_data.sources{1}.name = ['train_',num2str(j)];
    FASST_data.sources{1}.A.mixingType = 'conv';   % Convolutive mixture
    FASST_data.sources{1}.A.adaptability = 'free'; % Will be adapted by FASST
    FASST_data.sources{1}.A.data = repmat(eye(I),1,1,nbin); % init with identity
    
    % Spectral patterns (Wex) and time activation patterns applied to spectral patterns (Hex)
    % Adaptability of models Hex and Wex
    FASST_data.sources{1}.Wex.adaptability = 'free'; % Will be adapted by FASST
    FASST_data.sources{1}.Hex.adaptability = 'free'; % Will be adapted by FASST
    
    % Initialization of models Hex and Wex
    FASST_data.sources{1}.Wex.data = 0.75 * abs(randn(nbin, K)) + 0.25 * ones(nbin, K); % Random init
    FASST_data.sources{1}.Hex.data = 0.75 * abs(randn(K, N_trainSrcImag(j))) + 0.25 * ones(K, N_trainSrcImag(j)); % Random init
    
    % Wiener filter parameters (not used during the training pass)
    FASST_data.sources{1}.wiener.a  = 0;    % a  : Over-substraction parameter (in dB) - Default value = 0
    FASST_data.sources{1}.wiener.b  = 0;    % b  : Phase ponderation parameter (inside [0,1]) - Default value = 0
    FASST_data.sources{1}.wiener.c1 = 0;    % c1 : Half-time width of the covariance smoothing window ( c1 >= 0)- Default value = 0
    FASST_data.sources{1}.wiener.c2 = 0;    % c2 : Half-frequency width of the covariance smoothing window ( c2 >= 0)- Default value = 0
    FASST_data.sources{1}.wiener.d  = -Inf; % d  : Thresholding parameter ( in dB, d <= 0)- Default value = -Inf

    % Write parameters to XML
    xml_fname = [train_dir 'sources' num2str(j) '.xml'];
    fasst_writeXML(xml_fname, FASST_data);
    
    % Call FASST to refine A and Wex on training data (source image)
    disp([newline '> FASST processing: models training for source #' num2str(j)]);
    
    disp('>> Input time-frequency representation');
    fasst_compute_mixture_covariance_matrix(trainFileName{j}, xml_fname, train_dir)
    
    disp('>> Refinement of source model (EM algorithm)');
    fasst_estimate_source_parameters(xml_fname, train_dir, [xml_fname '.new'])
    
end

%% ------------------------------------------------------------------------
%             Separation step (FASST structure initialization)
%--------------------------------------------------------------------------

% Define FASST data structure
FASST_data = struct;
FASST_data.tfr_type   = transformType; 
FASST_data.wlen       = wlen;
FASST_data.nbin       = nbin;
FASST_data.nbinPerERB_ERBLET       = nbinPerERB_ERBLET;
FASST_data.iterations = Niteration_EM_separation;
FASST_data.sources    = cell(1,J);

for j = 1:J
    % Load trained A and Wex models of source j
    trained_source = fasst_loadXML( [train_dir 'sources' num2str(j) '.xml.new'] );
    
    % Name of output audio file for source j
    FASST_data.sources{j}.name = ['EstimatedSource_',num2str(j)];
    
    % Type of mixture
    FASST_data.sources{j}.A.mixingType = 'conv';   % Convolutive mixture
    
    % Spatial model adaptability
    FASST_data.sources{j}.A.adaptability = 'fixed'; % Previously learnt, so fixed

    % Spatial model initialisation
    FASST_data.sources{j}.A.data = trained_source.sources{1}.A.data; % Initialize with trained model A
              
    % Spectral patterns (Wex) and time activation patterns applied to spectral patterns (Hex)
    % Adaptability of models Hex and Wex
    FASST_data.sources{j}.Wex.adaptability = 'fixed'; % Previously learnt, so fixed
    FASST_data.sources{j}.Hex.adaptability = 'free';  % Will be adapted by FASST
    
    % Initialization of models Hex and Wex
    % Trained spectral pattern dictionnary current source j
    FASST_data.sources{j}.Wex.data = trained_source.sources{1}.Wex.data; % Initialize with trained model Wex
    FASST_data.sources{j}.Hex.data = 0.75 * abs(randn(K, N_mix)) + 0.25 * ones(K, N_mix); % random init
    
    % Wiener filter parameters   
    FASST_data.sources{j}.wiener.a  = 0;    % a  : Over-substraction parameter (in dB) - Default value = 0 
    FASST_data.sources{j}.wiener.b  = 0;    % b  : Phase ponderation parameter (inside [0,1]) - Default value = 0 
    FASST_data.sources{j}.wiener.c1 = 0;    % c1 : Half-time width of the covariance smoothing window ( c1 >= 0)- Default value = 0 
    FASST_data.sources{j}.wiener.c2 = 0;    % c2 : Half-frequency width of the covariance smoothing window ( c2 >= 0)- Default value = 0 
    FASST_data.sources{j}.wiener.d  = -Inf; % d  : Thresholding parameter ( in dB, d <= 0)- Default value = -Inf 
end

% Write parameters to XML
xml_fname = [tmp_dir 'sources.xml'];
fasst_writeXML(xml_fname, FASST_data);

%% ------------------------------------------------------------------------
%            Separation step (FASST processing)
%--------------------------------------------------------------------------

disp([newline '> FASST processing: mixture separation']);

disp('>> Input time-frequency representation');
fasst_compute_mixture_covariance_matrix(mixFileName, xml_fname, tmp_dir)

disp('>> Refinement of sources models (EM algorithm)');
fasst_estimate_source_parameters(xml_fname, tmp_dir, [xml_fname '.new'])

disp('>> Computation of estimated sources');
fasst_estimate_sources(mixFileName, [xml_fname '.new'], tmp_dir, results_dir)

% Delete temporary folder
rmdir(tmp_dir,'s')

% Delete train folder
rmdir(train_dir,'s')
fprintf('\n');
