{
	"patcher" : 	{
		"fileversion" : 1,
		"appversion" : 		{
			"major" : 7,
			"minor" : 3,
			"revision" : 5,
			"architecture" : "x64",
			"modernui" : 1
		}
,
		"rect" : [ 38.0, 79.0, 1004.0, 687.0 ],
		"bgcolor" : [ 0.9, 0.9, 0.9, 1.0 ],
		"editing_bgcolor" : [ 0.9, 0.9, 0.9, 1.0 ],
		"bglocked" : 0,
		"openinpresentation" : 0,
		"default_fontsize" : 12.0,
		"default_fontface" : 0,
		"default_fontname" : "Arial",
		"gridonopen" : 2,
		"gridsize" : [ 15.0, 15.0 ],
		"gridsnaponopen" : 1,
		"objectsnaponopen" : 1,
		"statusbarvisible" : 2,
		"toolbarvisible" : 1,
		"lefttoolbarpinned" : 2,
		"toptoolbarpinned" : 2,
		"righttoolbarpinned" : 2,
		"bottomtoolbarpinned" : 1,
		"toolbars_unpinned_last_save" : 7,
		"tallnewobj" : 0,
		"boxanimatetime" : 200,
		"enablehscroll" : 1,
		"enablevscroll" : 1,
		"devicewidth" : 0.0,
		"description" : "",
		"digest" : "",
		"tags" : "",
		"style" : "",
		"subpatcher_template" : "<none>",
		"boxes" : [ 			{
				"box" : 				{
					"id" : "obj-5",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 853.0, 645.0, 133.0, 22.0 ],
					"style" : "",
					"text" : "out 3 mix control signal"
				}

			}
, 			{
				"box" : 				{
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-1",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 30.0, 17.0, 53.0, 22.0 ],
					"style" : "",
					"text" : "in 1 Left"
				}

			}
, 			{
				"box" : 				{
					"fontname" : "Arial",
					"fontsize" : 12.0,
					"id" : "obj-2",
					"maxclass" : "newobj",
					"numinlets" : 0,
					"numoutlets" : 1,
					"outlettype" : [ "" ],
					"patching_rect" : [ 853.0, 17.0, 61.0, 22.0 ],
					"style" : "",
					"text" : "in 2 Right"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-10",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 441.5, 645.0, 149.0, 22.0 ],
					"style" : "",
					"text" : "out 2 to Convolution Right"
				}

			}
, 			{
				"box" : 				{
					"id" : "obj-9",
					"maxclass" : "newobj",
					"numinlets" : 1,
					"numoutlets" : 0,
					"patching_rect" : [ 29.666656, 645.0, 141.0, 22.0 ],
					"style" : "",
					"text" : "out 1 to Convolution Left"
				}

			}
, 			{
				"box" : 				{
					"code" : "\r\n//\t//\t//\tGLOBAL LIBRARY FUNCTIONS\n\r\nrequire(\"hirt_convolution_rt_library\");\r\nrequire(\"hirt_eq_library\");\r\n\r\n\r\n//\t//\t//\tLOCAL FUNCTIONS [hirt_convolver_rt_part1]\r\n\n// mixing\n\npanQuartApproxMono(x, p)\t\t\t\t\t\t\t\t\t// p is control, must be clipped 0..1\n{\t// precision == 2 for pan (== 3 for xfades etc)\n\tpL, pR\t= quartOneParApprox(p);\t\t\t\t\t\t\t// cos/sin(/quart)\n\treturn\t(x * pL), (x * pR);\t\t\t\t\t\t\t\t// out pan L, out pan R\n}\n\npanQuartApproxDual(xL, xR, pL, pR)\t\t\t\t\t\t\t// p's are controls, must be clipped 0..1\n{\n\tyLL, yLR\t= panQuartApproxMono(xL, pL);\t\t\t\t// pan L\n\tyRL, yRR\t= panQuartApproxMono(xR, pR);\t\t\t\t// pan R\n\treturn\t\t(yLL + yRL), (yLR + yRR);\t\t\t\t\t// out sum L, out sum R\n}\n\n// utilities\n\n// pre-delay calc\ncalcDelays(delay, time)\t\t\t\t\t// delay & time in samples\n{\n\tHistory direction(-1), ramp(0), del1(0), del2(0);\t\n\n\ttest1\t= ((ramp == 0) && (del1 != delay));\n\ttest2\t= ((ramp == 1) && (del2 != delay));\n\t\n\tdel2\t= test1 ? delay : del2;\n\tdel1\t= test2 ? delay : del1;\n\t\n\tsampletime\t= 1 / time;\n\tdirection\t= (test1 || test2) ? -direction : direction;\n\tramp\t\t= clip(ramp + (direction * sampletime), 0, 1);\n\t\n\treturn\tramp,\tdel1,\tdel2;\n}\r\n\r\n// excellent accuracy to about +36 dB, after which you are on your own\ndbtoaApprox(db)\t\t\t\t\t\t\t\t\t// using 'expA()'\n{\n\tdbtoaA = expA(0.11512925464970 * db);\n\treturn dbtoaA + 0.000128;\t\t\t\t\t// + offset = 0 dB == 1 amplitude\n}\n\n// cheaper than above 'dbtoaApprox()', but far less accurate\ndbtoaApproxF(db)\t\t\t\t\t\t\t\t// \n{\n\treturn fastpow(10, (db * 0.05)) + 0.028652;\t// + offset = 0 dB == 1 amplitude\n}\n\r\n\r\n//\t//\t//\tDECLARE\r\n\r\n// Pre Delay Delays\t(we need single-tap delay declarations because of output mixing)\r\n\r\nDelay\t leftA(38400,\t1,\tfeedback=0);\t\t// support up to 200ms @ up to 192kHz samplerate ...\r\nDelay\trightA(38400,\t1,\tfeedback=0);\r\nDelay\t leftB(38400,\t1,\tfeedback=0);\t\t// ...\r\nDelay\trightB(38400,\t1,\tfeedback=0);\r\n\r\n// Smooth Global\r\n\r\nParam\tsmooth(25, min=1, max=100);\t\t\t\t\t// ms [not dynamic ?]\r\n\r\n// EQ Params (svf coefficients calculated externally at max schedular rate)\n\r\n// low shelf, defaults(Hz=125, dB=0, q=0.5)\nParam\tls_a1\t(0.982425,\tmin=-1,\t\tmax=1);\nParam\tls_a2\t(0.008748,\tmin=-1,\t\tmax=1);\nParam\tls_a3\t(0.000078,\tmin=-1,\t\tmax=1);\nParam\tls_m0\t(1,\t\t\tmin=1,\t\tmax=1);\t\t// always '1'\nParam\tls_m1\t(0,\t\t\tmin=-15,\tmax=50);\nParam\tls_m2\t(0,\t\t\tmin=-10,\tmax=10);\n\r\n// bell, defaults(Hz=1000, dB=0, q=0.707107)\nParam\tb1_a1\t(0.904152,\tmin=-1,\t\tmax=1);\nParam\tb1_a2\t(0.064519,\tmin=-1,\t\tmax=1);\nParam\tb1_a3\t(0.004604,\tmin=-1,\t\tmax=1);\nParam\tb1_m0\t(1,\t\t\tmin=1,\t\tmax=1);\t\t// always '1'\nParam\tb1_m1\t(0,\t\t\tmin=-50,\tmax=50);\nParam\tb1_m2\t(0,\t\t\tmin=0,\t\tmax=0);\t\t// always '0'\n\r\n// high shelf, defaults(Hz=8000, dB=0, q=0.5)\nParam\ths_a1\t(0.371425,\tmin=-1,\t\tmax=1);\nParam\ths_a2\t(0.238021,\tmin=-1,\t\tmax=1);\nParam\ths_a3\t(0.152532,\tmin=-1,\t\tmax=1);\nParam\ths_m0\t(1,\t\t\tmin=-10,\tmax=10);\nParam\ths_m1\t(0,\t\t\tmin=-105,\tmax=15);\nParam\ths_m2\t(0,\t\t\tmin=-10,\tmax=10);\n\r\nParam\teq(1, min=0, max=2);\t\t\t\t\t\t// 0=bypassed, 1=on (pre), 2=off (post)\n\r\n// Saturation Params (part of EQ)\r\n\r\nParam\tsaturationtype(0, min=0, max=2);\t\t\t// 0=off, 1=tanh approx, 2=parabolic approx\r\nParam\tsaturationamount(0.222997, min=0.1, max=1);\t// param in max is exponential mapping 0.1..0.666666\r\n\r\n// Pre Delay Params\r\n\r\nParam\tpredelay(0, min=0, max=200);\t\t\t\t// ms\r\nParam\tramptime(75, min=0, max=300);\t\t\t\t// ms [not dynamic ?]\r\n\r\n// CPU Params\r\n\r\nParam\tdrywetmix(0.5, min=0, max=1);\t\t\t\t// % 0..1\t(setup here then pass signal through both gen~ patchers)\r\n\r\n\r\n//\t//\t//\tPARSE\t(param rate)\r\n\r\n// smooth\r\n\r\nsecssmooth\t= smooth * 0.001;\t\t\t\t\t\t// seconds\r\nsampssmooth\t= mstosamps(smooth);\t\t\t\t\t// samples\r\nmatchsmooth\t= secssmooth * 0.5;\t\t\t\t\t\t// quasi match 'line'\r\n\r\n// eq\r\n\r\neqonoff\t\t= int(eq == 1);\t\t\t\t\t\t\t// if PRE\r\n\r\n// saturation (part of eq)\r\n\r\nsattype\t\t= int(saturationtype);\t\t\t\t\t// 0=bypassed, 1=tanh approx, 2=parabolic approx\r\nsatactive\t= (sattype != 0);\t\t\t\t\t\t// 0=off, 1=on\r\nsatstyle\t= clip(sattype, 1, 2) - 1;\t\t\t\t// 0=tanh, 1=parabolic\r\nsattld\t\t= dbtoaApproxF(saturationamount * 2.99);// default 1.081608\nsatpbd\t\t= dbtoaApprox((saturationamount + 0.9) * 3.01);// default 1.475854\r\n\r\n// pre delay\r\n\nramp\t\t= mstosamps(ramptime);\t\t\t\t\t// samps (ramp time and off delay)\r\npre\t\t\t= mstosamps(predelay);\t\t\t\t\t// samps (and cpu manage)\r\npreflag\t\t= int(pre > 0);\t\t\t\t\t\t\t// manage cpu (1 is 1, 0 is delayed by ramptime)\r\n\r\n\r\n//\t//\t//\tINPUTS\r\n\r\nsL\t\t\t= in1 + 0;\nsR\t\t\t= in2 + 0;\n\r\nConvL\t\t= sL + 0;\r\nConvR\t\t= sR + 0;\r\n\r\n\r\n//\t//\t//\tCPU\t(final dry/wet mix for [hirt_convolver_rt_part3], but used through both gen~ patchers for cpu management)\r\n\r\ncpuMix\t\t\t= genLine(drywetmix, sampssmooth);\t\t// % 0..1\t(setup here then pass through all gen~ patchers)\r\nif (cpuMix > 0) {\t\t\t//\t//\t//\tmaster bypass, do not compute if master mix == 0 % (or ui bypass == 1)\r\n\r\n\r\n//\t//\t//\tPARSE\t(audio rate)\r\n\r\n// eq\r\n\r\neqsmooth,\teqn\t= genLine(eqonoff, sampssmooth);\r\n\r\n// pre delay\r\n\r\nprecompute, pcn\t= genLine(preflag, ramp);\t\t\t\t// 1 is 1, 0 is delayed by 'delayCalc()' ramptime\r\n\r\n\r\n//\t//\t//\tEQ\t\t//\t//\t//\tIF routing == PRE\r\n\r\nif (eqsmooth > 0) {\t\t\t// eq on (if eq is off, smoothing and saturation are also off)\r\n\r\n\t// coefficients\r\n\r\n\t// high shelf, coefficients smoothing\r\n\ths_cH, hs_cB, hs_cL\t= multiLine3(hs_m0, hs_m1, hs_m2, sampssmooth);\t\t\t// all m's computed\r\n\ths_cB\t\t\t\t= hs_cB * eqsmooth;\t\t\t\t\t\t\t\t\t\t// smooth to 0dB gain for cpu bypass\r\n\ths_cL\t\t\t\t= hs_cL * eqsmooth;\n\r\n\t// bell, coefficients smoothing\n\tb1_cB\t\t\t\t= genLine(b1_m1, sampssmooth);\t\t\t\t\t\t\t// only m1 computed\r\n\tb1_cB\t\t\t\t= b1_cB * eqsmooth;\t\t\t\t\t\t\t\t\t\t// smooth to 0dB...\n\r\n\t// low shelf, coefficients smoothing\n\tls_cB, ls_cL\t\t= multiLine2(ls_m1, ls_m2, sampssmooth);\t\t\t\t// only m1 & m2 computed\r\n\tls_cB\t\t\t\t= ls_cB * eqsmooth;\t\t\t\t\t\t\t\t\t\t// smooth to 0dB...\r\n\tls_cL\t\t\t\t= ls_cL * eqsmooth;\n\r\n\t// cascade,\t\t(zdf svf sections based on andy simper),\tif individual band gain is 0dB, band is cpu-off\n\r\n\t// high shelf\r\n\tsL, sR\t= svfSectionStereo(sL, sR, hs_a1, hs_a2, hs_a3, hs_cH, hs_cB, hs_cL);\n\n\t// bell\n\tsL, sR\t= svfSectionStereo(sL, sR, b1_a1, b1_a2, b1_a3, b1_m0, b1_cB, b1_m2);\n\r\n\t// saturation\t(if selected, 'in' EQ)\n\tsatsmooth, sbn\t= toggleLine(satactive, sampssmooth);\t//  0 / 1 smoothed\r\n\tsatsmooth\t\t= satsmooth * eqsmooth;\r\n\tif (satsmooth > 0) {\t\t\t\t\t\t\t\t\t//  if not bypassed, compute ...\r\n\t\tsLdry\t\t= sL + 0;\r\n\t\tsRdry\t\t= sR + 0;\r\n\r\n\t\tsatselect, stn\t= toggleLine(satstyle, sampssmooth);\r\n\t\tif (satselect == 1) {\t\t\t\t\t\t\t\t// sat == 1, parabolic saturation\r\n\t\t\tpbdrive\t= expsmooth(satpbd, secssmooth);\n\t\t\tsL\t\t= parabol4x(sL, pbdrive, 1.122018);\n\t\t\tsR\t\t= parabol4x(sR, pbdrive, 1.122018);\r\n\t\t} else if ((satselect > 0) && (satselect < 1)) {\t// is ramping between tanh & parabolic...\r\n\t\t\ttldrive, pbdrive\t= expsmoothBank2(sattld, satpbd, secssmooth);\n\t\t\tsL\t\t= interp(satselect, tnhL4x(sL * tldrive), parabol4x(sL, pbdrive, 1.122018), mode=\"linear\");\r\n\t\t\tsR\t\t= interp(satselect, tnhL4x(sR * tldrive), parabol4x(sR, pbdrive, 1.122018), mode=\"linear\");\r\n\t\t} else {\t//\t(satselect == 0)\t\t\t\t\t// sat == 0, tanh approx\r\n\t\t\ttldrive\t= expsmooth(sattld, secssmooth);\n\t\t\tsL\t\t= tnhL4x(sL * tldrive);\n\t\t\tsR\t\t= tnhL4x(sR * tldrive);\n\t\t}\r\n\r\n\t\tsL\t\t\t= interp(satsmooth, sLdry, sL, mode=\"cosine\");\r\n\t\tsR\t\t\t= interp(satsmooth, sRdry, sR, mode=\"cosine\");\r\n\r\n\t\tsL\t\t= dcblock(sL);\r\n\t\tsR\t\t= dcblock(sR);\r\n\r\n\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  sat off (if bypassed, do not compute ...)\r\n\r\n\t// low shelf\n\tsL, sR\t= svfSectionStereo(sL, sR, ls_a1, ls_a2, ls_a3, ls_m0, ls_cB, ls_cL);\r\n\n}\t\t\t\t\t\t\t// eq off\r\n\r\n\r\n//\t//\t//\tPRE DELAY\r\n\r\n leftA.write(sL);\t\t\t\t\t\t\t\t\t// always write to delay lines\r\nrightA.write(sR);\r\n leftB.write(sL);\r\nrightB.write(sR);\r\n\r\nConvL\t\t= sL + 0;\r\nConvR\t\t= sR + 0;\r\n\r\nif (precompute > 0) {\t\t\t\t\t\t\t\t// manage cpu (only compute if is delayed)\r\n\r\n\tmixa \t= sL + 0;\r\n\tmixb\t= sR + 0;\r\n\tmixc\t= sL + 0;\r\n\tmixd\t= sR + 0;\r\n\r\n\tdelayramp, delA, delB\t= calcDelays(pre, ramp);// delayramp = exact (only compute required)\r\n\r\n\tpDelA\t= delA - 1;\r\n\tpDelB\t= delB - 1;\r\n\r\n\tif\t\t\t\t((delayramp > 0) && (delayramp < 1)) {\t\t// ...is ramping\r\n\t\tif (pDelA > 0) {\r\n\t\t\tmixa\t=  leftA.read(pDelA, interp=\"spline\");\r\n\t\t\tmixb\t= rightA.read(pDelA, interp=\"spline\");\r\n\t\t}\r\n\r\n\t\tif (pDelB > 0) {\r\n\t\t\tmixc\t=  leftB.read(pDelB, interp=\"spline\");\r\n\t\t\tmixd\t= rightB.read(pDelB, interp=\"spline\");\r\n\t\t}\r\n\r\n\t\tConvL, ConvR\t= xfadeQuartApproxStereo(mixa, mixb, mixc, mixd, delayramp);\r\n\r\n\t} else if\t\t(delayramp == 1) {\r\n\t\tif (pDelB > 0) {\r\n\t\t\tmixc\t=  leftB.read(pDelB, interp=\"spline\");\r\n\t\t\tmixd\t= rightB.read(pDelB, interp=\"spline\");\r\n\t\t}\r\n\r\n\t\tConvL\t\t= mixc;\r\n\t\tConvR\t\t= mixd;\r\n\r\n\t} else {\t//\t(delayramp == 0)\r\n\t\tif (pDelA > 0) {\r\n\t\t\tmixa\t=  leftA.read(pDelA, interp=\"spline\");\r\n\t\t\tmixb\t= rightA.read(pDelA, interp=\"spline\");\r\n\t\t}\r\n\r\n\t\tConvL\t\t= mixa;\r\n\t\tConvR\t\t= mixb;\r\n\r\n\t}\r\n\r\n\tConvL\t= interp(precompute, sL + 0, ConvL, mode=\"linear\");\r\n\tConvR\t= interp(precompute, sR + 0, ConvR, mode=\"linear\");\r\n\r\n}\t\t\t\t\t\t\t\t\t\t\t\t\t// (precompute == 0) manage cpu (only compute if is delayed)\r\n\r\n\r\n}\t\t\t\t\t\t\t//\t//\t//\tmaster bypass, do not compute if master mix == 0 % (or ui bypass == 1)\r\n\r\n\r\n//\t//\t//\tOUTPUTs\r\n\r\nout1\t= ConvL;\t\t\t// to convolution processing Left [multiconvolve~ zero]\r\nout2\t= ConvR;\t\t\t// to convolution processing Right [multiconvolve~ zero]\r\n\r\nout3\t= cpuMix;\t\t\t// pass through both gen~ patchers\r\n\r\n",
					"fontface" : 0,
					"fontname" : "Arial Bold",
					"fontsize" : 10.0,
					"id" : "obj-3",
					"maxclass" : "codebox",
					"numinlets" : 2,
					"numoutlets" : 3,
					"outlettype" : [ "", "", "" ],
					"patching_rect" : [ 30.0, 54.0, 842.0, 574.0 ],
					"style" : ""
				}

			}
 ],
		"lines" : [ 			{
				"patchline" : 				{
					"color" : [ 1.0, 1.0, 0.0, 1.0 ],
					"destination" : [ "obj-3", 0 ],
					"source" : [ "obj-1", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"color" : [ 1.0, 1.0, 0.0, 1.0 ],
					"destination" : [ "obj-3", 1 ],
					"source" : [ "obj-2", 0 ]
				}

			}
, 			{
				"patchline" : 				{
					"color" : [ 1.0, 1.0, 0.0, 1.0 ],
					"destination" : [ "obj-10", 0 ],
					"source" : [ "obj-3", 1 ]
				}

			}
, 			{
				"patchline" : 				{
					"color" : [ 0.6, 0.4, 0.2, 1.0 ],
					"destination" : [ "obj-5", 0 ],
					"source" : [ "obj-3", 2 ]
				}

			}
, 			{
				"patchline" : 				{
					"color" : [ 1.0, 1.0, 0.0, 1.0 ],
					"destination" : [ "obj-9", 0 ],
					"source" : [ "obj-3", 0 ]
				}

			}
 ],
		"styles" : [ 			{
				"name" : "AudioStatus_Menu",
				"default" : 				{
					"bgfillcolor" : 					{
						"type" : "color",
						"color" : [ 0.294118, 0.313726, 0.337255, 1 ],
						"color1" : [ 0.454902, 0.462745, 0.482353, 0.0 ],
						"color2" : [ 0.290196, 0.309804, 0.301961, 1.0 ],
						"angle" : 270.0,
						"proportion" : 0.39,
						"autogradient" : 0
					}

				}
,
				"parentstyle" : "",
				"multi" : 0
			}
, 			{
				"name" : "max6box",
				"default" : 				{
					"accentcolor" : [ 0.8, 0.839216, 0.709804, 1.0 ],
					"bgcolor" : [ 1.0, 1.0, 1.0, 0.5 ],
					"textcolor_inverse" : [ 0.0, 0.0, 0.0, 1.0 ]
				}
,
				"parentstyle" : "",
				"multi" : 0
			}
, 			{
				"name" : "max6inlet",
				"default" : 				{
					"color" : [ 0.423529, 0.372549, 0.27451, 1.0 ]
				}
,
				"parentstyle" : "",
				"multi" : 0
			}
, 			{
				"name" : "max6message",
				"default" : 				{
					"bgfillcolor" : 					{
						"type" : "gradient",
						"color1" : [ 0.866667, 0.866667, 0.866667, 1.0 ],
						"color2" : [ 0.788235, 0.788235, 0.788235, 1.0 ],
						"color" : [ 0.290196, 0.309804, 0.301961, 1.0 ],
						"angle" : 270.0,
						"proportion" : 0.39,
						"autogradient" : 0
					}
,
					"textcolor_inverse" : [ 0.0, 0.0, 0.0, 1.0 ]
				}
,
				"parentstyle" : "max6box",
				"multi" : 0
			}
, 			{
				"name" : "max6outlet",
				"default" : 				{
					"color" : [ 0.0, 0.454902, 0.498039, 1.0 ]
				}
,
				"parentstyle" : "",
				"multi" : 0
			}
 ],
		"toolbarexclusions" : [ "lessonbrowser" ]
	}

}
