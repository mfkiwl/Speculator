
//	//	//	functions specific to svf eq sections
//	//	//	for HIRT Convolution Reverb & HIRT Convolver (Realtime Processing sections)
//	//	//	other functions declared in 'hirt_convolution_rt_library' or locally
//	//	//	Pete Dowling 2017


// eq

// core section
svfSection(v0, a0, a1, a2, b0, b1, b2)
{
	History	ic1eq(0), ic2eq(0);

	v3		=  v0 - ic2eq;
	v1		= (a0 * ic1eq) + (a1 * v3);
	v2		=  ic2eq + (a1 * ic1eq) + (a2 * v3);
	ic1eq	= (2 * v1) - ic1eq;
	ic2eq	= (2 * v2) - ic2eq;

	return	(b0 * v0) + (b1 * v1) + (b2 * v2);
}

// 0 dB gain input zeros cpu of gain filters (shelfs, bells)
svfSectionStereo(v0L, v0R, a0, a1, a2, b0, b1, b2)
{
	History	svfssdummy(0);

	yL	= v0L + 0;
	yR	= v0R + 0;
	if ( (b1 + b2) != 0 ) {
		yL	= svfSection(v0L, a0, a1, a2, b0, b1, b2);
		yR	= svfSection(v0R, a0, a1, a2, b0, b1, b2);
	}

	return	yL, yR;
}


// approx
/*
// excellent accuracy to about +36 dB, after which you are on your own
dbtoaApprox(db)									// using 'expA()'
{
	dbtoaA = expA(0.11512925464970 * db);
	return dbtoaA + 0.000128;					// + offset = 0 dB == 1 amplitude
}

// cheaper than above 'dbtoaApprox()', but far less accurate
dbtoaApproxF(db)								// 
{
	return fastpow(10, (db * 0.05)) + 0.028652;	// + offset = 0 dB == 1 amplitude
}
*/

// nonlinear

// HQ tanh lambert approximation
tnhL(x)
{
	x2 = x * x;
	a = (((x2 + 378) * x2 + 17325) * x2 + 135135) * x;
	b = ((28 * x2 + 3150) * x2 + 62370) * x2 + 135135;
	return clamp((a / b), -1, 1);
}

// parabolic saturation
parabolsat(x, a, c)					// a=amplitude (default 1), c=clip (default 2)
{
	c2 = c + c;
	p = clip((x * a), -c2, c2);
	m = 1 - (abs(p) * (0.25 / c));
	y = p * m;
	return y;
}

// in Max_7:: 'spline' works better then 'cubic' for 4x but...
// in Max_8::  we could use the new (and better) version of 'cubic'

// fixed 4x cheap oversampling tnhL mono, plus voodoo for GenExpr
tnhL4x(XIN)
{	// up 4
	History	umTm1_0(0), umT0_0(0), umT1_0(0);
	// down 4
	History	dmT2_1(0), dmT1_1(0), dmT0_1(0);
	History	dmT2_2(0), dmT1_2(0), dmT0_2(0);
	History	dmT2_3(0), dmT1_3(0), dmT0_3(0);
	// align
	History	doX0(0);

	// up 4x
	x0_0_a	= XIN + 0;
	x1_0	= interp(0.25,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");		// !!
	x2_0	= interp(0.5,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");
	x3_0	= interp(0.75,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");

	// process 4x
	y1_0	= tnhL(x1_0);
	y2_0	= tnhL(x2_0);
	y3_0	= tnhL(x3_0);
	y4_0	= tnhL(umT1_0 + 0);

	// down 4x
	y2_0_a	= y2_0 + 0;
	y2_1	= interp(0.25,	y2_0_a,	dmT0_1, dmT1_1, dmT2_1, mode="spline");

	y3_0_a	= y3_0 + 0;
	y3_1	= interp(0.5,	y3_0_a,	dmT0_2, dmT1_2, dmT2_2, mode="spline");

	y4_0_a	= y4_0 + 0;
	y4_1	= interp(0.75,	y4_0_a,	dmT0_3, dmT1_3, dmT2_3, mode="spline");

	y0_0	= (((doX0 + y2_1) + y3_1) + y4_1) * 0.25;

	// update
	umTm1_0	= umT0_0;
	umT0_0	= umT1_0;
	umT1_0	= x0_0_a;

	doX0	= y1_0;

	dmT2_1	= dmT1_1;
	dmT1_1	= dmT0_1;
	dmT0_1	= y2_0;

	dmT2_2	= dmT1_2;
	dmT1_2	= dmT0_2;
	dmT0_2	= y3_0;

	dmT2_3	= dmT1_3;
	dmT1_3	= dmT0_3;
	dmT0_3	= y4_0;

	return y0_0;
}

// fixed 4x cheap oversampling parabolsat mono, plus voodoo for GenExpr
parabol4x(XIN, a, c)
{	// up 4
	History	umTm1_0(0), umT0_0(0), umT1_0(0);
	// down 4
	History	dmT2_1(0), dmT1_1(0), dmT0_1(0);
	History	dmT2_2(0), dmT1_2(0), dmT0_2(0);
	History	dmT2_3(0), dmT1_3(0), dmT0_3(0);
	// align
	History	doX0(0);

	// up 4x
	x0_0_a	= XIN + 0;
	x1_0	= interp(0.25,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");		// !!
	x2_0	= interp(0.5,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");
	x3_0	= interp(0.75,	umTm1_0, umT0_0, umT1_0, x0_0_a, mode="spline");

	// process 4x
	y1_0	= parabolsat(x1_0,		a, c);
	y2_0	= parabolsat(x2_0,		a, c);
	y3_0	= parabolsat(x3_0,		a, c);
	y4_0	= parabolsat(umT1_0,	a, c);

	// down 4x
	y2_0_a	= y2_0 + 0;
	y2_1	= interp(0.25,	y2_0_a,	dmT0_1, dmT1_1, dmT2_1, mode="spline");

	y3_0_a	= y3_0 + 0;
	y3_1	= interp(0.5,	y3_0_a,	dmT0_2, dmT1_2, dmT2_2, mode="spline");

	y4_0_a	= y4_0 + 0;
	y4_1	= interp(0.75,	y4_0_a,	dmT0_3, dmT1_3, dmT2_3, mode="spline");

	y0_0	= (((doX0 + y2_1) + y3_1) + y4_1) * 0.25;

	// update
	umTm1_0	= umT0_0;
	umT0_0	= umT1_0;
	umT1_0	= x0_0_a;

	doX0	= y1_0;

	dmT2_1	= dmT1_1;
	dmT1_1	= dmT0_1;
	dmT0_1	= y2_0;

	dmT2_2	= dmT1_2;
	dmT1_2	= dmT0_2;
	dmT0_2	= y3_0;

	dmT2_3	= dmT1_3;
	dmT1_3	= dmT0_3;
	dmT0_3	= y4_0;

	return y0_0;
}

/*
// make oversampling choice on tnhL mono nonlinearity
tnhLNonlin(xin, oversampling)
{
	History tnhldummy(0);			// for embedding
	y = 0;
	if (oversampling == 1) {		// use 1x sampling
		y = tnhL(xin);
	} else if (oversampling == 2) {	// use 4x oversampling
		y = tnhL4x(xin);
	} else {						// BYPASSED
		y = xin;
	}
	return y;
}

// make oversampling choice on parabolsat mono nonlinearity
parabolNonlin(xin, am, cl, oversampling)					// cl = 1.412538 <-- e.g., better choice here?
{
	History pbldummy(0);			// for embedding
	y = 0;
	if (oversampling == 1) {		// use 1x sampling
		y = parabolsat(xin, am, cl);
	} else if (oversampling == 2) {	// use 4x oversampling
		y = parabol4x(xin, am, cl);
	} else {						// BYPASSED
		y = xin;
	}
	return y;
}
*/

