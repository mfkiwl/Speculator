dnn=require('minidnn')
require('se')

math.randomseed(123)
x = se.EMXd()
x:random(400,100)
y = se.EMXd()
y:random(2,100)
net = dnn.Network() 
layer1 = dnn.ConvolutionalLayer(dnn.RELU,20,20,1,3,5,5)
layer2 = dnn.MaxpoolingLayer(dnn.RELU,16,16,3,3,3)
layer3 = dnn.FullyConnectedLayer(dnn.IDENTITY, 5*5*3,2)
net:add_layer(layer1)
net:add_layer(layer2)
net:add_layer(layer3)
net:set_output(dnn.RegressionMSEOutput())
opt = dnn.RMSPropOptimizer()
net:init(0,0.01)
net:fit(opt,x.matrix,y.matrix,100,10,123)