/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DIR swig_types[0]
#define SWIGTYPE_p_Int64 swig_types[1]
#define SWIGTYPE_p_Reader swig_types[2]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[3]
#define SWIGTYPE_p_Std__Anything swig_types[4]
#define SWIGTYPE_p_Std__BasicType swig_types[5]
#define SWIGTYPE_p_Std__BinaryFileReader swig_types[6]
#define SWIGTYPE_p_Std__BinaryFileWriter swig_types[7]
#define SWIGTYPE_p_Std__BitArray swig_types[8]
#define SWIGTYPE_p_Std__Dir swig_types[9]
#define SWIGTYPE_p_Std__DirEntry swig_types[10]
#define SWIGTYPE_p_Std__FileStatus swig_types[11]
#define SWIGTYPE_p_Std__FileSystem swig_types[12]
#define SWIGTYPE_p_Std__GNUPlot swig_types[13]
#define SWIGTYPE_p_Std__Glob swig_types[14]
#define SWIGTYPE_p_Std__JSON swig_types[15]
#define SWIGTYPE_p_Std__JSONArray swig_types[16]
#define SWIGTYPE_p_Std__JSONBool swig_types[17]
#define SWIGTYPE_p_Std__JSONDouble swig_types[18]
#define SWIGTYPE_p_Std__JSONInt swig_types[19]
#define SWIGTYPE_p_Std__JSONInt64 swig_types[20]
#define SWIGTYPE_p_Std__JSONString swig_types[21]
#define SWIGTYPE_p_Std__JSONUInt swig_types[22]
#define SWIGTYPE_p_Std__JSONUInt64 swig_types[23]
#define SWIGTYPE_p_Std__JSONValue swig_types[24]
#define SWIGTYPE_p_Std__LabelParameters swig_types[25]
#define SWIGTYPE_p_Std__LineReaderParams swig_types[26]
#define SWIGTYPE_p_Std__Path swig_types[27]
#define SWIGTYPE_p_Std__RandomBase swig_types[28]
#define SWIGTYPE_p_Std__RandomKnuth swig_types[29]
#define SWIGTYPE_p_Std__RandomMersenne swig_types[30]
#define SWIGTYPE_p_Std__RandomMersenne64 swig_types[31]
#define SWIGTYPE_p_Std__RandomMinStd swig_types[32]
#define SWIGTYPE_p_Std__RandomRanLux24 swig_types[33]
#define SWIGTYPE_p_Std__RandomRanLux48 swig_types[34]
#define SWIGTYPE_p_Std__SeparatorParams swig_types[35]
#define SWIGTYPE_p_Std__StdBitVector swig_types[36]
#define SWIGTYPE_p_Std__StdCsvDocument swig_types[37]
#define SWIGTYPE_p_Std__StdFile swig_types[38]
#define SWIGTYPE_p_Std__StdObject swig_types[39]
#define SWIGTYPE_p_Std__StdRandom swig_types[40]
#define SWIGTYPE_p_Std__StdRandomUniform swig_types[41]
#define SWIGTYPE_p_Std__StdRandomUniform64 swig_types[42]
#define SWIGTYPE_p_Std__StdString swig_types[43]
#define SWIGTYPE_p_Std__StdStringMap swig_types[44]
#define SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t swig_types[45]
#define SWIGTYPE_p_Std__StdVectorT_Std__StdString_t swig_types[46]
#define SWIGTYPE_p_Std__StdVectorT_double_t swig_types[47]
#define SWIGTYPE_p_Std__StdVectorT_float_t swig_types[48]
#define SWIGTYPE_p_Std__StdVectorT_int_t swig_types[49]
#define SWIGTYPE_p_Std__StdVectorT_long_long_t swig_types[50]
#define SWIGTYPE_p_Std__StdVectorT_long_t swig_types[51]
#define SWIGTYPE_p_Std__StdVectorT_short_t swig_types[52]
#define SWIGTYPE_p_Std__StdVectorT_signed_char_t swig_types[53]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_char_t swig_types[54]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_int_t swig_types[55]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t swig_types[56]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_long_t swig_types[57]
#define SWIGTYPE_p_Std__StdVectorT_unsigned_short_t swig_types[58]
#define SWIGTYPE_p_Std__barrier swig_types[59]
#define SWIGTYPE_p_Std__cond swig_types[60]
#define SWIGTYPE_p_Std__fd swig_types[61]
#define SWIGTYPE_p_Std__hold swig_types[62]
#define SWIGTYPE_p_Std__hostname swig_types[63]
#define SWIGTYPE_p_Std__ipaddr swig_types[64]
#define SWIGTYPE_p_Std__location swig_types[65]
#define SWIGTYPE_p_Std__mmap swig_types[66]
#define SWIGTYPE_p_Std__mutex swig_types[67]
#define SWIGTYPE_p_Std__rdhold swig_types[68]
#define SWIGTYPE_p_Std__rwlock swig_types[69]
#define SWIGTYPE_p_Std__socket swig_types[70]
#define SWIGTYPE_p_Std__thread swig_types[71]
#define SWIGTYPE_p_Std__wrhold swig_types[72]
#define SWIGTYPE_p_Value swig_types[73]
#define SWIGTYPE_p_ValueType swig_types[74]
#define SWIGTYPE_p_dirent swig_types[75]
#define SWIGTYPE_p_double swig_types[76]
#define SWIGTYPE_p_float swig_types[77]
#define SWIGTYPE_p_gnuplot_ctrl swig_types[78]
#define SWIGTYPE_p_in6_addr swig_types[79]
#define SWIGTYPE_p_in_addr swig_types[80]
#define SWIGTYPE_p_in_addr_t swig_types[81]
#define SWIGTYPE_p_in_port_t swig_types[82]
#define SWIGTYPE_p_int swig_types[83]
#define SWIGTYPE_p_long swig_types[84]
#define SWIGTYPE_p_long_long swig_types[85]
#define SWIGTYPE_p_off_t swig_types[86]
#define SWIGTYPE_p_rapidcsv__Document swig_types[87]
#define SWIGTYPE_p_rapidcsv__LabelParams swig_types[88]
#define SWIGTYPE_p_rapidcsv__LineReaderParams swig_types[89]
#define SWIGTYPE_p_rapidcsv__SeparatorParams swig_types[90]
#define SWIGTYPE_p_short swig_types[91]
#define SWIGTYPE_p_signed_char swig_types[92]
#define SWIGTYPE_p_sockaddr swig_types[93]
#define SWIGTYPE_p_sockaddr_in swig_types[94]
#define SWIGTYPE_p_sockaddr_in6 swig_types[95]
#define SWIGTYPE_p_socklen_t swig_types[96]
#define SWIGTYPE_p_ssize_t swig_types[97]
#define SWIGTYPE_p_std__filesystem__directory_entry swig_types[98]
#define SWIGTYPE_p_std__filesystem__file_status swig_types[99]
#define SWIGTYPE_p_std__functionT_void_fvoidF_t swig_types[100]
#define SWIGTYPE_p_std__initializer_listT_SWIGLUA_REF_t swig_types[101]
#define SWIGTYPE_p_std__initializer_listT_Std__StdString_t swig_types[102]
#define SWIGTYPE_p_std__initializer_listT_double_t swig_types[103]
#define SWIGTYPE_p_std__initializer_listT_float_t swig_types[104]
#define SWIGTYPE_p_std__initializer_listT_int_t swig_types[105]
#define SWIGTYPE_p_std__initializer_listT_long_long_t swig_types[106]
#define SWIGTYPE_p_std__initializer_listT_long_t swig_types[107]
#define SWIGTYPE_p_std__initializer_listT_short_t swig_types[108]
#define SWIGTYPE_p_std__initializer_listT_signed_char_t swig_types[109]
#define SWIGTYPE_p_std__initializer_listT_unsigned_char_t swig_types[110]
#define SWIGTYPE_p_std__initializer_listT_unsigned_int_t swig_types[111]
#define SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t swig_types[112]
#define SWIGTYPE_p_std__initializer_listT_unsigned_long_t swig_types[113]
#define SWIGTYPE_p_std__initializer_listT_unsigned_short_t swig_types[114]
#define SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t swig_types[115]
#define SWIGTYPE_p_std__string swig_types[116]
#define SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t swig_types[117]
#define SWIGTYPE_p_std__vectorT_Std__StdString_t swig_types[118]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[119]
#define SWIGTYPE_p_std__vectorT_char_t swig_types[120]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[121]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[122]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[123]
#define SWIGTYPE_p_std__vectorT_long_double_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[127]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[134]
#define SWIGTYPE_p_unsigned_char swig_types[135]
#define SWIGTYPE_p_unsigned_int swig_types[136]
#define SWIGTYPE_p_unsigned_long swig_types[137]
#define SWIGTYPE_p_unsigned_long_long swig_types[138]
#define SWIGTYPE_p_unsigned_short swig_types[139]
#define SWIGTYPE_p_void swig_types[140]
static swig_type_info *swig_types[142];
static swig_module_info swig_module = {swig_types, 141, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Std"
#define SWIG_init      luaopen_Std
#define SWIG_init_user luaopen_Std_user

#define SWIG_LUACODE   luaopen_Std_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


extern "C" {
#include "gnuplot_i.h"
}
#include "Std/StdObject.h"
#include "Std/Std.h"   
#include "Std/datalogic.h"
#include "Std/StdCsv.h" 
#include "Std/StdJson.h"
#include "Std/StdFileSystem.h"
#include "Std/StdPosix.h"
#include "Std/StdMath.h"
#include "Std/StdPlot.h"
#include "Std/StdAssocMap.h"
#include "Std/StdCBuffer.h"
#include "Std/StdComplex.h"
#include "Std/StdScalar.h"
#include "Std/StdDeque.h"
#include "Std/StdForwardList.h"
#include "Std/StdList.h"
#include "Std/StdRandom.h"
#include "Std/StdQueue.h"
#include "Std/StdSet.h"
#include "Std/StdStack.h"
#include "Std/StdDir.h"
#include "Std/StdFile.h"
#include "Std/StdValArray.h"
#include "Std/StdVecarray.h"

//#include "SQLite++/sqlite3pp.h"

using namespace Std;
using namespace Json;
//using namespace std;


    typedef signed char int8_t;
    typedef unsigned char uint8_t;
    typedef signed short int16_t;
    typedef unsigned short uint16_t;
    typedef signed int int32_t;
    typedef unsigned int uint32_t;
    typedef signed long long i64_t;
    typedef unsigned long long u64_t;


#include <stdint.h>		// Use the C99 official header


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



    void srand() { std::srand(::time(NULL)); }
    float randomf(float min = 0.0f, float max = 1.0f) { return min + (max-min)* ((float)rand() / (float)RAND_MAX); }
    int system(const char * cmd) { return std::system(cmd); }
    void abort() { std::abort(); }
    void exit(int exit_code=-1) { std::exit(exit_code); }
    char* getenv(const char * var) { return std::getenv(var); }
    int   setenv(const char * name, const char * val, int overwrite) { return ::setenv(name,val,overwrite); }
    int unsetenv(const char * name) { return ::unsetenv(name); }
    int putenv(char * string) { return ::putenv(string); }
    int raise(int sig) { return std::raise(sig); }
   

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_StdObject_name(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdObject::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::name",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_name",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = ((Std::StdObject const *)arg1)->name();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_save(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdObject::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::save",1,"Std::StdObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdObject::save",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_save",1,SWIGTYPE_p_Std__StdObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdObject_save",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->save(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_load(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdObject::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::load",1,"Std::StdObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdObject::load",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_load",1,SWIGTYPE_p_Std__StdObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdObject_load",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->load(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_str(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdObject::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::str",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_str",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = ((Std::StdObject const *)arg1)->str();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdObject_ptr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *arg1 = (Std::StdObject *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Std::StdObject::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdObject::ptr",1,"Std::StdObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdObject,0))){
    SWIG_fail_ptr("StdObject_ptr",1,SWIGTYPE_p_Std__StdObject);
  }
  
  result = (void *)((Std::StdObject const *)arg1)->ptr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdObject(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdObject *result = 0 ;
  
  SWIG_check_num_args("Std::StdObject::StdObject",0,0)
  result = (Std::StdObject *)new Std::StdObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdObject(void *obj) {
Std::StdObject *arg1 = (Std::StdObject *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdObject(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdObject);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdObject_methods[]= {
    { "name", _wrap_StdObject_name},
    { "save", _wrap_StdObject_save},
    { "load", _wrap_StdObject_load},
    { "str", _wrap_StdObject_str},
    { "ptr", _wrap_StdObject_ptr},
    {0,0}
};
static swig_lua_method swig_StdObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdObject_Sf_SwigStatic = {
    "StdObject",
    swig_StdObject_Sf_SwigStatic_methods,
    swig_StdObject_Sf_SwigStatic_attributes,
    swig_StdObject_Sf_SwigStatic_constants,
    swig_StdObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdObject_bases[] = {0};
static const char *swig_StdObject_base_names[] = {0};
static swig_lua_class _wrap_class_StdObject = { "StdObject", "StdObject", &SWIGTYPE_p_Std__StdObject,_proxy__wrap_new_StdObject, swig_delete_StdObject, swig_StdObject_methods, swig_StdObject_attributes, &swig_StdObject_Sf_SwigStatic, swig_StdObject_meta, swig_StdObject_bases, swig_StdObject_base_names };

static int _wrap_randint(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Std::randint",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randint",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randint",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)Std::randint(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randint64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("Std::randint64",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randint64",1,"int64_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randint64",2,"int64_t");
  arg1 = (int64_t)lua_tonumber(L, 1);
  arg2 = (int64_t)lua_tonumber(L, 2);
  result = (int64_t)Std::randint64(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randchar(lua_State* L) {
  int SWIG_arg = 0;
  char result;
  
  SWIG_check_num_args("Std::randchar",0,0)
  result = (char)Std::randchar();
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randfloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Std::randfloat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randfloat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randfloat",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)Std::randfloat(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randdbl(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::randdbl",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::randdbl",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::randdbl",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)Std::randdbl(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  bool result;
  
  SWIG_check_num_args("Std::flip",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::flip",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (bool)Std::flip(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("Std::flip",0,0)
  result = (bool)Std::flip();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flip(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_flip__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_flip__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'flip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::flip(double)\n"
    "    Std::flip()\n");
  lua_error(L);return 0;
}


static int _wrap_new_StdRandom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  Std::StdRandom *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandom::StdRandom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdRandom::StdRandom",1,"int64_t");
  arg1 = (int64_t)lua_tonumber(L, 1);
  result = (Std::StdRandom *)new Std::StdRandom(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdRandom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandom::StdRandom",0,0)
  result = (Std::StdRandom *)new Std::StdRandom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdRandom(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdRandom__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdRandom__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdRandom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandom::StdRandom(int64_t)\n"
    "    Std::StdRandom::StdRandom()\n");
  lua_error(L);return 0;
}


static int _wrap_StdRandom_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandom::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::rand",1,"Std::StdRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_rand",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  result = (float)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randi(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::StdRandom::randi",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randi",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randi",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randi",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randi",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->randi(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randi64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandom::randi64",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randi64",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randi64",2,"int64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randi64",3,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randi64",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  arg3 = (int64_t)lua_tonumber(L, 3);
  result = (int64_t)(arg1)->randi64(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randf32(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandom::randf32",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randf32",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randf32",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randf32",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randf32",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->randf32(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_randf64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::StdRandom::randf64",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::randf64",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::randf64",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandom::randf64",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_randf64",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->randf64(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::StdRandom::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::flip",1,"Std::StdRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandom::flip",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_flip",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->flip(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandom *arg1 = (Std::StdRandom *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdRandom::flip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandom::flip",1,"Std::StdRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandom,0))){
    SWIG_fail_ptr("StdRandom_flip",1,SWIGTYPE_p_Std__StdRandom);
  }
  
  result = (bool)(arg1)->flip();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandom_flip(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdRandom_flip__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdRandom_flip__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdRandom_flip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandom::flip(double)\n"
    "    Std::StdRandom::flip()\n");
  lua_error(L);return 0;
}


static void swig_delete_StdRandom(void *obj) {
Std::StdRandom *arg1 = (Std::StdRandom *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandom(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandom);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandom_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandom_methods[]= {
    { "rand", _wrap_StdRandom_rand},
    { "randi", _wrap_StdRandom_randi},
    { "randi64", _wrap_StdRandom_randi64},
    { "randf32", _wrap_StdRandom_randf32},
    { "randf64", _wrap_StdRandom_randf64},
    { "flip", _wrap_StdRandom_flip},
    {0,0}
};
static swig_lua_method swig_StdRandom_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdRandom_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandom_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandom_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandom_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandom_Sf_SwigStatic = {
    "StdRandom",
    swig_StdRandom_Sf_SwigStatic_methods,
    swig_StdRandom_Sf_SwigStatic_attributes,
    swig_StdRandom_Sf_SwigStatic_constants,
    swig_StdRandom_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandom_bases[] = {0};
static const char *swig_StdRandom_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandom = { "StdRandom", "StdRandom", &SWIGTYPE_p_Std__StdRandom,_proxy__wrap_new_StdRandom, swig_delete_StdRandom, swig_StdRandom_methods, swig_StdRandom_attributes, &swig_StdRandom_Sf_SwigStatic, swig_StdRandom_meta, swig_StdRandom_bases, swig_StdRandom_base_names };

static int _wrap_new_StdRandomUniform(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform::StdRandomUniform",0,0)
  result = (Std::StdRandomUniform *)new Std::StdRandomUniform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandomUniform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::operator ()",1,"Std::StdRandomUniform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform___call",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::random",1,"Std::StdRandomUniform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_random",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  result = (float)(arg1)->random();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Std::StdRandomUniform::random",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::random",1,"Std::StdRandomUniform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform::random",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdRandomUniform::random",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_random",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->random(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandomUniform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdRandomUniform_random__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdRandomUniform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdRandomUniform_random__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdRandomUniform_random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdRandomUniform::random()\n"
    "    Std::StdRandomUniform::random(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_StdRandomUniform_process(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform::process",1,"Std::StdRandomUniform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform::process",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdRandomUniform::process",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform,0))){
    SWIG_fail_ptr("StdRandomUniform_process",1,SWIGTYPE_p_Std__StdRandomUniform);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("StdRandomUniform_process",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->process(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdRandomUniform(void *obj) {
Std::StdRandomUniform *arg1 = (Std::StdRandomUniform *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandomUniform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandomUniform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandomUniform_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandomUniform_methods[]= {
    { "__call", _wrap_StdRandomUniform___call},
    { "random", _wrap_StdRandomUniform_random},
    { "process", _wrap_StdRandomUniform_process},
    {0,0}
};
static swig_lua_method swig_StdRandomUniform_meta[] = {
    { "__call", _wrap_StdRandomUniform___call},
    {0,0}
};

static swig_lua_attribute swig_StdRandomUniform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandomUniform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandomUniform_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandomUniform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandomUniform_Sf_SwigStatic = {
    "StdRandomUniform",
    swig_StdRandomUniform_Sf_SwigStatic_methods,
    swig_StdRandomUniform_Sf_SwigStatic_attributes,
    swig_StdRandomUniform_Sf_SwigStatic_constants,
    swig_StdRandomUniform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandomUniform_bases[] = {0};
static const char *swig_StdRandomUniform_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandomUniform = { "StdRandomUniform", "StdRandomUniform", &SWIGTYPE_p_Std__StdRandomUniform,_proxy__wrap_new_StdRandomUniform, swig_delete_StdRandomUniform, swig_StdRandomUniform_methods, swig_StdRandomUniform_attributes, &swig_StdRandomUniform_Sf_SwigStatic, swig_StdRandomUniform_meta, swig_StdRandomUniform_bases, swig_StdRandomUniform_base_names };

static int _wrap_new_StdRandomUniform64(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *result = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform64::StdRandomUniform64",0,0)
  result = (Std::StdRandomUniform64 *)new Std::StdRandomUniform64();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdRandomUniform64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64___call(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandomUniform64::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::operator ()",1,"Std::StdRandomUniform64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64___call",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  result = (int64_t)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64_random(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdRandomUniform64::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::random",1,"Std::StdRandomUniform64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64_random",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  result = (int64_t)(arg1)->random();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdRandomUniform64_process(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) 0 ;
  size_t arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdRandomUniform64::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdRandomUniform64::process",1,"Std::StdRandomUniform64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdRandomUniform64::process",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdRandomUniform64::process",3,"std::vector< int64_t > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdRandomUniform64,0))){
    SWIG_fail_ptr("StdRandomUniform64_process",1,SWIGTYPE_p_Std__StdRandomUniform64);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("StdRandomUniform64_process",3,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->process(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdRandomUniform64(void *obj) {
Std::StdRandomUniform64 *arg1 = (Std::StdRandomUniform64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdRandomUniform64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdRandomUniform64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdRandomUniform64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdRandomUniform64_methods[]= {
    { "__call", _wrap_StdRandomUniform64___call},
    { "random", _wrap_StdRandomUniform64_random},
    { "process", _wrap_StdRandomUniform64_process},
    {0,0}
};
static swig_lua_method swig_StdRandomUniform64_meta[] = {
    { "__call", _wrap_StdRandomUniform64___call},
    {0,0}
};

static swig_lua_attribute swig_StdRandomUniform64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdRandomUniform64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdRandomUniform64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdRandomUniform64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdRandomUniform64_Sf_SwigStatic = {
    "StdRandomUniform64",
    swig_StdRandomUniform64_Sf_SwigStatic_methods,
    swig_StdRandomUniform64_Sf_SwigStatic_attributes,
    swig_StdRandomUniform64_Sf_SwigStatic_constants,
    swig_StdRandomUniform64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdRandomUniform64_bases[] = {0};
static const char *swig_StdRandomUniform64_base_names[] = {0};
static swig_lua_class _wrap_class_StdRandomUniform64 = { "StdRandomUniform64", "StdRandomUniform64", &SWIGTYPE_p_Std__StdRandomUniform64,_proxy__wrap_new_StdRandomUniform64, swig_delete_StdRandomUniform64, swig_StdRandomUniform64_methods, swig_StdRandomUniform64_attributes, &swig_StdRandomUniform64_Sf_SwigStatic, swig_StdRandomUniform64_meta, swig_StdRandomUniform64_bases, swig_StdRandomUniform64_base_names };

static int _wrap_StdBitVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  std::vector< bool > *arg2 = (std::vector< bool > *) 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::vec",1,"Std::StdBitVector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdBitVector::vec",2,"std::vector< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_vec_set",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("StdBitVector_vec_set",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  if (arg1) (arg1)->vec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::vec",1,"Std::StdBitVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_vec_get",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result = (std::vector< bool > *)& ((arg1)->vec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *result = 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::StdBitVector",0,0)
  result = (Std::StdBitVector *)new Std::StdBitVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdBitVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdBitVector *result = 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::StdBitVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdBitVector::StdBitVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdBitVector *)new Std::StdBitVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdBitVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdBitVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdBitVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdBitVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdBitVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdBitVector::StdBitVector()\n"
    "    Std::StdBitVector::StdBitVector(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StdBitVector_flip(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdBitVector::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::flip",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::flip",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_flip",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->flip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdBitVector::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::set",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::set",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_set",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::StdBitVector::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::get",1,"Std::StdBitVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdBitVector::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_get",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->get(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdBitVector::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::size",1,"Std::StdBitVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_size",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result = ((Std::StdBitVector const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_bytes(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdBitVector::bytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::bytes",1,"Std::StdBitVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_bytes",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  result = ((Std::StdBitVector const *)arg1)->bytes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdBitVector_ptr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdBitVector *arg1 = (Std::StdBitVector *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Std::StdBitVector::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdBitVector::ptr",1,"Std::StdBitVector *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdBitVector::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdBitVector,0))){
    SWIG_fail_ptr("StdBitVector_ptr",1,SWIGTYPE_p_Std__StdBitVector);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"StdBitVector_ptr");
  (arg1)->ptr(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdBitVector(void *obj) {
Std::StdBitVector *arg1 = (Std::StdBitVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdBitVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdBitVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdBitVector_attributes[] = {
    { "vec", _wrap_StdBitVector_vec_get, _wrap_StdBitVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_StdBitVector_methods[]= {
    { "flip", _wrap_StdBitVector_flip},
    { "set", _wrap_StdBitVector_set},
    { "get", _wrap_StdBitVector_get},
    { "size", _wrap_StdBitVector_size},
    { "bytes", _wrap_StdBitVector_bytes},
    { "ptr", _wrap_StdBitVector_ptr},
    {0,0}
};
static swig_lua_method swig_StdBitVector_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdBitVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdBitVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdBitVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdBitVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdBitVector_Sf_SwigStatic = {
    "StdBitVector",
    swig_StdBitVector_Sf_SwigStatic_methods,
    swig_StdBitVector_Sf_SwigStatic_attributes,
    swig_StdBitVector_Sf_SwigStatic_constants,
    swig_StdBitVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdBitVector_bases[] = {0};
static const char *swig_StdBitVector_base_names[] = {0};
static swig_lua_class _wrap_class_StdBitVector = { "StdBitVector", "StdBitVector", &SWIGTYPE_p_Std__StdBitVector,_proxy__wrap_new_StdBitVector, swig_delete_StdBitVector, swig_StdBitVector_methods, swig_StdBitVector_attributes, &swig_StdBitVector_Sf_SwigStatic, swig_StdBitVector_meta, swig_StdBitVector_bases, swig_StdBitVector_base_names };

static int _wrap_StdString_str_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdString::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::str",1,"Std::StdString *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdString::str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_str_set",1,SWIGTYPE_p_Std__StdString);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->str = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_str_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::str",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_str_get",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (std::string *) & ((arg1)->str);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",0,0)
  result = (Std::StdString *)new Std::StdString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::StdString *)new Std::StdString((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Std::StdString *)new Std::StdString((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::StdString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdString::StdString",1,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("new_StdString",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (Std::StdString *)new Std::StdString((Std::StdString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StdString__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StdString__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StdString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::StdString()\n"
    "    Std::StdString::StdString(char const *)\n"
    "    Std::StdString::StdString(std::string const &)\n"
    "    Std::StdString::StdString(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::data",1,"Std::StdString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_data",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (char *)((Std::StdString const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::size",1,"Std::StdString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_size",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = ((Std::StdString const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdString::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::empty",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_empty",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::clear",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_clear",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Std::StdString::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->insert(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char arg4 ;
  
  SWIG_check_num_args("Std::StdString::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"size_t");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Std::StdString::insert",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  (arg1)->insert(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Std::StdString::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::fill",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::StdString::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_fill",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->fill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdString::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::insert",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdString::insert",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_insert",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdString_insert__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_StdString_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_StdString_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::insert(size_t,char)\n"
    "    Std::StdString::insert(size_t,size_t,char)\n"
    "    Std::StdString::insert(size_t,Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdString::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::erase",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_erase",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::erase",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_erase",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::erase(size_t,size_t)\n"
    "    Std::StdString::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::push_back",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_push_back",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::StdString::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::pop_back",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_pop_back",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (char)(arg1)->pop_back();
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdString::append",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::append",1,"Std::StdString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdString::append",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::append",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_append",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->append(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::StdString::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::append",1,"Std::StdString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdString::append",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_append",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->append(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_append(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_StdString_append__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_append__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::append(char,size_t)\n"
    "    Std::StdString::append(char)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_replace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *arg4 = 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::replace",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::replace",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdString::replace",4,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_replace",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_replace",4,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->replace(arg2,arg3,(Std::StdString const &)*arg4);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdString::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::resize",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_resize",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_mutate(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::mutate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::mutate",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->mutate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Std::StdString::uniform_mutate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::uniform_mutate",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::uniform_mutate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_uniform_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->uniform_mutate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::uniform_mutate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::uniform_mutate",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_uniform_mutate",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->uniform_mutate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_uniform_mutate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_uniform_mutate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_uniform_mutate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_uniform_mutate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::uniform_mutate(float)\n"
    "    Std::StdString::uniform_mutate()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_crossover(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdString::crossover",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::crossover",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::crossover",2,"Std::StdString const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdString::crossover",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",2,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_crossover",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->crossover((Std::StdString const &)*arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Std::StdString::string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::string",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_string",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (std::string *) &(arg1)->string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_substr(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::substr",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_substr",1,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator +",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::operator +",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->operator +((Std::StdString const &)*arg2);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator +",1,"Std::StdString *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdString::operator +",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___add",1,SWIGTYPE_p_Std__StdString);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->operator +((std::string const &)*arg2);
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::operator +(Std::StdString const &)\n"
    "    Std::StdString::operator +(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdString::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::operator ==",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::operator ==",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___eq",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString___eq",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->operator ==((Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("Std::StdString::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int32",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int32",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int32_t)(arg1)->to_int32(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("Std::StdString::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int32",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int32",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (int32_t)(arg1)->to_int32();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::to_int32(int)\n"
    "    Std::StdString::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdString::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int64",1,"Std::StdString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdString::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int64",1,SWIGTYPE_p_Std__StdString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int64_t)(arg1)->to_int64(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::StdString::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_int64",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_int64",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (int64_t)(arg1)->to_int64();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StdString_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdString_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::to_int64(int)\n"
    "    Std::StdString::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_to_float(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdString::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_float",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_float",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (float)(arg1)->to_float();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_to_double(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::StdString::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::to_double",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_to_double",1,SWIGTYPE_p_Std__StdString);
  }
  
  result = (double)(arg1)->to_double();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_reverse(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::reverse",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_reverse",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->reverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_sort(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::sort",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_sort",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::shuffle",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_shuffle",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->shuffle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_getline(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  
  SWIG_check_num_args("Std::StdString::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::getline",1,"Std::StdString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_getline",1,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->getline();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::find",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::find",2,"Std::StdString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",2,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((Std::StdString const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::find",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::find",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_find",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->find((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::find(Std::StdString const &,size_t)\n"
    "    Std::StdString::find(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::rfind",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::rfind",2,"Std::StdString const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdString::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",2,SWIGTYPE_p_Std__StdString);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((Std::StdString const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdString::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::rfind",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::rfind",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_rfind",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (arg1)->rfind((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdString_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StdString_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdString_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdString_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdString::rfind(Std::StdString const &,size_t)\n"
    "    Std::StdString::rfind(Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdString_compare(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = (Std::StdString *) 0 ;
  Std::StdString *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("Std::StdString::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdString::compare",1,"Std::StdString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdString::compare",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_compare",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdString_compare",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (int)(arg1)->compare((Std::StdString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdString(void *obj) {
Std::StdString *arg1 = (Std::StdString *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdString_attributes[] = {
    { "str", _wrap_StdString_str_get, _wrap_StdString_str_set },
    {0,0,0}
};
static swig_lua_method swig_StdString_methods[]= {
    { "data", _wrap_StdString_data},
    { "size", _wrap_StdString_size},
    { "empty", _wrap_StdString_empty},
    { "clear", _wrap_StdString_clear},
    { "fill", _wrap_StdString_fill},
    { "insert", _wrap_StdString_insert},
    { "erase", _wrap_StdString_erase},
    { "push_back", _wrap_StdString_push_back},
    { "pop_back", _wrap_StdString_pop_back},
    { "append", _wrap_StdString_append},
    { "replace", _wrap_StdString_replace},
    { "resize", _wrap_StdString_resize},
    { "mutate", _wrap_StdString_mutate},
    { "uniform_mutate", _wrap_StdString_uniform_mutate},
    { "crossover", _wrap_StdString_crossover},
    { "string", _wrap_StdString_string},
    { "substr", _wrap_StdString_substr},
    { "__add", _wrap_StdString___add},
    { "__eq", _wrap_StdString___eq},
    { "to_int32", _wrap_StdString_to_int32},
    { "to_int64", _wrap_StdString_to_int64},
    { "to_float", _wrap_StdString_to_float},
    { "to_double", _wrap_StdString_to_double},
    { "reverse", _wrap_StdString_reverse},
    { "sort", _wrap_StdString_sort},
    { "shuffle", _wrap_StdString_shuffle},
    { "getline", _wrap_StdString_getline},
    { "find", _wrap_StdString_find},
    { "rfind", _wrap_StdString_rfind},
    { "compare", _wrap_StdString_compare},
    {0,0}
};
static swig_lua_method swig_StdString_meta[] = {
    { "__add", _wrap_StdString___add},
    { "__eq", _wrap_StdString___eq},
    {0,0}
};

static swig_lua_attribute swig_StdString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdString_Sf_SwigStatic = {
    "StdString",
    swig_StdString_Sf_SwigStatic_methods,
    swig_StdString_Sf_SwigStatic_attributes,
    swig_StdString_Sf_SwigStatic_constants,
    swig_StdString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdString_bases[] = {0};
static const char *swig_StdString_base_names[] = {0};
static swig_lua_class _wrap_class_StdString = { "StdString", "StdString", &SWIGTYPE_p_Std__StdString,_proxy__wrap_new_StdString, swig_delete_StdString, swig_StdString_methods, swig_StdString_attributes, &swig_StdString_Sf_SwigStatic, swig_StdString_meta, swig_StdString_bases, swig_StdString_base_names };

static int _wrap___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator ==",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator ==",1,"Std::StdString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator ==",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__eq",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__eq",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)Std::operator ==((Std::StdString const &)*arg1,(Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___lt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdString *arg1 = 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator <",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator <",1,"Std::StdString const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator <",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__lt",1,SWIGTYPE_p_Std__StdString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("__lt",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)Std::operator <((Std::StdString const &)*arg1,(Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_map_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  std::map< Std::StdString,Std::StdString > *arg2 = (std::map< Std::StdString,Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::map",1,"Std::StdStringMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdStringMap::map",2,"std::map< Std::StdString,Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_map_set",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t,0))){
    SWIG_fail_ptr("StdStringMap_map_set",2,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t);
  }
  
  if (arg1) (arg1)->map = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_map_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  std::map< Std::StdString,Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::map",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::map",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_map_get",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = (std::map< Std::StdString,Std::StdString > *)& ((arg1)->map);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_Std__StdString_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdStringMap(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::StdStringMap",0,0)
  result = (Std::StdStringMap *)new Std::StdStringMap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdStringMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_contains(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdStringMap::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::contains",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::contains",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_contains",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_contains",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (bool)(arg1)->contains((Std::StdString const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::at",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::at",2,"Std::StdString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_at",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_at",2,SWIGTYPE_p_Std__StdString);
  }
  
  result = (Std::StdString *) &(arg1)->at(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdStringMap::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::empty",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_empty",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdStringMap::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::size",1,"Std::StdStringMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_size",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  result = ((Std::StdStringMap const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::clear",1,"Std::StdStringMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_clear",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_insert(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::StdStringMap::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::insert",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::insert",2,"Std::StdString const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::StdStringMap::insert",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_insert",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_insert",2,SWIGTYPE_p_Std__StdString);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->insert((Std::StdString const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdStringMap_erase(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdStringMap *arg1 = (Std::StdStringMap *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdStringMap::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdStringMap::erase",1,"Std::StdStringMap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdStringMap::erase",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdStringMap,0))){
    SWIG_fail_ptr("StdStringMap_erase",1,SWIGTYPE_p_Std__StdStringMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("StdStringMap_erase",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->erase((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdStringMap(void *obj) {
Std::StdStringMap *arg1 = (Std::StdStringMap *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdStringMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdStringMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdStringMap_attributes[] = {
    { "map", _wrap_StdStringMap_map_get, _wrap_StdStringMap_map_set },
    {0,0,0}
};
static swig_lua_method swig_StdStringMap_methods[]= {
    { "contains", _wrap_StdStringMap_contains},
    { "at", _wrap_StdStringMap_at},
    { "empty", _wrap_StdStringMap_empty},
    { "size", _wrap_StdStringMap_size},
    { "clear", _wrap_StdStringMap_clear},
    { "insert", _wrap_StdStringMap_insert},
    { "erase", _wrap_StdStringMap_erase},
    {0,0}
};
static swig_lua_method swig_StdStringMap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdStringMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdStringMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdStringMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdStringMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdStringMap_SwigStatic = {
    "StdStringMap",
    swig_StdStringMap_SwigStatic_methods,
    swig_StdStringMap_SwigStatic_attributes,
    swig_StdStringMap_SwigStatic_constants,
    swig_StdStringMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdStringMap_bases[] = {0};
static const char *swig_StdStringMap_base_names[] = {0};
static swig_lua_class _wrap_class_StdStringMap = { "StdStringMap", "StdStringMap", &SWIGTYPE_p_Std__StdStringMap,_proxy__wrap_new_StdStringMap, swig_delete_StdStringMap, swig_StdStringMap_methods, swig_StdStringMap_attributes, &swig_StdStringMap_SwigStatic, swig_StdStringMap_meta, swig_StdStringMap_bases, swig_StdStringMap_base_names };

static int _wrap_Anything_c_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::Anything::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::c",1,"Std::Anything *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Anything::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_c_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_c_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::Anything::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::c",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_c_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (char) ((arg1)->c);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_uc_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Std::Anything::uc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::uc",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::uc",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_uc_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->uc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_uc_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Std::Anything::uc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::uc",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_uc_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (unsigned char) ((arg1)->uc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i8_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int8_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i8",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i8",2,"int8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i8_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i8_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int8_t result;
  
  SWIG_check_num_args("Std::Anything::i8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i8",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i8_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int8_t) ((arg1)->i8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u8_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u8",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u8",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u8_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u8 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u8_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("Std::Anything::u8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u8",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u8_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint8_t) ((arg1)->u8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i16_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int16_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i16",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i16",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i16_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int16_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i16_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int16_t result;
  
  SWIG_check_num_args("Std::Anything::i16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i16",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i16_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int16_t) ((arg1)->i16);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u16_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint16_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u16",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u16",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u16",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u16_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint16_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u16 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u16_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint16_t result;
  
  SWIG_check_num_args("Std::Anything::u16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u16",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u16_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint16_t) ((arg1)->u16);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i32_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int32_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i32",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i32",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i32_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i32_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("Std::Anything::i32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i32",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i32_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int32_t) ((arg1)->i32);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u32_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u32",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u32",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u32_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u32_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("Std::Anything::u32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u32",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u32_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint32_t) ((arg1)->u32);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i64_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::i64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i64",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::i64",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i64_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_i64_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("Std::Anything::i64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::i64",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_i64_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (int64_t) ((arg1)->i64);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u64_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint64_t arg2 ;
  
  SWIG_check_num_args("Std::Anything::u64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u64",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::u64",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u64_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (uint64_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->u64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_u64_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("Std::Anything::u64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::u64",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_u64_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (uint64_t) ((arg1)->u64);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Std::Anything::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::f",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::f",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_f_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::Anything::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::f",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_f_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Std::Anything::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::d",1,"Std::Anything *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Anything::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_d_set",1,SWIGTYPE_p_Std__Anything);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Anything_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *arg1 = (Std::Anything *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::Anything::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Anything::d",1,"Std::Anything *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Anything,0))){
    SWIG_fail_ptr("Anything_d_get",1,SWIGTYPE_p_Std__Anything);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Anything(lua_State* L) {
  int SWIG_arg = 0;
  Std::Anything *result = 0 ;
  
  SWIG_check_num_args("Std::Anything::Anything",0,0)
  result = (Std::Anything *)new Std::Anything();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Anything,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Anything(void *obj) {
Std::Anything *arg1 = (Std::Anything *) obj;
delete arg1;
}
static int _proxy__wrap_new_Anything(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Anything);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Anything_attributes[] = {
    { "c", _wrap_Anything_c_get, _wrap_Anything_c_set },
    { "uc", _wrap_Anything_uc_get, _wrap_Anything_uc_set },
    { "i8", _wrap_Anything_i8_get, _wrap_Anything_i8_set },
    { "u8", _wrap_Anything_u8_get, _wrap_Anything_u8_set },
    { "i16", _wrap_Anything_i16_get, _wrap_Anything_i16_set },
    { "u16", _wrap_Anything_u16_get, _wrap_Anything_u16_set },
    { "i32", _wrap_Anything_i32_get, _wrap_Anything_i32_set },
    { "u32", _wrap_Anything_u32_get, _wrap_Anything_u32_set },
    { "i64", _wrap_Anything_i64_get, _wrap_Anything_i64_set },
    { "u64", _wrap_Anything_u64_get, _wrap_Anything_u64_set },
    { "f", _wrap_Anything_f_get, _wrap_Anything_f_set },
    { "d", _wrap_Anything_d_get, _wrap_Anything_d_set },
    {0,0,0}
};
static swig_lua_method swig_Anything_methods[]= {
    {0,0}
};
static swig_lua_method swig_Anything_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Anything_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Anything_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Anything_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Anything_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Anything_Sf_SwigStatic = {
    "Anything",
    swig_Anything_Sf_SwigStatic_methods,
    swig_Anything_Sf_SwigStatic_attributes,
    swig_Anything_Sf_SwigStatic_constants,
    swig_Anything_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Anything_bases[] = {0};
static const char *swig_Anything_base_names[] = {0};
static swig_lua_class _wrap_class_Anything = { "Anything", "Anything", &SWIGTYPE_p_Std__Anything,_proxy__wrap_new_Anything, swig_delete_Anything, swig_Anything_methods, swig_Anything_attributes, &swig_Anything_Sf_SwigStatic, swig_Anything_meta, swig_Anything_bases, swig_Anything_base_names };

static int _wrap_BasicType_c_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("Std::BasicType::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::c",1,"Std::BasicType *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::BasicType::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_c_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_c_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  char result;
  
  SWIG_check_num_args("Std::BasicType::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::c",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_c_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (char) ((arg1)->c);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Std::BasicType::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::b",1,"Std::BasicType *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::BasicType::b",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_b_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BasicType::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::b",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_b_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (bool) ((arg1)->b);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_d_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Std::BasicType::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::d",1,"Std::BasicType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BasicType::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_d_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_d_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::BasicType::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::d",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_d_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ptr",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::ptr",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ptr_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"BasicType_ptr_set");
  if (arg1) (arg1)->ptr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ptr",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ptr_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (void *) ((arg1)->ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_str_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::BasicType::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::str",1,"Std::BasicType *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::BasicType::str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_str_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->str = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_str_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::str",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_str_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::string *) & ((arg1)->str);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_char_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::char_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::char_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::char_vector",2,"std::vector< char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_char_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_char_t,0))){
    SWIG_fail_ptr("BasicType_char_vector_set",2,SWIGTYPE_p_std__vectorT_char_t);
  }
  
  if (arg1) (arg1)->char_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_char_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< char > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::char_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::char_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_char_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< char > *)& ((arg1)->char_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_byte_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::byte_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::byte_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::byte_vector",2,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_byte_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("BasicType_byte_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->byte_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_byte_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::byte_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::byte_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_byte_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< unsigned char > *)& ((arg1)->byte_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int8_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int8_t > *arg2 = (std::vector< int8_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::int8_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int8_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::int8_vector",2,"std::vector< int8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int8_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("BasicType_int8_vector_set",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  if (arg1) (arg1)->int8_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int8_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::int8_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int8_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int8_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< int8_t > *)& ((arg1)->int8_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint8_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint8_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint8_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::uint8_vector",2,"std::vector< uint8_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->uint8_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint8_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint8_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint8_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint8_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< uint8_t > *)& ((arg1)->uint8_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int16_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int16_t > *arg2 = (std::vector< int16_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::int16_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int16_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::int16_vector",2,"std::vector< int16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int16_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("BasicType_int16_vector_set",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  if (arg1) (arg1)->int16_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int16_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::int16_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int16_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int16_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< int16_t > *)& ((arg1)->int16_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint16_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint16_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint16_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::uint16_vector",2,"std::vector< uint16_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->uint16_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint16_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint16_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint16_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint16_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< uint16_t > *)& ((arg1)->uint16_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int32_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::int32_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int32_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::int32_vector",2,"std::vector< int32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int32_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("BasicType_int32_vector_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  if (arg1) (arg1)->int32_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int32_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::int32_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int32_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int32_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< int32_t > *)& ((arg1)->int32_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint32_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint32_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint32_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::uint32_vector",2,"std::vector< uint32_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->uint32_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint32_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint32_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint32_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint32_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< uint32_t > *)& ((arg1)->uint32_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int64_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int64_t > *arg2 = (std::vector< int64_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::int64_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int64_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::int64_vector",2,"std::vector< int64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int64_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("BasicType_int64_vector_set",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  if (arg1) (arg1)->int64_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_int64_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< int64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::int64_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::int64_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_int64_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< int64_t > *)& ((arg1)->int64_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint64_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint64_t > *arg2 = (std::vector< uint64_t > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint64_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint64_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::uint64_vector",2,"std::vector< uint64_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  if (arg1) (arg1)->uint64_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_uint64_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::uint64_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::uint64_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_uint64_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< uint64_t > *)& ((arg1)->uint64_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_float_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::float_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::float_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::float_vector",2,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_float_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("BasicType_float_vector_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  if (arg1) (arg1)->float_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_float_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::float_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::float_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_float_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< float > *)& ((arg1)->float_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_double_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::double_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::double_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::double_vector",2,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_double_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("BasicType_double_vector_set",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  if (arg1) (arg1)->double_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_double_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::double_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::double_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_double_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< double > *)& ((arg1)->double_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ldouble_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< long double > *arg2 = (std::vector< long double > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::ldouble_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ldouble_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::ldouble_vector",2,"std::vector< long double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_double_t,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_set",2,SWIGTYPE_p_std__vectorT_long_double_t);
  }
  
  if (arg1) (arg1)->ldouble_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_ldouble_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< long double > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::ldouble_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::ldouble_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_ldouble_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< long double > *)& ((arg1)->ldouble_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_string_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("Std::BasicType::string_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::string_vector",1,"Std::BasicType *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BasicType::string_vector",2,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_string_vector_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("BasicType_string_vector_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->string_vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_string_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::string_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::string_vector",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_string_vector_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (std::vector< std::string > *)& ((arg1)->string_vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_key_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Std::BasicType::key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::key",1,"Std::BasicType *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BasicType::key",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_key_set",1,SWIGTYPE_p_Std__BasicType);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->key = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BasicType_key_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = (Std::BasicType *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::BasicType::key",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BasicType::key",1,"Std::BasicType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("BasicType_key_get",1,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (int) ((arg1)->key);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BasicType(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *result = 0 ;
  
  SWIG_check_num_args("Std::BasicType::BasicType",0,0)
  result = (Std::BasicType *)new Std::BasicType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BasicType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BasicType(void *obj) {
Std::BasicType *arg1 = (Std::BasicType *) obj;
delete arg1;
}
static int _proxy__wrap_new_BasicType(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BasicType);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BasicType_attributes[] = {
    { "c", _wrap_BasicType_c_get, _wrap_BasicType_c_set },
    { "b", _wrap_BasicType_b_get, _wrap_BasicType_b_set },
    { "d", _wrap_BasicType_d_get, _wrap_BasicType_d_set },
    { "ptr", _wrap_BasicType_ptr_get, _wrap_BasicType_ptr_set },
    { "str", _wrap_BasicType_str_get, _wrap_BasicType_str_set },
    { "char_vector", _wrap_BasicType_char_vector_get, _wrap_BasicType_char_vector_set },
    { "byte_vector", _wrap_BasicType_byte_vector_get, _wrap_BasicType_byte_vector_set },
    { "int8_vector", _wrap_BasicType_int8_vector_get, _wrap_BasicType_int8_vector_set },
    { "uint8_vector", _wrap_BasicType_uint8_vector_get, _wrap_BasicType_uint8_vector_set },
    { "int16_vector", _wrap_BasicType_int16_vector_get, _wrap_BasicType_int16_vector_set },
    { "uint16_vector", _wrap_BasicType_uint16_vector_get, _wrap_BasicType_uint16_vector_set },
    { "int32_vector", _wrap_BasicType_int32_vector_get, _wrap_BasicType_int32_vector_set },
    { "uint32_vector", _wrap_BasicType_uint32_vector_get, _wrap_BasicType_uint32_vector_set },
    { "int64_vector", _wrap_BasicType_int64_vector_get, _wrap_BasicType_int64_vector_set },
    { "uint64_vector", _wrap_BasicType_uint64_vector_get, _wrap_BasicType_uint64_vector_set },
    { "float_vector", _wrap_BasicType_float_vector_get, _wrap_BasicType_float_vector_set },
    { "double_vector", _wrap_BasicType_double_vector_get, _wrap_BasicType_double_vector_set },
    { "ldouble_vector", _wrap_BasicType_ldouble_vector_get, _wrap_BasicType_ldouble_vector_set },
    { "string_vector", _wrap_BasicType_string_vector_get, _wrap_BasicType_string_vector_set },
    { "key", _wrap_BasicType_key_get, _wrap_BasicType_key_set },
    {0,0,0}
};
static swig_lua_method swig_BasicType_methods[]= {
    {0,0}
};
static swig_lua_method swig_BasicType_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BasicType_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BasicType_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BasicType_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BasicType_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BasicType_Sf_SwigStatic = {
    "BasicType",
    swig_BasicType_Sf_SwigStatic_methods,
    swig_BasicType_Sf_SwigStatic_attributes,
    swig_BasicType_Sf_SwigStatic_constants,
    swig_BasicType_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BasicType_bases[] = {0,0};
static const char *swig_BasicType_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_BasicType = { "BasicType", "BasicType", &SWIGTYPE_p_Std__BasicType,_proxy__wrap_new_BasicType, swig_delete_BasicType, swig_BasicType_methods, swig_BasicType_attributes, &swig_BasicType_Sf_SwigStatic, swig_BasicType_meta, swig_BasicType_bases, swig_BasicType_base_names };

static int _wrap___lt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = 0 ;
  Std::BasicType *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::operator <",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator <",1,"Std::BasicType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator <",2,"Std::BasicType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__lt",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__lt",2,SWIGTYPE_p_Std__BasicType);
  }
  
  result = (bool)Std::operator <((Std::BasicType const &)*arg1,(Std::BasicType const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___lt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___lt__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___lt__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__lt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::operator <(Std::StdString const &,Std::StdString const &)\n"
    "    Std::operator <(Std::BasicType const &,Std::BasicType const &)\n");
  lua_error(L);return 0;
}


static int _wrap___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BasicType *arg1 = 0 ;
  Std::BasicType arg2 ;
  Std::BasicType *argp2 ;
  bool result;
  
  SWIG_check_num_args("Std::operator ==",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::operator ==",1,"Std::BasicType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::operator ==",2,"Std::BasicType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__eq",1,SWIGTYPE_p_Std__BasicType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Std__BasicType,0))){
    SWIG_fail_ptr("__eq",2,SWIGTYPE_p_Std__BasicType);
  }
  arg2 = *argp2;
  
  result = (bool)Std::operator ==((Std::BasicType const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__BasicType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::operator ==(Std::StdString const &,Std::StdString const &)\n"
    "    Std::operator ==(Std::BasicType const &,Std::BasicType const)\n");
  lua_error(L);return 0;
}


static int _wrap_SeparatorParams_params_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::SeparatorParams *arg1 = (Std::SeparatorParams *) 0 ;
  rapidcsv::SeparatorParams arg2 ;
  rapidcsv::SeparatorParams *argp2 ;
  
  SWIG_check_num_args("Std::SeparatorParams::params",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::SeparatorParams::params",1,"Std::SeparatorParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::SeparatorParams::params",2,"rapidcsv::SeparatorParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__SeparatorParams,0))){
    SWIG_fail_ptr("SeparatorParams_params_set",1,SWIGTYPE_p_Std__SeparatorParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_rapidcsv__SeparatorParams,0))){
    SWIG_fail_ptr("SeparatorParams_params_set",2,SWIGTYPE_p_rapidcsv__SeparatorParams);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->params = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SeparatorParams_params_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::SeparatorParams *arg1 = (Std::SeparatorParams *) 0 ;
  rapidcsv::SeparatorParams result;
  
  SWIG_check_num_args("Std::SeparatorParams::params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::SeparatorParams::params",1,"Std::SeparatorParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__SeparatorParams,0))){
    SWIG_fail_ptr("SeparatorParams_params_get",1,SWIGTYPE_p_Std__SeparatorParams);
  }
  
  result =  ((arg1)->params);
  {
    rapidcsv::SeparatorParams * resultptr = new rapidcsv::SeparatorParams((const rapidcsv::SeparatorParams &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_rapidcsv__SeparatorParams,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",1,"char const");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",2,"bool const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",3,"bool const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",4,"bool const");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",5,"bool const");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Std::SeparatorParams *)new Std::SeparatorParams(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",1,"char const");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",2,"bool const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",3,"bool const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",4,"bool const");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Std::SeparatorParams *)new Std::SeparatorParams(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  bool arg2 ;
  bool arg3 ;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",1,"char const");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",2,"bool const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",3,"bool const");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Std::SeparatorParams *)new Std::SeparatorParams(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  bool arg2 ;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",1,"char const");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",2,"bool const");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Std::SeparatorParams *)new Std::SeparatorParams(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::SeparatorParams::SeparatorParams",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Std::SeparatorParams *)new Std::SeparatorParams(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Std::SeparatorParams *result = 0 ;
  
  SWIG_check_num_args("Std::SeparatorParams::SeparatorParams",0,0)
  result = (Std::SeparatorParams *)new Std::SeparatorParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__SeparatorParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SeparatorParams(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SeparatorParams__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      return _wrap_new_SeparatorParams__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SeparatorParams__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SeparatorParams__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SeparatorParams__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SeparatorParams__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SeparatorParams'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::SeparatorParams::SeparatorParams(char const,bool const,bool const,bool const,bool const)\n"
    "    Std::SeparatorParams::SeparatorParams(char const,bool const,bool const,bool const)\n"
    "    Std::SeparatorParams::SeparatorParams(char const,bool const,bool const)\n"
    "    Std::SeparatorParams::SeparatorParams(char const,bool const)\n"
    "    Std::SeparatorParams::SeparatorParams(char const)\n"
    "    Std::SeparatorParams::SeparatorParams()\n");
  lua_error(L);return 0;
}


static void swig_delete_SeparatorParams(void *obj) {
Std::SeparatorParams *arg1 = (Std::SeparatorParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_SeparatorParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SeparatorParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SeparatorParams_attributes[] = {
    { "params", _wrap_SeparatorParams_params_get, _wrap_SeparatorParams_params_set },
    {0,0,0}
};
static swig_lua_method swig_SeparatorParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_SeparatorParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SeparatorParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SeparatorParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SeparatorParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SeparatorParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SeparatorParams_Sf_SwigStatic = {
    "SeparatorParams",
    swig_SeparatorParams_Sf_SwigStatic_methods,
    swig_SeparatorParams_Sf_SwigStatic_attributes,
    swig_SeparatorParams_Sf_SwigStatic_constants,
    swig_SeparatorParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SeparatorParams_bases[] = {0};
static const char *swig_SeparatorParams_base_names[] = {0};
static swig_lua_class _wrap_class_SeparatorParams = { "SeparatorParams", "SeparatorParams", &SWIGTYPE_p_Std__SeparatorParams,_proxy__wrap_new_SeparatorParams, swig_delete_SeparatorParams, swig_SeparatorParams_methods, swig_SeparatorParams_attributes, &swig_SeparatorParams_Sf_SwigStatic, swig_SeparatorParams_meta, swig_SeparatorParams_bases, swig_SeparatorParams_base_names };

static int _wrap_LabelParameters_params_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::LabelParameters *arg1 = (Std::LabelParameters *) 0 ;
  rapidcsv::LabelParams arg2 ;
  rapidcsv::LabelParams *argp2 ;
  
  SWIG_check_num_args("Std::LabelParameters::params",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::LabelParameters::params",1,"Std::LabelParameters *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::LabelParameters::params",2,"rapidcsv::LabelParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__LabelParameters,0))){
    SWIG_fail_ptr("LabelParameters_params_set",1,SWIGTYPE_p_Std__LabelParameters);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_rapidcsv__LabelParams,0))){
    SWIG_fail_ptr("LabelParameters_params_set",2,SWIGTYPE_p_rapidcsv__LabelParams);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->params = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LabelParameters_params_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::LabelParameters *arg1 = (Std::LabelParameters *) 0 ;
  rapidcsv::LabelParams result;
  
  SWIG_check_num_args("Std::LabelParameters::params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::LabelParameters::params",1,"Std::LabelParameters *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__LabelParameters,0))){
    SWIG_fail_ptr("LabelParameters_params_get",1,SWIGTYPE_p_Std__LabelParameters);
  }
  
  result =  ((arg1)->params);
  {
    rapidcsv::LabelParams * resultptr = new rapidcsv::LabelParams((const rapidcsv::LabelParams &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_rapidcsv__LabelParams,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LabelParameters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  Std::LabelParameters *result = 0 ;
  
  SWIG_check_num_args("Std::LabelParameters::LabelParameters",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::LabelParameters::LabelParameters",1,"int const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::LabelParameters::LabelParameters",2,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  arg2 = (int const)lua_tonumber(L, 2);
  result = (Std::LabelParameters *)new Std::LabelParameters(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LabelParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LabelParameters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Std::LabelParameters *result = 0 ;
  
  SWIG_check_num_args("Std::LabelParameters::LabelParameters",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::LabelParameters::LabelParameters",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = (Std::LabelParameters *)new Std::LabelParameters(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LabelParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LabelParameters__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::LabelParameters *result = 0 ;
  
  SWIG_check_num_args("Std::LabelParameters::LabelParameters",0,0)
  result = (Std::LabelParameters *)new Std::LabelParameters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LabelParameters,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LabelParameters(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LabelParameters__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LabelParameters__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LabelParameters__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LabelParameters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::LabelParameters::LabelParameters(int const,int const)\n"
    "    Std::LabelParameters::LabelParameters(int const)\n"
    "    Std::LabelParameters::LabelParameters()\n");
  lua_error(L);return 0;
}


static void swig_delete_LabelParameters(void *obj) {
Std::LabelParameters *arg1 = (Std::LabelParameters *) obj;
delete arg1;
}
static int _proxy__wrap_new_LabelParameters(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LabelParameters);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LabelParameters_attributes[] = {
    { "params", _wrap_LabelParameters_params_get, _wrap_LabelParameters_params_set },
    {0,0,0}
};
static swig_lua_method swig_LabelParameters_methods[]= {
    {0,0}
};
static swig_lua_method swig_LabelParameters_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LabelParameters_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LabelParameters_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LabelParameters_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LabelParameters_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LabelParameters_Sf_SwigStatic = {
    "LabelParameters",
    swig_LabelParameters_Sf_SwigStatic_methods,
    swig_LabelParameters_Sf_SwigStatic_attributes,
    swig_LabelParameters_Sf_SwigStatic_constants,
    swig_LabelParameters_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LabelParameters_bases[] = {0};
static const char *swig_LabelParameters_base_names[] = {0};
static swig_lua_class _wrap_class_LabelParameters = { "LabelParameters", "LabelParameters", &SWIGTYPE_p_Std__LabelParameters,_proxy__wrap_new_LabelParameters, swig_delete_LabelParameters, swig_LabelParameters_methods, swig_LabelParameters_attributes, &swig_LabelParameters_Sf_SwigStatic, swig_LabelParameters_meta, swig_LabelParameters_bases, swig_LabelParameters_base_names };

static int _wrap_LineReaderParams_params_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::LineReaderParams *arg1 = (Std::LineReaderParams *) 0 ;
  rapidcsv::LineReaderParams arg2 ;
  rapidcsv::LineReaderParams *argp2 ;
  
  SWIG_check_num_args("Std::LineReaderParams::params",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::LineReaderParams::params",1,"Std::LineReaderParams *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::LineReaderParams::params",2,"rapidcsv::LineReaderParams");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__LineReaderParams,0))){
    SWIG_fail_ptr("LineReaderParams_params_set",1,SWIGTYPE_p_Std__LineReaderParams);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_rapidcsv__LineReaderParams,0))){
    SWIG_fail_ptr("LineReaderParams_params_set",2,SWIGTYPE_p_rapidcsv__LineReaderParams);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->params = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineReaderParams_params_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::LineReaderParams *arg1 = (Std::LineReaderParams *) 0 ;
  rapidcsv::LineReaderParams result;
  
  SWIG_check_num_args("Std::LineReaderParams::params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::LineReaderParams::params",1,"Std::LineReaderParams *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__LineReaderParams,0))){
    SWIG_fail_ptr("LineReaderParams_params_get",1,SWIGTYPE_p_Std__LineReaderParams);
  }
  
  result =  ((arg1)->params);
  {
    rapidcsv::LineReaderParams * resultptr = new rapidcsv::LineReaderParams((const rapidcsv::LineReaderParams &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_rapidcsv__LineReaderParams,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LineReaderParams__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  char arg2 ;
  bool arg3 ;
  Std::LineReaderParams *result = 0 ;
  
  SWIG_check_num_args("Std::LineReaderParams::LineReaderParams",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",1,"bool const");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",2,"char const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",3,"bool const");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Std::LineReaderParams *)new Std::LineReaderParams(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LineReaderParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LineReaderParams__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  char arg2 ;
  Std::LineReaderParams *result = 0 ;
  
  SWIG_check_num_args("Std::LineReaderParams::LineReaderParams",2,2)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",1,"bool const");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",2,"char const");
  arg1 = (lua_toboolean(L, 1)!=0);
  arg2 = (lua_tostring(L, 2))[0];
  result = (Std::LineReaderParams *)new Std::LineReaderParams(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LineReaderParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LineReaderParams__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  Std::LineReaderParams *result = 0 ;
  
  SWIG_check_num_args("Std::LineReaderParams::LineReaderParams",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Std::LineReaderParams::LineReaderParams",1,"bool const");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (Std::LineReaderParams *)new Std::LineReaderParams(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LineReaderParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LineReaderParams__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::LineReaderParams *result = 0 ;
  
  SWIG_check_num_args("Std::LineReaderParams::LineReaderParams",0,0)
  result = (Std::LineReaderParams *)new Std::LineReaderParams();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__LineReaderParams,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LineReaderParams(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LineReaderParams__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LineReaderParams__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_LineReaderParams__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_LineReaderParams__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LineReaderParams'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::LineReaderParams::LineReaderParams(bool const,char const,bool const)\n"
    "    Std::LineReaderParams::LineReaderParams(bool const,char const)\n"
    "    Std::LineReaderParams::LineReaderParams(bool const)\n"
    "    Std::LineReaderParams::LineReaderParams()\n");
  lua_error(L);return 0;
}


static void swig_delete_LineReaderParams(void *obj) {
Std::LineReaderParams *arg1 = (Std::LineReaderParams *) obj;
delete arg1;
}
static int _proxy__wrap_new_LineReaderParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LineReaderParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LineReaderParams_attributes[] = {
    { "params", _wrap_LineReaderParams_params_get, _wrap_LineReaderParams_params_set },
    {0,0,0}
};
static swig_lua_method swig_LineReaderParams_methods[]= {
    {0,0}
};
static swig_lua_method swig_LineReaderParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LineReaderParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LineReaderParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LineReaderParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LineReaderParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LineReaderParams_Sf_SwigStatic = {
    "LineReaderParams",
    swig_LineReaderParams_Sf_SwigStatic_methods,
    swig_LineReaderParams_Sf_SwigStatic_attributes,
    swig_LineReaderParams_Sf_SwigStatic_constants,
    swig_LineReaderParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LineReaderParams_bases[] = {0};
static const char *swig_LineReaderParams_base_names[] = {0};
static swig_lua_class _wrap_class_LineReaderParams = { "LineReaderParams", "LineReaderParams", &SWIGTYPE_p_Std__LineReaderParams,_proxy__wrap_new_LineReaderParams, swig_delete_LineReaderParams, swig_LineReaderParams_methods, swig_LineReaderParams_attributes, &swig_LineReaderParams_Sf_SwigStatic, swig_LineReaderParams_meta, swig_LineReaderParams_bases, swig_LineReaderParams_base_names };

static int _wrap_StdCsvDocument_doc_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  rapidcsv::Document *arg2 = (rapidcsv::Document *) 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::doc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::doc",1,"Std::StdCsvDocument *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdCsvDocument::doc",2,"rapidcsv::Document *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_doc_set",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rapidcsv__Document,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StdCsvDocument_doc_set",2,SWIGTYPE_p_rapidcsv__Document);
  }
  
  if (arg1) (arg1)->doc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_doc_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  rapidcsv::Document *result = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::doc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::doc",1,"Std::StdCsvDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_doc_get",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  result = (rapidcsv::Document *) ((arg1)->doc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rapidcsv__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StdCsvDocument(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Std::StdCsvDocument *result = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::StdCsvDocument",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::StdCsvDocument::StdCsvDocument",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Std::StdCsvDocument *)new Std::StdCsvDocument((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdCsvDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_Load(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::Load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::Load",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::Load",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_Load",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->Load((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_Save(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::Save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::Save",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::Save",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_Save",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->Save((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::Clear",1,"Std::StdCsvDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_Clear",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColIndex(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColIndex",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColIndex",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColIndex",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetColIndex((std::string const &)*arg2);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColValues__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColValues",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColValues",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  result = (arg1)->GetColValues(arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColValues__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColValues",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColValues",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetColValues((std::string const &)*arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColValues(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetColValues__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetColValues__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetColValues'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetColValues(size_t const)\n"
    "    Std::StdCsvDocument::GetColValues(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_GetColStrings__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColStrings",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColStrings",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  result = (arg1)->GetColStrings(arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColStrings__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColStrings",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColStrings",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetColStrings((std::string const &)*arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColStrings(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetColStrings__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetColStrings__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetColStrings'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetColStrings(size_t const)\n"
    "    Std::StdCsvDocument::GetColStrings(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_SetColValues__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetColValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColValues",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->SetColValues(arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetColValues__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetColValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetColValues",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColValues",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->SetColValues((std::string const &)*arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetColValues(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetColValues__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetColValues__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_SetColValues'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::SetColValues(size_t const,std::vector< double > const &)\n"
    "    Std::StdCsvDocument::SetColValues(std::string const &,std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_SetColStrings__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetColStrings",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",3,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColStrings",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->SetColStrings(arg2,(std::vector< std::string > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetColStrings__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetColStrings",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetColStrings",3,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColStrings",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->SetColStrings((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetColStrings(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetColStrings__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetColStrings__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_SetColStrings'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::SetColStrings(size_t const,std::vector< std::string > const &)\n"
    "    Std::StdCsvDocument::SetColStrings(std::string const &,std::vector< std::string > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_RemoveCol__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::RemoveCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::RemoveCol",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::RemoveCol",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_RemoveCol",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  (arg1)->RemoveCol(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_RemoveCol__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::RemoveCol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::RemoveCol",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::RemoveCol",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_RemoveCol",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveCol((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_RemoveCol(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_RemoveCol__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_RemoveCol__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_RemoveCol'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::RemoveCol(size_t const)\n"
    "    Std::StdCsvDocument::RemoveCol(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_InsertCol__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::InsertCol",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",3,"std::vector< double > const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertCol",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertCol",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  (arg1)->InsertCol(arg2,(std::vector< double > const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_InsertCol__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::InsertCol",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::InsertCol",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertCol",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertCol",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->InsertCol(arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_InsertCol(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_InsertCol__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_StdCsvDocument_InsertCol__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_InsertCol'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::InsertCol(size_t const,std::vector< double > const &,std::string const &)\n"
    "    Std::StdCsvDocument::InsertCol(size_t const,std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_GetColCount(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColCount",1,"Std::StdCsvDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColCount",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  result = ((Std::StdCsvDocument const *)arg1)->GetColCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowIndex(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowIndex",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowIndex",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowIndex",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetRowIndex((std::string const &)*arg2);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowValues__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowValues",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowValues",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  result = (arg1)->GetRowValues(arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowValues__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::vector< double > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowValues",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowValues",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowValues",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowValues",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetRowValues((std::string const &)*arg2);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowValues(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetRowValues__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetRowValues__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetRowValues'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetRowValues(size_t const)\n"
    "    Std::StdCsvDocument::GetRowValues(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_GetRowStrings__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowStrings",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowStrings",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  result = (arg1)->GetRowStrings(arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowStrings__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowStrings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowStrings",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowStrings",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowStrings",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->GetRowStrings((std::string const &)*arg2);
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowStrings(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetRowStrings__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_GetRowStrings__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetRowStrings'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetRowStrings(size_t const)\n"
    "    Std::StdCsvDocument::GetRowStrings(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_SetRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetRow",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->SetRow(arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetRow",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_SetRow",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->SetRow((std::string const &)*arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetRow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetRow__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_SetRow__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_SetRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::SetRow(size_t const,std::vector< double > const &)\n"
    "    Std::StdCsvDocument::SetRow(std::string const &,std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_RemoveRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::RemoveRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::RemoveRow",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::RemoveRow",2,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_RemoveRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  (arg1)->RemoveRow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_RemoveRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::RemoveRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::RemoveRow",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::RemoveRow",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_RemoveRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveRow((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_RemoveRow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_RemoveRow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdCsvDocument_RemoveRow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_RemoveRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::RemoveRow(size_t const)\n"
    "    Std::StdCsvDocument::RemoveRow(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_InsertRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::InsertRow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",3,"std::vector< double > const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertRow",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  (arg1)->InsertRow(arg2,(std::vector< double > const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_InsertRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::InsertRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",2,"size_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdCsvDocument::InsertRow",3,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertRow",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("StdCsvDocument_InsertRow",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->InsertRow(arg2,(std::vector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_InsertRow(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_StdCsvDocument_InsertRow__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_StdCsvDocument_InsertRow__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_InsertRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::InsertRow(size_t const,std::vector< double > const &,std::string const &)\n"
    "    Std::StdCsvDocument::InsertRow(size_t const,std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_GetRowCount(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowCount",1,"Std::StdCsvDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowCount",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  result = ((Std::StdCsvDocument const *)arg1)->GetRowCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetCellValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetCellValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",3,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetCellValue",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t const)lua_tonumber(L, 3);
  result = (double)(arg1)->GetCellValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetCellValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  double result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetCellValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",2,"std::string const");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::StdCsvDocument::GetCellValue",3,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetCellValue",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (double)(arg1)->GetCellValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetCellValue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdCsvDocument_GetCellValue__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdCsvDocument_GetCellValue__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetCellValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetCellValue(size_t const,size_t const)\n"
    "    Std::StdCsvDocument::GetCellValue(std::string const,std::string const)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_GetCellString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetCellString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",3,"size_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetCellString",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t const)lua_tonumber(L, 3);
  result = (arg1)->GetCellString(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetCellString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetCellString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",1,"Std::StdCsvDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",2,"std::string const");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::StdCsvDocument::GetCellString",3,"std::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetCellString",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (arg1)->GetCellString(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetCellString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdCsvDocument_GetCellString__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdCsvDocument_GetCellString__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_GetCellString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::GetCellString(size_t const,size_t const)\n"
    "    Std::StdCsvDocument::GetCellString(std::string const,std::string const)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_SetCellValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetCellValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",3,"size_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetCellValue",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t const)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->SetCellValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetCellValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetCellValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",2,"size_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",3,"size_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdCsvDocument::SetCellValue",4,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetCellValue",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t const)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("StdCsvDocument_SetCellValue",4,SWIGTYPE_p_std__string);
  }
  
  (arg1)->SetCellValue(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetCellValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_StdCsvDocument_SetCellValue__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdCsvDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_StdCsvDocument_SetCellValue__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdCsvDocument_SetCellValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdCsvDocument::SetCellValue(size_t const,size_t const,double)\n"
    "    Std::StdCsvDocument::SetCellValue(size_t const,size_t const,std::string &)\n");
  lua_error(L);return 0;
}


static int _wrap_StdCsvDocument_SetColName(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetColName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetColName",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetColName",2,"size_t const");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetColName",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetColName",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->SetColName(arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_SetRowName(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::StdCsvDocument::SetRowName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::SetRowName",1,"Std::StdCsvDocument *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdCsvDocument::SetRowName",2,"size_t const");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::StdCsvDocument::SetRowName",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_SetRowName",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t const)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->SetRowName(arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetColName(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  ssize_t arg2 ;
  ssize_t *argp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetColName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetColName",1,"Std::StdCsvDocument *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetColName",2,"ssize_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColName",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ssize_t,0))){
    SWIG_fail_ptr("StdCsvDocument_GetColName",2,SWIGTYPE_p_ssize_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->GetColName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdCsvDocument_GetRowName(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) 0 ;
  ssize_t arg2 ;
  ssize_t *argp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::StdCsvDocument::GetRowName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdCsvDocument::GetRowName",1,"Std::StdCsvDocument *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdCsvDocument::GetRowName",2,"ssize_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdCsvDocument,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowName",1,SWIGTYPE_p_Std__StdCsvDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ssize_t,0))){
    SWIG_fail_ptr("StdCsvDocument_GetRowName",2,SWIGTYPE_p_ssize_t);
  }
  arg2 = *argp2;
  
  result = (arg1)->GetRowName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StdCsvDocument(void *obj) {
Std::StdCsvDocument *arg1 = (Std::StdCsvDocument *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdCsvDocument(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdCsvDocument);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdCsvDocument_attributes[] = {
    { "doc", _wrap_StdCsvDocument_doc_get, _wrap_StdCsvDocument_doc_set },
    {0,0,0}
};
static swig_lua_method swig_StdCsvDocument_methods[]= {
    { "Load", _wrap_StdCsvDocument_Load},
    { "Save", _wrap_StdCsvDocument_Save},
    { "Clear", _wrap_StdCsvDocument_Clear},
    { "GetColIndex", _wrap_StdCsvDocument_GetColIndex},
    { "GetColValues", _wrap_StdCsvDocument_GetColValues},
    { "GetColStrings", _wrap_StdCsvDocument_GetColStrings},
    { "SetColValues", _wrap_StdCsvDocument_SetColValues},
    { "SetColStrings", _wrap_StdCsvDocument_SetColStrings},
    { "RemoveCol", _wrap_StdCsvDocument_RemoveCol},
    { "InsertCol", _wrap_StdCsvDocument_InsertCol},
    { "GetColCount", _wrap_StdCsvDocument_GetColCount},
    { "GetRowIndex", _wrap_StdCsvDocument_GetRowIndex},
    { "GetRowValues", _wrap_StdCsvDocument_GetRowValues},
    { "GetRowStrings", _wrap_StdCsvDocument_GetRowStrings},
    { "SetRow", _wrap_StdCsvDocument_SetRow},
    { "RemoveRow", _wrap_StdCsvDocument_RemoveRow},
    { "InsertRow", _wrap_StdCsvDocument_InsertRow},
    { "GetRowCount", _wrap_StdCsvDocument_GetRowCount},
    { "GetCellValue", _wrap_StdCsvDocument_GetCellValue},
    { "GetCellString", _wrap_StdCsvDocument_GetCellString},
    { "SetCellValue", _wrap_StdCsvDocument_SetCellValue},
    { "SetColName", _wrap_StdCsvDocument_SetColName},
    { "SetRowName", _wrap_StdCsvDocument_SetRowName},
    { "GetColName", _wrap_StdCsvDocument_GetColName},
    { "GetRowName", _wrap_StdCsvDocument_GetRowName},
    {0,0}
};
static swig_lua_method swig_StdCsvDocument_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdCsvDocument_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdCsvDocument_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdCsvDocument_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdCsvDocument_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdCsvDocument_Sf_SwigStatic = {
    "StdCsvDocument",
    swig_StdCsvDocument_Sf_SwigStatic_methods,
    swig_StdCsvDocument_Sf_SwigStatic_attributes,
    swig_StdCsvDocument_Sf_SwigStatic_constants,
    swig_StdCsvDocument_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdCsvDocument_bases[] = {0};
static const char *swig_StdCsvDocument_base_names[] = {0};
static swig_lua_class _wrap_class_StdCsvDocument = { "StdCsvDocument", "StdCsvDocument", &SWIGTYPE_p_Std__StdCsvDocument,_proxy__wrap_new_StdCsvDocument, swig_delete_StdCsvDocument, swig_StdCsvDocument_methods, swig_StdCsvDocument_attributes, &swig_StdCsvDocument_Sf_SwigStatic, swig_StdCsvDocument_meta, swig_StdCsvDocument_bases, swig_StdCsvDocument_base_names };

static int _wrap_JSONValue_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  Value arg2 ;
  Value *argp2 ;
  
  SWIG_check_num_args("Std::JSONValue::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::v",1,"Std::JSONValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONValue::v",2,"Value");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_v_set",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("JSONValue_v_set",2,SWIGTYPE_p_Value);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->v = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  Value result;
  
  SWIG_check_num_args("Std::JSONValue::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::v",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_v_get",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result =  ((arg1)->v);
  {
    Value * resultptr = new Value((const Value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONValue::JSONValue",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (Std::JSONValue *)new Std::JSONValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Std::JSONValue::JSONValue",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (Std::JSONValue *)new Std::JSONValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::JSONValue::JSONValue",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::JSONValue *)new Std::JSONValue((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONValue::JSONValue",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONValue",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONValue *)new Std::JSONValue((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",0,0)
  result = (Std::JSONValue *)new Std::JSONValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::JSONValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONValue::JSONValue",1,"Value &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONValue",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONValue *)new Std::JSONValue(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONValue(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_JSONValue__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONValue__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONValue__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONValue__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONValue__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONValue__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONValue::JSONValue(double)\n"
    "    Std::JSONValue::JSONValue(bool)\n"
    "    Std::JSONValue::JSONValue(char const *)\n"
    "    Std::JSONValue::JSONValue(Std::JSONValue const &)\n"
    "    Std::JSONValue::JSONValue()\n"
    "    Std::JSONValue::JSONValue(Value &)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONValue_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  Value *arg2 = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::copy",1,"Std::JSONValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONValue::copy",2,"Value &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_copy",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("JSONValue_copy",2,SWIGTYPE_p_Value);
  }
  
  (arg1)->copy(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_type(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  ValueType result;
  
  SWIG_check_num_args("Std::JSONValue::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::type",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_type",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->type();
  {
    ValueType * resultptr = new ValueType((const ValueType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ValueType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::JSONValue result;
  
  SWIG_check_num_args("Std::JSONValue::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::__getitem",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::__getitem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue___getitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->__getitem((char const *)arg2);
  {
    Std::JSONValue * resultptr = new Std::JSONValue((const Std::JSONValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_d(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONValue::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::d",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_d",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->d();
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_i32(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONValue::i32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::i32",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_i32",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->i32();
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_ui32(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONValue::ui32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::ui32",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_ui32",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->ui32();
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_i64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONValue::i64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::i64",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_i64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->i64();
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_ui64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONValue::ui64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::ui64",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_ui64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->ui64();
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_b(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONBool > result;
  
  SWIG_check_num_args("Std::JSONValue::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::b",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_b",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->b();
  {
    Std::JSONBool * resultptr = new Std::JSONBool((const Std::JSONBool &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_str(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONString > result;
  
  SWIG_check_num_args("Std::JSONValue::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::str",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_str",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->str();
  {
    Std::JSONString * resultptr = new Std::JSONString((const Std::JSONString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_array(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  SwigValueWrapper< Std::JSONArray > result;
  
  SWIG_check_num_args("Std::JSONValue::array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::array",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_array",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (arg1)->array();
  {
    Std::JSONArray * resultptr = new Std::JSONArray((const Std::JSONArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  SWIG_check_num_args("Std::JSONValue::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::__setitem",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::__setitem",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::JSONValue::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue___setitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::JSONValue::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::__setitem",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::__setitem",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::JSONValue::__setitem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue___setitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->__setitem((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Std::JSONValue::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::__setitem",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::__setitem",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::JSONValue::__setitem",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue___setitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONValue___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONValue::__setitem(char const *,double)\n"
    "    Std::JSONValue::__setitem(char const *,char const *)\n"
    "    Std::JSONValue::__setitem(char const *,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONValue_getarrayitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  int arg2 ;
  Std::JSONValue result;
  
  SWIG_check_num_args("Std::JSONValue::getarrayitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::getarrayitem",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::getarrayitem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_getarrayitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getarrayitem(arg2);
  {
    Std::JSONValue * resultptr = new Std::JSONValue((const Std::JSONValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_setarrayitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Std::JSONValue::setarrayitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::setarrayitem",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::setarrayitem",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::JSONValue::setarrayitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_setarrayitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setarrayitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_setarrayitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::JSONValue::setarrayitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::setarrayitem",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::setarrayitem",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::JSONValue::setarrayitem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_setarrayitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setarrayitem(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_setarrayitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Std::JSONValue::setarrayitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::setarrayitem",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::setarrayitem",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::JSONValue::setarrayitem",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_setarrayitem",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setarrayitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_setarrayitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue_setarrayitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue_setarrayitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONValue_setarrayitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONValue_setarrayitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONValue::setarrayitem(int,double)\n"
    "    Std::JSONValue::setarrayitem(int,char const *)\n"
    "    Std::JSONValue::setarrayitem(int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONValue_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  Std::JSONValue *arg2 = 0 ;
  
  SWIG_check_num_args("Std::JSONValue::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::append",1,"Std::JSONValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONValue::append",2,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_append",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_append",2,SWIGTYPE_p_Std__JSONValue);
  }
  
  (arg1)->append(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_insert(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  size_t arg2 ;
  Std::JSONValue *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::insert",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::JSONValue::insert",3,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_insert",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_insert",3,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)(arg1)->insert(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_remove(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::JSONValue::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::remove",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::remove",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_remove",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->remove((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_remove_index(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  size_t arg2 ;
  Std::JSONValue *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::remove_index",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::remove_index",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::remove_index",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::JSONValue::remove_index",3,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_remove_index",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_remove_index",3,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)(arg1)->remove_index(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isMember(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isMember",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isMember",1,"Std::JSONValue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONValue::isMember",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isMember",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isMember((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::empty",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_empty",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  
  SWIG_check_num_args("Std::JSONValue::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::clear",1,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_clear",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::JSONValue::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::resize",1,"Std::JSONValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONValue::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_resize",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::JSONValue::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::size",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_size",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = ((Std::JSONValue const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isNull(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isNull",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isNull",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isBool(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isBool",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isBool",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isInt(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isInt",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isInt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isInt64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isInt64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isInt64",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isInt64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isInt64();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isUInt(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isUInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isUInt",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isUInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isUInt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isUInt64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isUInt64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isUInt64",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isUInt64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isUInt64();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isIntegral(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isIntegral",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isIntegral",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isIntegral",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isIntegral();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isDouble(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isDouble",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isDouble",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isDouble();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isNumeric(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isNumeric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isNumeric",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isNumeric",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isNumeric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isString(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isString",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isString",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isString();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isArray(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isArray",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isArray",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isArray();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_isObject(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::isObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::isObject",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_isObject",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->isObject();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asString(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::JSONValue::asString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asString",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asString",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = ((Std::JSONValue const *)arg1)->asString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asInt(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("Std::JSONValue::asInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asInt",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (int32_t)((Std::JSONValue const *)arg1)->asInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asUInt(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("Std::JSONValue::asUInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asUInt",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asUInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (uint32_t)((Std::JSONValue const *)arg1)->asUInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asFloat(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::JSONValue::asFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asFloat",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asFloat",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (float)((Std::JSONValue const *)arg1)->asFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asDouble(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::JSONValue::asDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asDouble",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asDouble",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (double)((Std::JSONValue const *)arg1)->asDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONValue_asBool(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = (Std::JSONValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONValue::asBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONValue::asBool",1,"Std::JSONValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONValue_asBool",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)((Std::JSONValue const *)arg1)->asBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JSONValue(void *obj) {
Std::JSONValue *arg1 = (Std::JSONValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONValue_attributes[] = {
    { "v", _wrap_JSONValue_v_get, _wrap_JSONValue_v_set },
    {0,0,0}
};
static swig_lua_method swig_JSONValue_methods[]= {
    { "copy", _wrap_JSONValue_copy},
    { "type", _wrap_JSONValue_type},
    { "__getitem", _wrap_JSONValue___getitem},
    { "d", _wrap_JSONValue_d},
    { "i32", _wrap_JSONValue_i32},
    { "ui32", _wrap_JSONValue_ui32},
    { "i64", _wrap_JSONValue_i64},
    { "ui64", _wrap_JSONValue_ui64},
    { "b", _wrap_JSONValue_b},
    { "str", _wrap_JSONValue_str},
    { "array", _wrap_JSONValue_array},
    { "__setitem", _wrap_JSONValue___setitem},
    { "getarrayitem", _wrap_JSONValue_getarrayitem},
    { "setarrayitem", _wrap_JSONValue_setarrayitem},
    { "append", _wrap_JSONValue_append},
    { "insert", _wrap_JSONValue_insert},
    { "remove", _wrap_JSONValue_remove},
    { "remove_index", _wrap_JSONValue_remove_index},
    { "isMember", _wrap_JSONValue_isMember},
    { "empty", _wrap_JSONValue_empty},
    { "clear", _wrap_JSONValue_clear},
    { "resize", _wrap_JSONValue_resize},
    { "size", _wrap_JSONValue_size},
    { "isNull", _wrap_JSONValue_isNull},
    { "isBool", _wrap_JSONValue_isBool},
    { "isInt", _wrap_JSONValue_isInt},
    { "isInt64", _wrap_JSONValue_isInt64},
    { "isUInt", _wrap_JSONValue_isUInt},
    { "isUInt64", _wrap_JSONValue_isUInt64},
    { "isIntegral", _wrap_JSONValue_isIntegral},
    { "isDouble", _wrap_JSONValue_isDouble},
    { "isNumeric", _wrap_JSONValue_isNumeric},
    { "isString", _wrap_JSONValue_isString},
    { "isArray", _wrap_JSONValue_isArray},
    { "isObject", _wrap_JSONValue_isObject},
    { "asString", _wrap_JSONValue_asString},
    { "asInt", _wrap_JSONValue_asInt},
    { "asUInt", _wrap_JSONValue_asUInt},
    { "asFloat", _wrap_JSONValue_asFloat},
    { "asDouble", _wrap_JSONValue_asDouble},
    { "asBool", _wrap_JSONValue_asBool},
    {0,0}
};
static swig_lua_method swig_JSONValue_meta[] = {
    { "__getitem", _wrap_JSONValue___getitem},
    { "__setitem", _wrap_JSONValue___setitem},
    {0,0}
};

static swig_lua_attribute swig_JSONValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONValue_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONValue_Sf_SwigStatic = {
    "JSONValue",
    swig_JSONValue_Sf_SwigStatic_methods,
    swig_JSONValue_Sf_SwigStatic_attributes,
    swig_JSONValue_Sf_SwigStatic_constants,
    swig_JSONValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONValue_bases[] = {0,0};
static const char *swig_JSONValue_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_JSONValue = { "JSONValue", "JSONValue", &SWIGTYPE_p_Std__JSONValue,_proxy__wrap_new_JSONValue, swig_delete_JSONValue, swig_JSONValue_methods, swig_JSONValue_attributes, &swig_JSONValue_Sf_SwigStatic, swig_JSONValue_meta, swig_JSONValue_bases, swig_JSONValue_base_names };

static int _wrap_new_JSONDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONDouble *result = 0 ;
  
  SWIG_check_num_args("Std::JSONDouble::JSONDouble",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONDouble::JSONDouble",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONDouble",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONDouble *)new Std::JSONDouble((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONDouble *result = 0 ;
  
  SWIG_check_num_args("Std::JSONDouble::JSONDouble",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONDouble::JSONDouble",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONDouble",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONDouble *)new Std::JSONDouble((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONDouble__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = 0 ;
  Std::JSONDouble *result = 0 ;
  
  SWIG_check_num_args("Std::JSONDouble::JSONDouble",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONDouble::JSONDouble",1,"Std::JSONDouble const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("new_JSONDouble",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (Std::JSONDouble *)new Std::JSONDouble((Std::JSONDouble const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONDouble__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  Std::JSONDouble *result = 0 ;
  
  SWIG_check_num_args("Std::JSONDouble::JSONDouble",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONDouble::JSONDouble",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (Std::JSONDouble *)new Std::JSONDouble(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONDouble(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONDouble__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONDouble__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONDouble__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONDouble__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONDouble::JSONDouble(Value const &)\n"
    "    Std::JSONDouble::JSONDouble(Std::JSONValue const &)\n"
    "    Std::JSONDouble::JSONDouble(Std::JSONDouble const &)\n"
    "    Std::JSONDouble::JSONDouble(double)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONDouble_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::JSONDouble::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::value",1,"Std::JSONDouble const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble_value",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (double)((Std::JSONDouble const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  Std::JSONDouble *arg2 = 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator +",1,"Std::JSONDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONDouble::operator +",2,"Std::JSONDouble const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___add",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___add",2,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (arg1)->operator +((Std::JSONDouble const &)*arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  Std::JSONDouble *arg2 = 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator -",1,"Std::JSONDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONDouble::operator -",2,"Std::JSONDouble const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___sub",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___sub",2,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (arg1)->operator -((Std::JSONDouble const &)*arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  Std::JSONDouble *arg2 = 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator *",1,"Std::JSONDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONDouble::operator *",2,"Std::JSONDouble const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___mul",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___mul",2,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (arg1)->operator *((Std::JSONDouble const &)*arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  Std::JSONDouble *arg2 = 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator /",1,"Std::JSONDouble *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONDouble::operator /",2,"Std::JSONDouble const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___div",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___div",2,SWIGTYPE_p_Std__JSONDouble);
  }
  
  result = (arg1)->operator /((Std::JSONDouble const &)*arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  double arg2 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator +",1,"Std::JSONDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONDouble::operator +",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___add",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONDouble___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONDouble___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONDouble___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONDouble::operator +(Std::JSONDouble const &)\n"
    "    Std::JSONDouble::operator +(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONDouble___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  double arg2 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator -",1,"Std::JSONDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONDouble::operator -",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___sub",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONDouble___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONDouble___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONDouble___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONDouble::operator -(Std::JSONDouble const &)\n"
    "    Std::JSONDouble::operator -(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONDouble___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  double arg2 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator *",1,"Std::JSONDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONDouble::operator *",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___mul",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONDouble___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONDouble___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONDouble___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONDouble::operator *(Std::JSONDouble const &)\n"
    "    Std::JSONDouble::operator *(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONDouble___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONDouble *arg1 = (Std::JSONDouble *) 0 ;
  double arg2 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::JSONDouble::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONDouble::operator /",1,"Std::JSONDouble *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONDouble::operator /",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONDouble,0))){
    SWIG_fail_ptr("JSONDouble___div",1,SWIGTYPE_p_Std__JSONDouble);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONDouble___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONDouble___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONDouble, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONDouble___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONDouble___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONDouble::operator /(Std::JSONDouble const &)\n"
    "    Std::JSONDouble::operator /(double const)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONDouble(void *obj) {
Std::JSONDouble *arg1 = (Std::JSONDouble *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONDouble(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONDouble);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONDouble_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONDouble_methods[]= {
    { "value", _wrap_JSONDouble_value},
    { "__add", _wrap_JSONDouble___add},
    { "__sub", _wrap_JSONDouble___sub},
    { "__mul", _wrap_JSONDouble___mul},
    { "__div", _wrap_JSONDouble___div},
    {0,0}
};
static swig_lua_method swig_JSONDouble_meta[] = {
    { "__add", _wrap_JSONDouble___add},
    { "__sub", _wrap_JSONDouble___sub},
    { "__mul", _wrap_JSONDouble___mul},
    { "__div", _wrap_JSONDouble___div},
    {0,0}
};

static swig_lua_attribute swig_JSONDouble_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONDouble_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONDouble_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONDouble_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONDouble_Sf_SwigStatic = {
    "JSONDouble",
    swig_JSONDouble_Sf_SwigStatic_methods,
    swig_JSONDouble_Sf_SwigStatic_attributes,
    swig_JSONDouble_Sf_SwigStatic_constants,
    swig_JSONDouble_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONDouble_bases[] = {0,0};
static const char *swig_JSONDouble_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONDouble = { "JSONDouble", "JSONDouble", &SWIGTYPE_p_Std__JSONDouble,_proxy__wrap_new_JSONDouble, swig_delete_JSONDouble, swig_JSONDouble_methods, swig_JSONDouble_attributes, &swig_JSONDouble_Sf_SwigStatic, swig_JSONDouble_meta, swig_JSONDouble_bases, swig_JSONDouble_base_names };

static int _wrap_new_JSONInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt::JSONInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt::JSONInt",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONInt",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONInt *)new Std::JSONInt((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt::JSONInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt::JSONInt",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONInt *)new Std::JSONInt((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = 0 ;
  Std::JSONInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt::JSONInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt::JSONInt",1,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("new_JSONInt",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (Std::JSONInt *)new Std::JSONInt((Std::JSONInt const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Std::JSONInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt::JSONInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONInt::JSONInt",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Std::JSONInt *)new Std::JSONInt(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONInt__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt::JSONInt(Value const &)\n"
    "    Std::JSONInt::JSONInt(Std::JSONValue const &)\n"
    "    Std::JSONInt::JSONInt(Std::JSONInt const &)\n"
    "    Std::JSONInt::JSONInt(int)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::JSONInt::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::value",1,"Std::JSONInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt_value",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (int)((Std::JSONInt const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator +",1,"Std::JSONInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt::operator +",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___add",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___add",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator +((Std::JSONInt const &)*arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator -",1,"Std::JSONInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt::operator -",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___sub",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___sub",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator -((Std::JSONInt const &)*arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator *",1,"Std::JSONInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt::operator *",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___mul",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___mul",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator *((Std::JSONInt const &)*arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator /",1,"Std::JSONInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt::operator /",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___div",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___div",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator /((Std::JSONInt const &)*arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  int arg2 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator +",1,"Std::JSONInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt::operator +",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___add",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt::operator +(Std::JSONInt const &)\n"
    "    Std::JSONInt::operator +(int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  int arg2 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator -",1,"Std::JSONInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt::operator -",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___sub",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt::operator -(Std::JSONInt const &)\n"
    "    Std::JSONInt::operator -(int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  int arg2 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator *",1,"Std::JSONInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt::operator *",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___mul",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt::operator *(Std::JSONInt const &)\n"
    "    Std::JSONInt::operator *(int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt *arg1 = (Std::JSONInt *) 0 ;
  int arg2 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::JSONInt::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt::operator /",1,"Std::JSONInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt::operator /",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONInt___div",1,SWIGTYPE_p_Std__JSONInt);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt::operator /(Std::JSONInt const &)\n"
    "    Std::JSONInt::operator /(int const)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONInt(void *obj) {
Std::JSONInt *arg1 = (Std::JSONInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONInt_methods[]= {
    { "value", _wrap_JSONInt_value},
    { "__add", _wrap_JSONInt___add},
    { "__sub", _wrap_JSONInt___sub},
    { "__mul", _wrap_JSONInt___mul},
    { "__div", _wrap_JSONInt___div},
    {0,0}
};
static swig_lua_method swig_JSONInt_meta[] = {
    { "__add", _wrap_JSONInt___add},
    { "__sub", _wrap_JSONInt___sub},
    { "__mul", _wrap_JSONInt___mul},
    { "__div", _wrap_JSONInt___div},
    {0,0}
};

static swig_lua_attribute swig_JSONInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONInt_Sf_SwigStatic = {
    "JSONInt",
    swig_JSONInt_Sf_SwigStatic_methods,
    swig_JSONInt_Sf_SwigStatic_attributes,
    swig_JSONInt_Sf_SwigStatic_constants,
    swig_JSONInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONInt_bases[] = {0,0};
static const char *swig_JSONInt_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONInt = { "JSONInt", "JSONInt", &SWIGTYPE_p_Std__JSONInt,_proxy__wrap_new_JSONInt, swig_delete_JSONInt, swig_JSONInt_methods, swig_JSONInt_attributes, &swig_JSONInt_Sf_SwigStatic, swig_JSONInt_meta, swig_JSONInt_bases, swig_JSONInt_base_names };

static int _wrap_new_JSONUInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONUInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt::JSONUInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt::JSONUInt",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONUInt",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONUInt *)new Std::JSONUInt((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONUInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt::JSONUInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt::JSONUInt",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONUInt",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONUInt *)new Std::JSONUInt((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = 0 ;
  Std::JSONUInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt::JSONUInt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt::JSONUInt",1,"Std::JSONUInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("new_JSONUInt",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  result = (Std::JSONUInt *)new Std::JSONUInt((Std::JSONUInt const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Std::JSONUInt *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt::JSONUInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONUInt::JSONUInt",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (Std::JSONUInt *)new Std::JSONUInt(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONUInt__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONUInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt::JSONUInt(Value const &)\n"
    "    Std::JSONUInt::JSONUInt(Std::JSONValue const &)\n"
    "    Std::JSONUInt::JSONUInt(Std::JSONUInt const &)\n"
    "    Std::JSONUInt::JSONUInt(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::JSONUInt::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::value",1,"Std::JSONUInt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt_value",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  result = (unsigned int)((Std::JSONUInt const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator +",1,"Std::JSONUInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt::operator +",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___add",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONUInt___add",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator +((Std::JSONInt const &)*arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator -",1,"Std::JSONUInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt::operator -",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___sub",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONUInt___sub",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator -((Std::JSONInt const &)*arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator *",1,"Std::JSONUInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt::operator *",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___mul",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONUInt___mul",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator *((Std::JSONInt const &)*arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  Std::JSONInt *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator /",1,"Std::JSONUInt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt::operator /",2,"Std::JSONInt const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___div",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt,0))){
    SWIG_fail_ptr("JSONUInt___div",2,SWIGTYPE_p_Std__JSONInt);
  }
  
  result = (arg1)->operator /((Std::JSONInt const &)*arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator +",1,"Std::JSONUInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt::operator +",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___add",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt::operator +(Std::JSONInt const &)\n"
    "    Std::JSONUInt::operator +(unsigned int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator -",1,"Std::JSONUInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt::operator -",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___sub",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt::operator -(Std::JSONInt const &)\n"
    "    Std::JSONUInt::operator -(unsigned int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator *",1,"Std::JSONUInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt::operator *",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___mul",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt::operator *(Std::JSONInt const &)\n"
    "    Std::JSONUInt::operator *(unsigned int const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt *arg1 = (Std::JSONUInt *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::JSONUInt::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt::operator /",1,"Std::JSONUInt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt::operator /",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt,0))){
    SWIG_fail_ptr("JSONUInt___div",1,SWIGTYPE_p_Std__JSONUInt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt::operator /(Std::JSONInt const &)\n"
    "    Std::JSONUInt::operator /(unsigned int const)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONUInt(void *obj) {
Std::JSONUInt *arg1 = (Std::JSONUInt *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONUInt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONUInt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONUInt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONUInt_methods[]= {
    { "value", _wrap_JSONUInt_value},
    { "__add", _wrap_JSONUInt___add},
    { "__sub", _wrap_JSONUInt___sub},
    { "__mul", _wrap_JSONUInt___mul},
    { "__div", _wrap_JSONUInt___div},
    {0,0}
};
static swig_lua_method swig_JSONUInt_meta[] = {
    { "__add", _wrap_JSONUInt___add},
    { "__sub", _wrap_JSONUInt___sub},
    { "__mul", _wrap_JSONUInt___mul},
    { "__div", _wrap_JSONUInt___div},
    {0,0}
};

static swig_lua_attribute swig_JSONUInt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONUInt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONUInt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONUInt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONUInt_Sf_SwigStatic = {
    "JSONUInt",
    swig_JSONUInt_Sf_SwigStatic_methods,
    swig_JSONUInt_Sf_SwigStatic_attributes,
    swig_JSONUInt_Sf_SwigStatic_constants,
    swig_JSONUInt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONUInt_bases[] = {0,0};
static const char *swig_JSONUInt_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONUInt = { "JSONUInt", "JSONUInt", &SWIGTYPE_p_Std__JSONUInt,_proxy__wrap_new_JSONUInt, swig_delete_JSONUInt, swig_JSONUInt_methods, swig_JSONUInt_attributes, &swig_JSONUInt_Sf_SwigStatic, swig_JSONUInt_meta, swig_JSONUInt_bases, swig_JSONUInt_base_names };

static int _wrap_new_JSONInt64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt64::JSONInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt64::JSONInt64",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONInt64",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONInt64 *)new Std::JSONInt64((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt64::JSONInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt64::JSONInt64",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONInt64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONInt64 *)new Std::JSONInt64((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = 0 ;
  Std::JSONInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt64::JSONInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONInt64::JSONInt64",1,"Std::JSONInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("new_JSONInt64",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = (Std::JSONInt64 *)new Std::JSONInt64((Std::JSONInt64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt64__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  Std::JSONInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONInt64::JSONInt64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONInt64::JSONInt64",1,"int64_t");
  arg1 = (int64_t)lua_tonumber(L, 1);
  result = (Std::JSONInt64 *)new Std::JSONInt64(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONInt64(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt64__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONInt64__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONInt64__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONInt64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt64::JSONInt64(Value const &)\n"
    "    Std::JSONInt64::JSONInt64(Std::JSONValue const &)\n"
    "    Std::JSONInt64::JSONInt64(Std::JSONInt64 const &)\n"
    "    Std::JSONInt64::JSONInt64(int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt64_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  Int64 result;
  
  SWIG_check_num_args("Std::JSONInt64::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::value",1,"Std::JSONInt64 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64_value",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = ((Std::JSONInt64 const *)arg1)->value();
  {
    Int64 * resultptr = new Int64((const Int64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Int64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  Std::JSONInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator +",1,"Std::JSONInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt64::operator +",2,"Std::JSONInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___add",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___add",2,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = (arg1)->operator +((Std::JSONInt64 const &)*arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  Std::JSONInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator -",1,"Std::JSONInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt64::operator -",2,"Std::JSONInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___sub",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___sub",2,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = (arg1)->operator -((Std::JSONInt64 const &)*arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  Std::JSONInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator *",1,"Std::JSONInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt64::operator *",2,"Std::JSONInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___mul",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___mul",2,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = (arg1)->operator *((Std::JSONInt64 const &)*arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  Std::JSONInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator /",1,"Std::JSONInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONInt64::operator /",2,"Std::JSONInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___div",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___div",2,SWIGTYPE_p_Std__JSONInt64);
  }
  
  result = (arg1)->operator /((Std::JSONInt64 const &)*arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  int64_t arg2 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator +",1,"Std::JSONInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt64::operator +",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___add",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  arg2 = (int64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt64___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt64___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt64___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt64::operator +(Std::JSONInt64 const &)\n"
    "    Std::JSONInt64::operator +(int64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt64___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  int64_t arg2 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator -",1,"Std::JSONInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt64::operator -",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___sub",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  arg2 = (int64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt64___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt64___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt64___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt64::operator -(Std::JSONInt64 const &)\n"
    "    Std::JSONInt64::operator -(int64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt64___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  int64_t arg2 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator *",1,"Std::JSONInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt64::operator *",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___mul",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  arg2 = (int64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt64___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt64___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt64___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt64::operator *(Std::JSONInt64 const &)\n"
    "    Std::JSONInt64::operator *(int64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONInt64___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONInt64 *arg1 = (Std::JSONInt64 *) 0 ;
  int64_t arg2 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::JSONInt64::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONInt64::operator /",1,"Std::JSONInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONInt64::operator /",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONInt64,0))){
    SWIG_fail_ptr("JSONInt64___div",1,SWIGTYPE_p_Std__JSONInt64);
  }
  
  arg2 = (int64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONInt64___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONInt64___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONInt64___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONInt64___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONInt64::operator /(Std::JSONInt64 const &)\n"
    "    Std::JSONInt64::operator /(int64_t const)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONInt64(void *obj) {
Std::JSONInt64 *arg1 = (Std::JSONInt64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONInt64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONInt64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONInt64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONInt64_methods[]= {
    { "value", _wrap_JSONInt64_value},
    { "__add", _wrap_JSONInt64___add},
    { "__sub", _wrap_JSONInt64___sub},
    { "__mul", _wrap_JSONInt64___mul},
    { "__div", _wrap_JSONInt64___div},
    {0,0}
};
static swig_lua_method swig_JSONInt64_meta[] = {
    { "__add", _wrap_JSONInt64___add},
    { "__sub", _wrap_JSONInt64___sub},
    { "__mul", _wrap_JSONInt64___mul},
    { "__div", _wrap_JSONInt64___div},
    {0,0}
};

static swig_lua_attribute swig_JSONInt64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONInt64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONInt64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONInt64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONInt64_Sf_SwigStatic = {
    "JSONInt64",
    swig_JSONInt64_Sf_SwigStatic_methods,
    swig_JSONInt64_Sf_SwigStatic_attributes,
    swig_JSONInt64_Sf_SwigStatic_constants,
    swig_JSONInt64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONInt64_bases[] = {0,0};
static const char *swig_JSONInt64_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONInt64 = { "JSONInt64", "JSONInt64", &SWIGTYPE_p_Std__JSONInt64,_proxy__wrap_new_JSONInt64, swig_delete_JSONInt64, swig_JSONInt64_methods, swig_JSONInt64_attributes, &swig_JSONInt64_Sf_SwigStatic, swig_JSONInt64_meta, swig_JSONInt64_bases, swig_JSONInt64_base_names };

static int _wrap_new_JSONUInt64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONUInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt64::JSONUInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt64::JSONUInt64",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONUInt64",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONUInt64 *)new Std::JSONUInt64((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONUInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt64::JSONUInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt64::JSONUInt64",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONUInt64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONUInt64 *)new Std::JSONUInt64((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = 0 ;
  Std::JSONUInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt64::JSONUInt64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONUInt64::JSONUInt64",1,"Std::JSONUInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("new_JSONUInt64",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (Std::JSONUInt64 *)new Std::JSONUInt64((Std::JSONUInt64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt64__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  Std::JSONUInt64 *result = 0 ;
  
  SWIG_check_num_args("Std::JSONUInt64::JSONUInt64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::JSONUInt64::JSONUInt64",1,"uint64_t");
  arg1 = (uint64_t)lua_tonumber(L, 1);
  result = (Std::JSONUInt64 *)new Std::JSONUInt64(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONUInt64(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt64__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONUInt64__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONUInt64__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONUInt64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt64::JSONUInt64(Value const &)\n"
    "    Std::JSONUInt64::JSONUInt64(Std::JSONValue const &)\n"
    "    Std::JSONUInt64::JSONUInt64(Std::JSONUInt64 const &)\n"
    "    Std::JSONUInt64::JSONUInt64(uint64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt64_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::JSONUInt64::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::value",1,"Std::JSONUInt64 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64_value",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (unsigned int)((Std::JSONUInt64 const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  Std::JSONUInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator +",1,"Std::JSONUInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator +",2,"Std::JSONUInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___add",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___add",2,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (arg1)->operator +((Std::JSONUInt64 const &)*arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  Std::JSONUInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator -",1,"Std::JSONUInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator -",2,"Std::JSONUInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___sub",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___sub",2,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (arg1)->operator -((Std::JSONUInt64 const &)*arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  Std::JSONUInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator *",1,"Std::JSONUInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator *",2,"Std::JSONUInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___mul",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___mul",2,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (arg1)->operator *((Std::JSONUInt64 const &)*arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  Std::JSONUInt64 *arg2 = 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator /",1,"Std::JSONUInt64 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator /",2,"Std::JSONUInt64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___div",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___div",2,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  result = (arg1)->operator /((Std::JSONUInt64 const &)*arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator +",1,"Std::JSONUInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator +",2,"uint64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___add",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  arg2 = (uint64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt64___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt64___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt64___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt64::operator +(Std::JSONUInt64 const &)\n"
    "    Std::JSONUInt64::operator +(uint64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt64___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator -",1,"Std::JSONUInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator -",2,"uint64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___sub",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  arg2 = (uint64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt64___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt64___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt64___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt64::operator -(Std::JSONUInt64 const &)\n"
    "    Std::JSONUInt64::operator -(uint64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt64___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator *",1,"Std::JSONUInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator *",2,"uint64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___mul",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  arg2 = (uint64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt64___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt64___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt64___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt64::operator *(Std::JSONUInt64 const &)\n"
    "    Std::JSONUInt64::operator *(uint64_t const)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONUInt64___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) 0 ;
  uint64_t arg2 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::JSONUInt64::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONUInt64::operator /",1,"Std::JSONUInt64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONUInt64::operator /",2,"uint64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONUInt64,0))){
    SWIG_fail_ptr("JSONUInt64___div",1,SWIGTYPE_p_Std__JSONUInt64);
  }
  
  arg2 = (uint64_t const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONUInt64___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONUInt64___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONUInt64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONUInt64___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONUInt64___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONUInt64::operator /(Std::JSONUInt64 const &)\n"
    "    Std::JSONUInt64::operator /(uint64_t const)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONUInt64(void *obj) {
Std::JSONUInt64 *arg1 = (Std::JSONUInt64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONUInt64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONUInt64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONUInt64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONUInt64_methods[]= {
    { "value", _wrap_JSONUInt64_value},
    { "__add", _wrap_JSONUInt64___add},
    { "__sub", _wrap_JSONUInt64___sub},
    { "__mul", _wrap_JSONUInt64___mul},
    { "__div", _wrap_JSONUInt64___div},
    {0,0}
};
static swig_lua_method swig_JSONUInt64_meta[] = {
    { "__add", _wrap_JSONUInt64___add},
    { "__sub", _wrap_JSONUInt64___sub},
    { "__mul", _wrap_JSONUInt64___mul},
    { "__div", _wrap_JSONUInt64___div},
    {0,0}
};

static swig_lua_attribute swig_JSONUInt64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONUInt64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONUInt64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONUInt64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONUInt64_Sf_SwigStatic = {
    "JSONUInt64",
    swig_JSONUInt64_Sf_SwigStatic_methods,
    swig_JSONUInt64_Sf_SwigStatic_attributes,
    swig_JSONUInt64_Sf_SwigStatic_constants,
    swig_JSONUInt64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONUInt64_bases[] = {0,0};
static const char *swig_JSONUInt64_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONUInt64 = { "JSONUInt64", "JSONUInt64", &SWIGTYPE_p_Std__JSONUInt64,_proxy__wrap_new_JSONUInt64, swig_delete_JSONUInt64, swig_JSONUInt64_methods, swig_JSONUInt64_attributes, &swig_JSONUInt64_Sf_SwigStatic, swig_JSONUInt64_meta, swig_JSONUInt64_bases, swig_JSONUInt64_base_names };

static int _wrap_new_JSONString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONString *result = 0 ;
  
  SWIG_check_num_args("Std::JSONString::JSONString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONString::JSONString",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONString",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONString *)new Std::JSONString((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONString *result = 0 ;
  
  SWIG_check_num_args("Std::JSONString::JSONString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONString::JSONString",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONString",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONString *)new Std::JSONString((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONString *arg1 = 0 ;
  Std::JSONString *result = 0 ;
  
  SWIG_check_num_args("Std::JSONString::JSONString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONString::JSONString",1,"Std::JSONString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("new_JSONString",1,SWIGTYPE_p_Std__JSONString);
  }
  
  result = (Std::JSONString *)new Std::JSONString((Std::JSONString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::JSONString *result = 0 ;
  
  SWIG_check_num_args("Std::JSONString::JSONString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::JSONString::JSONString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::JSONString *)new Std::JSONString((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONString__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  Std::JSONString *result = 0 ;
  
  SWIG_check_num_args("Std::JSONString::JSONString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::JSONString::JSONString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Std::JSONString *)new Std::JSONString((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONString__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONString, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONString__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONString__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONString__SWIG_4(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONString::JSONString(Value const &)\n"
    "    Std::JSONString::JSONString(Std::JSONValue const &)\n"
    "    Std::JSONString::JSONString(Std::JSONString const &)\n"
    "    Std::JSONString::JSONString(char const *)\n"
    "    Std::JSONString::JSONString(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONString_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONString *arg1 = (Std::JSONString *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::JSONString::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONString::value",1,"Std::JSONString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("JSONString_value",1,SWIGTYPE_p_Std__JSONString);
  }
  
  result = ((Std::JSONString const *)arg1)->value();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONString___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONString *arg1 = (Std::JSONString *) 0 ;
  Std::JSONString *arg2 = 0 ;
  SwigValueWrapper< Std::JSONString > result;
  
  SWIG_check_num_args("Std::JSONString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONString::operator +",1,"Std::JSONString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONString::operator +",2,"Std::JSONString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("JSONString___add",1,SWIGTYPE_p_Std__JSONString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("JSONString___add",2,SWIGTYPE_p_Std__JSONString);
  }
  
  result = (arg1)->operator +((Std::JSONString const &)*arg2);
  {
    Std::JSONString * resultptr = new Std::JSONString((const Std::JSONString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONString___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONString *arg1 = (Std::JSONString *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< Std::JSONString > result;
  
  SWIG_check_num_args("Std::JSONString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONString::operator +",1,"Std::JSONString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONString::operator +",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("JSONString___add",1,SWIGTYPE_p_Std__JSONString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->operator +((char const *)arg2);
  {
    Std::JSONString * resultptr = new Std::JSONString((const Std::JSONString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONString___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONString *arg1 = (Std::JSONString *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< Std::JSONString > result;
  
  SWIG_check_num_args("Std::JSONString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONString::operator +",1,"Std::JSONString *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::JSONString::operator +",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONString,0))){
    SWIG_fail_ptr("JSONString___add",1,SWIGTYPE_p_Std__JSONString);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->operator +((std::string const &)*arg2);
  {
    Std::JSONString * resultptr = new Std::JSONString((const Std::JSONString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONString___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__JSONString, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JSONString___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONString___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSONString___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONString___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONString::operator +(Std::JSONString const &)\n"
    "    Std::JSONString::operator +(char const *)\n"
    "    Std::JSONString::operator +(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_JSONString(void *obj) {
Std::JSONString *arg1 = (Std::JSONString *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONString_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONString_methods[]= {
    { "value", _wrap_JSONString_value},
    { "__add", _wrap_JSONString___add},
    {0,0}
};
static swig_lua_method swig_JSONString_meta[] = {
    { "__add", _wrap_JSONString___add},
    {0,0}
};

static swig_lua_attribute swig_JSONString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONString_Sf_SwigStatic = {
    "JSONString",
    swig_JSONString_Sf_SwigStatic_methods,
    swig_JSONString_Sf_SwigStatic_attributes,
    swig_JSONString_Sf_SwigStatic_constants,
    swig_JSONString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONString_bases[] = {0,0};
static const char *swig_JSONString_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONString = { "JSONString", "JSONString", &SWIGTYPE_p_Std__JSONString,_proxy__wrap_new_JSONString, swig_delete_JSONString, swig_JSONString_methods, swig_JSONString_attributes, &swig_JSONString_Sf_SwigStatic, swig_JSONString_meta, swig_JSONString_bases, swig_JSONString_base_names };

static int _wrap_new_JSONBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONBool *result = 0 ;
  
  SWIG_check_num_args("Std::JSONBool::JSONBool",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONBool::JSONBool",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONBool",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONBool *)new Std::JSONBool((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONBool *result = 0 ;
  
  SWIG_check_num_args("Std::JSONBool::JSONBool",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONBool::JSONBool",1,"Value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONBool",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONBool *)new Std::JSONBool((Value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONBool__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONBool *arg1 = 0 ;
  Std::JSONBool *result = 0 ;
  
  SWIG_check_num_args("Std::JSONBool::JSONBool",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONBool::JSONBool",1,"Std::JSONBool const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONBool,0))){
    SWIG_fail_ptr("new_JSONBool",1,SWIGTYPE_p_Std__JSONBool);
  }
  
  result = (Std::JSONBool *)new Std::JSONBool((Std::JSONBool const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONBool__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  Std::JSONBool *result = 0 ;
  
  SWIG_check_num_args("Std::JSONBool::JSONBool",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Std::JSONBool::JSONBool",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (Std::JSONBool *)new Std::JSONBool(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONBool(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONBool, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONBool__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONBool__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONBool__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JSONBool__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONBool::JSONBool(Std::JSONValue const &)\n"
    "    Std::JSONBool::JSONBool(Value const &)\n"
    "    Std::JSONBool::JSONBool(Std::JSONBool const &)\n"
    "    Std::JSONBool::JSONBool(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONBool_value(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONBool *arg1 = (Std::JSONBool *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONBool::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONBool::value",1,"Std::JSONBool const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONBool,0))){
    SWIG_fail_ptr("JSONBool_value",1,SWIGTYPE_p_Std__JSONBool);
  }
  
  result = (bool)((Std::JSONBool const *)arg1)->value();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JSONBool(void *obj) {
Std::JSONBool *arg1 = (Std::JSONBool *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONBool(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONBool);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONBool_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONBool_methods[]= {
    { "value", _wrap_JSONBool_value},
    {0,0}
};
static swig_lua_method swig_JSONBool_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_JSONBool_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONBool_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONBool_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONBool_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONBool_Sf_SwigStatic = {
    "JSONBool",
    swig_JSONBool_Sf_SwigStatic_methods,
    swig_JSONBool_Sf_SwigStatic_attributes,
    swig_JSONBool_Sf_SwigStatic_constants,
    swig_JSONBool_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONBool_bases[] = {0,0};
static const char *swig_JSONBool_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONBool = { "JSONBool", "JSONBool", &SWIGTYPE_p_Std__JSONBool,_proxy__wrap_new_JSONBool, swig_delete_JSONBool, swig_JSONBool_methods, swig_JSONBool_attributes, &swig_JSONBool_Sf_SwigStatic, swig_JSONBool_meta, swig_JSONBool_bases, swig_JSONBool_base_names };

static int _wrap_new_JSONArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  Std::JSONArray *result = 0 ;
  
  SWIG_check_num_args("Std::JSONArray::JSONArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONArray::JSONArray",1,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("new_JSONArray",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (Std::JSONArray *)new Std::JSONArray((Std::JSONValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Value *arg1 = 0 ;
  Std::JSONArray *result = 0 ;
  
  SWIG_check_num_args("Std::JSONArray::JSONArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::JSONArray::JSONArray",1,"Value &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Value,0))){
    SWIG_fail_ptr("new_JSONArray",1,SWIGTYPE_p_Value);
  }
  
  result = (Std::JSONArray *)new Std::JSONArray(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSONArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONValue, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONArray__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_JSONArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JSONArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONArray::JSONArray(Std::JSONValue const &)\n"
    "    Std::JSONArray::JSONArray(Value &)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::JSONValue result;
  
  SWIG_check_num_args("Std::JSONArray::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::__getitem",1,"Std::JSONArray *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONArray::__getitem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray___getitem",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->__getitem((char const *)arg2);
  {
    Std::JSONValue * resultptr = new Std::JSONValue((const Std::JSONValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("Std::JSONArray::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::__setitem",1,"Std::JSONArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONArray::__setitem",2,"int const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::JSONArray::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray___setitem",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::JSONArray::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::__setitem",1,"Std::JSONArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONArray::__setitem",2,"int const");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::JSONArray::__setitem",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray___setitem",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->__setitem(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Std::JSONArray::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::__setitem",1,"Std::JSONArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONArray::__setitem",2,"int const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::JSONArray::__setitem",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray___setitem",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONArray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONArray___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSONArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSONArray___setitem__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSONArray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSONArray::__setitem(int const,double)\n"
    "    Std::JSONArray::__setitem(int const,char const *)\n"
    "    Std::JSONArray::__setitem(int const,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_JSONArray_append(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  Std::JSONValue *arg2 = 0 ;
  
  SWIG_check_num_args("Std::JSONArray::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::append",1,"Std::JSONArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSONArray::append",2,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_append",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONArray_append",2,SWIGTYPE_p_Std__JSONValue);
  }
  
  (arg1)->append(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_insert(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  size_t arg2 ;
  Std::JSONValue *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONArray::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::insert",1,"Std::JSONArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONArray::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::JSONArray::insert",3,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_insert",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSONArray_insert",3,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = (bool)(arg1)->insert(arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_remove(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::JSONArray::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::remove",1,"Std::JSONArray *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSONArray::remove",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_remove",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->remove((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSONArray::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::empty",1,"Std::JSONArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_empty",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  result = (bool)((Std::JSONArray const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  
  SWIG_check_num_args("Std::JSONArray::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::clear",1,"Std::JSONArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_clear",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::JSONArray::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::resize",1,"Std::JSONArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::JSONArray::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_resize",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSONArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONArray *arg1 = (Std::JSONArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::JSONArray::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSONArray::size",1,"Std::JSONArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONArray,0))){
    SWIG_fail_ptr("JSONArray_size",1,SWIGTYPE_p_Std__JSONArray);
  }
  
  result = ((Std::JSONArray const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JSONArray(void *obj) {
Std::JSONArray *arg1 = (Std::JSONArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSONArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSONArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSONArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JSONArray_methods[]= {
    { "__getitem", _wrap_JSONArray___getitem},
    { "__setitem", _wrap_JSONArray___setitem},
    { "append", _wrap_JSONArray_append},
    { "insert", _wrap_JSONArray_insert},
    { "remove", _wrap_JSONArray_remove},
    { "empty", _wrap_JSONArray_empty},
    { "clear", _wrap_JSONArray_clear},
    { "resize", _wrap_JSONArray_resize},
    { "size", _wrap_JSONArray_size},
    {0,0}
};
static swig_lua_method swig_JSONArray_meta[] = {
    { "__getitem", _wrap_JSONArray___getitem},
    { "__setitem", _wrap_JSONArray___setitem},
    {0,0}
};

static swig_lua_attribute swig_JSONArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSONArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSONArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSONArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSONArray_Sf_SwigStatic = {
    "JSONArray",
    swig_JSONArray_Sf_SwigStatic_methods,
    swig_JSONArray_Sf_SwigStatic_attributes,
    swig_JSONArray_Sf_SwigStatic_constants,
    swig_JSONArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSONArray_bases[] = {0,0};
static const char *swig_JSONArray_base_names[] = {"Std::JSONValue *",0};
static swig_lua_class _wrap_class_JSONArray = { "JSONArray", "JSONArray", &SWIGTYPE_p_Std__JSONArray,_proxy__wrap_new_JSONArray, swig_delete_JSONArray, swig_JSONArray_methods, swig_JSONArray_attributes, &swig_JSONArray_Sf_SwigStatic, swig_JSONArray_meta, swig_JSONArray_bases, swig_JSONArray_base_names };

static int _wrap_JSON_r_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  Reader arg2 ;
  Reader *argp2 ;
  
  SWIG_check_num_args("Std::JSON::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::r",1,"Std::JSON *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::JSON::r",2,"Reader");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_r_set",1,SWIGTYPE_p_Std__JSON);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Reader,0))){
    SWIG_fail_ptr("JSON_r_set",2,SWIGTYPE_p_Reader);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_r_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  Reader result;
  
  SWIG_check_num_args("Std::JSON::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::r",1,"Std::JSON *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_r_get",1,SWIGTYPE_p_Std__JSON);
  }
  
  result =  ((arg1)->r);
  {
    Reader * resultptr = new Reader((const Reader &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Reader,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_root_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  Std::JSONValue *arg2 = (Std::JSONValue *) 0 ;
  
  SWIG_check_num_args("Std::JSON::root",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::root",1,"Std::JSON *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::JSON::root",2,"Std::JSONValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_root_set",1,SWIGTYPE_p_Std__JSON);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSON_root_set",2,SWIGTYPE_p_Std__JSONValue);
  }
  
  if (arg1) (arg1)->root = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_root_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSON::root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::root",1,"Std::JSON *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_root_get",1,SWIGTYPE_p_Std__JSON);
  }
  
  result = (Std::JSONValue *)& ((arg1)->root);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JSON(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *result = 0 ;
  
  SWIG_check_num_args("Std::JSON::JSON",0,0)
  result = (Std::JSON *)new Std::JSON();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSON,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_parse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Std::JSON::parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::parse",1,"Std::JSON *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSON::parse",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::JSON::parse",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_parse",1,SWIGTYPE_p_Std__JSON);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->parse((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_parse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::JSON::parse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::parse",1,"Std::JSON *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSON::parse",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_parse",1,SWIGTYPE_p_Std__JSON);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->parse((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_parse(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSON, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_JSON_parse__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__JSON, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_JSON_parse__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JSON_parse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::JSON::parse(char const *,bool)\n"
    "    Std::JSON::parse(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_JSON___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::JSONValue result;
  
  SWIG_check_num_args("Std::JSON::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::__getitem",1,"Std::JSON *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSON::__getitem",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON___getitem",1,SWIGTYPE_p_Std__JSON);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->__getitem((char const *)arg2);
  {
    Std::JSONValue * resultptr = new Std::JSONValue((const Std::JSONValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::JSONValue *arg3 = 0 ;
  
  SWIG_check_num_args("Std::JSON::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::__setitem",1,"Std::JSON *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::JSON::__setitem",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::JSON::__setitem",3,"Std::JSONValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON___setitem",1,SWIGTYPE_p_Std__JSON);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("JSON___setitem",3,SWIGTYPE_p_Std__JSONValue);
  }
  
  (arg1)->__setitem((char const *)arg2,(Std::JSONValue const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_get_root(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  Std::JSONValue *result = 0 ;
  
  SWIG_check_num_args("Std::JSON::get_root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::get_root",1,"Std::JSON *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_get_root",1,SWIGTYPE_p_Std__JSON);
  }
  
  result = (Std::JSONValue *) &(arg1)->get_root();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__JSONValue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JSON_to_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSON *arg1 = (Std::JSON *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::JSON::to_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::JSON::to_string",1,"Std::JSON *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSON,0))){
    SWIG_fail_ptr("JSON_to_string",1,SWIGTYPE_p_Std__JSON);
  }
  
  result = (arg1)->to_string();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JSON(void *obj) {
Std::JSON *arg1 = (Std::JSON *) obj;
delete arg1;
}
static int _proxy__wrap_new_JSON(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JSON);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JSON_attributes[] = {
    { "r", _wrap_JSON_r_get, _wrap_JSON_r_set },
    { "root", _wrap_JSON_root_get, _wrap_JSON_root_set },
    {0,0,0}
};
static swig_lua_method swig_JSON_methods[]= {
    { "parse", _wrap_JSON_parse},
    { "__getitem", _wrap_JSON___getitem},
    { "__setitem", _wrap_JSON___setitem},
    { "get_root", _wrap_JSON_get_root},
    { "to_string", _wrap_JSON_to_string},
    {0,0}
};
static swig_lua_method swig_JSON_meta[] = {
    { "__getitem", _wrap_JSON___getitem},
    { "__setitem", _wrap_JSON___setitem},
    {0,0}
};

static swig_lua_attribute swig_JSON_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JSON_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JSON_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JSON_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JSON_Sf_SwigStatic = {
    "JSON",
    swig_JSON_Sf_SwigStatic_methods,
    swig_JSON_Sf_SwigStatic_attributes,
    swig_JSON_Sf_SwigStatic_constants,
    swig_JSON_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JSON_bases[] = {0};
static const char *swig_JSON_base_names[] = {0};
static swig_lua_class _wrap_class_JSON = { "JSON", "JSON", &SWIGTYPE_p_Std__JSON,_proxy__wrap_new_JSON, swig_delete_JSON, swig_JSON_methods, swig_JSON_attributes, &swig_JSON_Sf_SwigStatic, swig_JSON_meta, swig_JSON_bases, swig_JSON_base_names };

static int _wrap_cast_double(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONDouble > result;
  
  SWIG_check_num_args("Std::cast_double",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_double",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_double",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_double(*arg1);
  {
    Std::JSONDouble * resultptr = new Std::JSONDouble((const Std::JSONDouble &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONDouble,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_int(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONInt > result;
  
  SWIG_check_num_args("Std::cast_int",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_int",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_int",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_int(*arg1);
  {
    Std::JSONInt * resultptr = new Std::JSONInt((const Std::JSONInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_uint(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONUInt > result;
  
  SWIG_check_num_args("Std::cast_uint",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_uint",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_uint",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_uint(*arg1);
  {
    Std::JSONUInt * resultptr = new Std::JSONUInt((const Std::JSONUInt &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_int64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONInt64 > result;
  
  SWIG_check_num_args("Std::cast_int64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_int64",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_int64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_int64(*arg1);
  {
    Std::JSONInt64 * resultptr = new Std::JSONInt64((const Std::JSONInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_uint64(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONUInt64 > result;
  
  SWIG_check_num_args("Std::cast_uint64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_uint64",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_uint64",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_uint64(*arg1);
  {
    Std::JSONUInt64 * resultptr = new Std::JSONUInt64((const Std::JSONUInt64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONUInt64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONString > result;
  
  SWIG_check_num_args("Std::cast_string",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_string",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_string",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_string(*arg1);
  {
    Std::JSONString * resultptr = new Std::JSONString((const Std::JSONString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_bool(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONBool > result;
  
  SWIG_check_num_args("Std::cast_bool",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_bool",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_bool",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_bool(*arg1);
  {
    Std::JSONBool * resultptr = new Std::JSONBool((const Std::JSONBool &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONBool,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cast_array(lua_State* L) {
  int SWIG_arg = 0;
  Std::JSONValue *arg1 = 0 ;
  SwigValueWrapper< Std::JSONArray > result;
  
  SWIG_check_num_args("Std::cast_array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::cast_array",1,"Std::JSONValue &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__JSONValue,0))){
    SWIG_fail_ptr("cast_array",1,SWIGTYPE_p_Std__JSONValue);
  }
  
  result = Std::cast_array(*arg1);
  {
    Std::JSONArray * resultptr = new Std::JSONArray((const Std::JSONArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__JSONArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *result = 0 ;
  
  SWIG_check_num_args("Std::Path::Path",0,0)
  result = (Std::Path *)new Std::Path();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Path,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  Std::Path *result = 0 ;
  
  SWIG_check_num_args("Std::Path::Path",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::Path::Path",1,"std::string const");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (Std::Path *)new Std::Path(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Path,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Path__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = 0 ;
  Std::Path *result = 0 ;
  
  SWIG_check_num_args("Std::Path::Path",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::Path::Path",1,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("new_Path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (Std::Path *)new Std::Path((Std::Path const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Path,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Path(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Path__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__Path, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Path__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Path__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::Path::Path()\n"
    "    Std::Path::Path(std::string const)\n"
    "    Std::Path::Path(Std::Path const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Path_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  
  SWIG_check_num_args("Std::Path::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::clear",1,"Std::Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_clear",1,SWIGTYPE_p_Std__Path);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_make_preferred(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  
  SWIG_check_num_args("Std::Path::make_preferred",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::make_preferred",1,"Std::Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_make_preferred",1,SWIGTYPE_p_Std__Path);
  }
  
  (arg1)->make_preferred();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_remove_filename(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::remove_filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::remove_filename",1,"Std::Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_remove_filename",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (arg1)->remove_filename();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_replace_filename(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::replace_filename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::replace_filename",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::replace_filename",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_replace_filename",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_replace_filename",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (arg1)->replace_filename((Std::Path const &)*arg2);
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_replace_extension(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::replace_extension",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::replace_extension",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::replace_extension",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_replace_extension",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_replace_extension",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (arg1)->replace_extension((Std::Path const &)*arg2);
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_swap(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  
  SWIG_check_num_args("Std::Path::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::swap",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::swap",2,"Std::Path &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_swap",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_swap",2,SWIGTYPE_p_Std__Path);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_c_str(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::Path::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::c_str",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_c_str",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (char *)((Std::Path const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::Path::string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::string",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_string",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->string();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_genetic_string(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::Path::genetic_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::genetic_string",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_genetic_string",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->genetic_string();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_compare(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("Std::Path::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::compare",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::compare",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_compare",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_compare",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (int)(arg1)->compare((Std::Path const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_lexically_normal(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::lexically_normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::lexically_normal",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_lexically_normal",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->lexically_normal();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_lexically_relative(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::lexically_relative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::lexically_relative",1,"Std::Path const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::lexically_relative",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_lexically_relative",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_lexically_relative",2,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->lexically_relative((Std::Path const &)*arg2);
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_lexically_proximate(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::lexically_proximate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::lexically_proximate",1,"Std::Path const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::lexically_proximate",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_lexically_proximate",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_lexically_proximate",2,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->lexically_proximate((Std::Path const &)*arg2);
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_root_name(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::root_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::root_name",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_root_name",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->root_name();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_root_directory(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::root_directory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::root_directory",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_root_directory",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->root_directory();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_root_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::root_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::root_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_root_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->root_path();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_relative_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::relative_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::relative_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_relative_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->relative_path();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_parent_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::parent_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::parent_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_parent_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->parent_path();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_filename(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::filename",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_filename",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->filename();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_stem(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::stem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::stem",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_stem",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->stem();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_extension(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::Path::extension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::extension",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_extension",1,SWIGTYPE_p_Std__Path);
  }
  
  result = ((Std::Path const *)arg1)->extension();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::empty",1,"Std::Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_empty",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_root_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_root_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_root_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_root_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_root_path();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_root_name(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_root_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_root_name",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_root_name",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_root_name();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_root_directory(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_root_directory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_root_directory",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_root_directory",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_root_directory();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_relative_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_relative_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_relative_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_relative_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_relative_path();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_parent_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_parent_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_parent_path",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_parent_path",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_parent_path();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_filename(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_filename",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_filename",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_filename();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_stem(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_stem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_stem",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_stem",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_stem();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_has_extension(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::has_extension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::has_extension",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_has_extension",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->has_extension();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_is_absolute(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::is_absolute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::is_absolute",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_is_absolute",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->is_absolute();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_is_relative(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::is_relative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::is_relative",1,"Std::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_is_relative",1,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)((Std::Path const *)arg1)->is_relative();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::operator ==",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::operator ==",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___eq",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___eq",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)(arg1)->operator ==((Std::Path const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path___le(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::operator <=",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::operator <=",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___le",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___le",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)(arg1)->operator <=((Std::Path const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path___lt(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::Path::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::operator <",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::operator <",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___lt",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path___lt",2,SWIGTYPE_p_Std__Path);
  }
  
  result = (bool)(arg1)->operator <((Std::Path const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_concat(lua_State* L) {
  int SWIG_arg = 0;
  Std::Path *arg1 = (Std::Path *) 0 ;
  Std::Path *arg2 = 0 ;
  
  SWIG_check_num_args("Std::Path::concat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Path::concat",1,"Std::Path *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::Path::concat",2,"Std::Path const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_concat",1,SWIGTYPE_p_Std__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__Path,0))){
    SWIG_fail_ptr("Path_concat",2,SWIGTYPE_p_Std__Path);
  }
  
  (arg1)->concat((Std::Path const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Path(void *obj) {
Std::Path *arg1 = (Std::Path *) obj;
delete arg1;
}
static int _proxy__wrap_new_Path(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Path);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Path_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Path_methods[]= {
    { "clear", _wrap_Path_clear},
    { "make_preferred", _wrap_Path_make_preferred},
    { "remove_filename", _wrap_Path_remove_filename},
    { "replace_filename", _wrap_Path_replace_filename},
    { "replace_extension", _wrap_Path_replace_extension},
    { "swap", _wrap_Path_swap},
    { "c_str", _wrap_Path_c_str},
    { "string", _wrap_Path_string},
    { "genetic_string", _wrap_Path_genetic_string},
    { "compare", _wrap_Path_compare},
    { "lexically_normal", _wrap_Path_lexically_normal},
    { "lexically_relative", _wrap_Path_lexically_relative},
    { "lexically_proximate", _wrap_Path_lexically_proximate},
    { "root_name", _wrap_Path_root_name},
    { "root_directory", _wrap_Path_root_directory},
    { "root_path", _wrap_Path_root_path},
    { "relative_path", _wrap_Path_relative_path},
    { "parent_path", _wrap_Path_parent_path},
    { "filename", _wrap_Path_filename},
    { "stem", _wrap_Path_stem},
    { "extension", _wrap_Path_extension},
    { "empty", _wrap_Path_empty},
    { "has_root_path", _wrap_Path_has_root_path},
    { "has_root_name", _wrap_Path_has_root_name},
    { "has_root_directory", _wrap_Path_has_root_directory},
    { "has_relative_path", _wrap_Path_has_relative_path},
    { "has_parent_path", _wrap_Path_has_parent_path},
    { "has_filename", _wrap_Path_has_filename},
    { "has_stem", _wrap_Path_has_stem},
    { "has_extension", _wrap_Path_has_extension},
    { "is_absolute", _wrap_Path_is_absolute},
    { "is_relative", _wrap_Path_is_relative},
    { "__eq", _wrap_Path___eq},
    { "__le", _wrap_Path___le},
    { "__lt", _wrap_Path___lt},
    { "concat", _wrap_Path_concat},
    {0,0}
};
static swig_lua_method swig_Path_meta[] = {
    { "__eq", _wrap_Path___eq},
    { "__le", _wrap_Path___le},
    { "__lt", _wrap_Path___lt},
    {0,0}
};

static swig_lua_attribute swig_Path_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Path_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Path_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Path_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Path_Sf_SwigStatic = {
    "Path",
    swig_Path_Sf_SwigStatic_methods,
    swig_Path_Sf_SwigStatic_attributes,
    swig_Path_Sf_SwigStatic_constants,
    swig_Path_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Path_bases[] = {0};
static const char *swig_Path_base_names[] = {0};
static swig_lua_class _wrap_class_Path = { "Path", "Path", &SWIGTYPE_p_Std__Path,_proxy__wrap_new_Path, swig_delete_Path, swig_Path_methods, swig_Path_attributes, &swig_Path_Sf_SwigStatic, swig_Path_meta, swig_Path_bases, swig_Path_base_names };

static int _wrap_new_DirEntry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *result = 0 ;
  
  SWIG_check_num_args("Std::DirEntry::DirEntry",0,0)
  result = (Std::DirEntry *)new Std::DirEntry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__DirEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirEntry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::filesystem::directory_entry *arg1 = 0 ;
  Std::DirEntry *result = 0 ;
  
  SWIG_check_num_args("Std::DirEntry::DirEntry",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::DirEntry::DirEntry",1,"std::filesystem::directory_entry &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__directory_entry,0))){
    SWIG_fail_ptr("new_DirEntry",1,SWIGTYPE_p_std__filesystem__directory_entry);
  }
  
  result = (Std::DirEntry *)new Std::DirEntry(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__DirEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirEntry(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DirEntry__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__filesystem__directory_entry, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DirEntry__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirEntry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::DirEntry::DirEntry()\n"
    "    Std::DirEntry::DirEntry(std::filesystem::directory_entry &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirEntry_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::DirEntry::path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::path",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_path",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (arg1)->path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_to_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  Std::Path result;
  
  SWIG_check_num_args("Std::DirEntry::to_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::to_path",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_to_path",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (arg1)->to_path();
  {
    Std::Path * resultptr = new Std::Path((const Std::Path &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__Path,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_exists(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::exists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::exists",1,"Std::DirEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_exists",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)((Std::DirEntry const *)arg1)->exists();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_block_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_block_file",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_block_file",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_block_file",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_block_file();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_character_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_character_file",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_character_file",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_character_file",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_character_file();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_directory(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_directory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_directory",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_directory",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_directory();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_fifo(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_fifo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_fifo",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_fifo",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_fifo();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_other(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_other",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_other",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_other",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_other();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_regular_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_regular_file",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_regular_file",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_regular_file",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_regular_file();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_socket(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_socket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_socket",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_socket",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_socket();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_is_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::DirEntry::is_symlink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::is_symlink",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_is_symlink",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (bool)(arg1)->is_symlink();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_hard_link_count(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  uintmax_t result;
  
  SWIG_check_num_args("Std::DirEntry::hard_link_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::hard_link_count",1,"Std::DirEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_hard_link_count",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (uintmax_t)(arg1)->hard_link_count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_type(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::DirEntry::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::type",1,"Std::DirEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_type",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (int)((Std::DirEntry const *)arg1)->type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DirEntry_permissions(lua_State* L) {
  int SWIG_arg = 0;
  Std::DirEntry *arg1 = (Std::DirEntry *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::DirEntry::permissions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::DirEntry::permissions",1,"Std::DirEntry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__DirEntry,0))){
    SWIG_fail_ptr("DirEntry_permissions",1,SWIGTYPE_p_Std__DirEntry);
  }
  
  result = (int)((Std::DirEntry const *)arg1)->permissions();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirEntry(void *obj) {
Std::DirEntry *arg1 = (Std::DirEntry *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirEntry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirEntry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirEntry_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirEntry_methods[]= {
    { "path", _wrap_DirEntry_path},
    { "to_path", _wrap_DirEntry_to_path},
    { "exists", _wrap_DirEntry_exists},
    { "is_block_file", _wrap_DirEntry_is_block_file},
    { "is_character_file", _wrap_DirEntry_is_character_file},
    { "is_directory", _wrap_DirEntry_is_directory},
    { "is_fifo", _wrap_DirEntry_is_fifo},
    { "is_other", _wrap_DirEntry_is_other},
    { "is_regular_file", _wrap_DirEntry_is_regular_file},
    { "is_socket", _wrap_DirEntry_is_socket},
    { "is_symlink", _wrap_DirEntry_is_symlink},
    { "hard_link_count", _wrap_DirEntry_hard_link_count},
    { "type", _wrap_DirEntry_type},
    { "permissions", _wrap_DirEntry_permissions},
    {0,0}
};
static swig_lua_method swig_DirEntry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirEntry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirEntry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirEntry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirEntry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirEntry_Sf_SwigStatic = {
    "DirEntry",
    swig_DirEntry_Sf_SwigStatic_methods,
    swig_DirEntry_Sf_SwigStatic_attributes,
    swig_DirEntry_Sf_SwigStatic_constants,
    swig_DirEntry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirEntry_bases[] = {0};
static const char *swig_DirEntry_base_names[] = {0};
static swig_lua_class _wrap_class_DirEntry = { "DirEntry", "DirEntry", &SWIGTYPE_p_Std__DirEntry,_proxy__wrap_new_DirEntry, swig_delete_DirEntry, swig_DirEntry_methods, swig_DirEntry_attributes, &swig_DirEntry_Sf_SwigStatic, swig_DirEntry_meta, swig_DirEntry_bases, swig_DirEntry_base_names };

static int _wrap_new_FileStatus(lua_State* L) {
  int SWIG_arg = 0;
  std::filesystem::file_status arg1 ;
  std::filesystem::file_status *argp1 ;
  Std::FileStatus *result = 0 ;
  
  SWIG_check_num_args("Std::FileStatus::FileStatus",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::FileStatus::FileStatus",1,"std::filesystem::file_status");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__filesystem__file_status,0))){
    SWIG_fail_ptr("new_FileStatus",1,SWIGTYPE_p_std__filesystem__file_status);
  }
  arg1 = *argp1;
  
  result = (Std::FileStatus *)new Std::FileStatus(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__FileStatus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileStatus_type(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileStatus *arg1 = (Std::FileStatus *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::FileStatus::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileStatus::type",1,"Std::FileStatus const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileStatus,0))){
    SWIG_fail_ptr("FileStatus_type",1,SWIGTYPE_p_Std__FileStatus);
  }
  
  result = (int)((Std::FileStatus const *)arg1)->type();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileStatus_permissions(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileStatus *arg1 = (Std::FileStatus *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::FileStatus::permissions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileStatus::permissions",1,"Std::FileStatus const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileStatus,0))){
    SWIG_fail_ptr("FileStatus_permissions",1,SWIGTYPE_p_Std__FileStatus);
  }
  
  result = (int)((Std::FileStatus const *)arg1)->permissions();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileStatus(void *obj) {
Std::FileStatus *arg1 = (Std::FileStatus *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileStatus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileStatus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileStatus_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileStatus_methods[]= {
    { "type", _wrap_FileStatus_type},
    { "permissions", _wrap_FileStatus_permissions},
    {0,0}
};
static swig_lua_method swig_FileStatus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileStatus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileStatus_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileStatus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileStatus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileStatus_Sf_SwigStatic = {
    "FileStatus",
    swig_FileStatus_Sf_SwigStatic_methods,
    swig_FileStatus_Sf_SwigStatic_attributes,
    swig_FileStatus_Sf_SwigStatic_constants,
    swig_FileStatus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileStatus_bases[] = {0};
static const char *swig_FileStatus_base_names[] = {0};
static swig_lua_class _wrap_class_FileStatus = { "FileStatus", "FileStatus", &SWIGTYPE_p_Std__FileStatus,_proxy__wrap_new_FileStatus, swig_delete_FileStatus, swig_FileStatus_methods, swig_FileStatus_attributes, &swig_FileStatus_Sf_SwigStatic, swig_FileStatus_meta, swig_FileStatus_bases, swig_FileStatus_base_names };

static int _wrap_FileSystem_absolute(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::absolute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::absolute",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::absolute",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_absolute",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->absolute((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_canonical(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::canonical",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::canonical",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::canonical",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_canonical",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->canonical((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_weakly_canonical(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::weakly_canonical",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::weakly_canonical",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::weakly_canonical",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_weakly_canonical",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->weakly_canonical((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_relative(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::relative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::relative",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::relative",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_relative",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->relative((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_proximate(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::proximate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::proximate",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::proximate",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_proximate",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->proximate((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::copy",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::copy",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::copy",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_copy",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->copy((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_copy_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::copy_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::copy_file",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::copy_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::copy_file",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_copy_file",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->copy_file((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_copy_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::copy_symlink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::copy_symlink",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::copy_symlink",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::copy_symlink",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_copy_symlink",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->copy_symlink((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_create_directory(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::create_directory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::create_directory",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::create_directory",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_create_directory",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->create_directory((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_create_directories(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::create_directories",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::create_directories",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::create_directories",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_create_directories",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->create_directories((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_create_hard_link(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::create_hard_link",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::create_hard_link",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::create_hard_link",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::create_hard_link",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_create_hard_link",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->create_hard_link((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_create_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::create_symlink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::create_symlink",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::create_symlink",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::create_symlink",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_create_symlink",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->create_symlink((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_create_directory_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::create_directory_symlink",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::create_directory_symlink",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::create_directory_symlink",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::create_directory_symlink",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_create_directory_symlink",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->create_directory_symlink((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_current_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::current_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::current_path",1,"Std::FileSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_current_path",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  result = (arg1)->current_path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_exists(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::exists",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::exists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_exists",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->exists((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_equivalent(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::equivalent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::equivalent",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::equivalent",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::equivalent",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_equivalent",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->equivalent((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_file_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  uintmax_t result;
  
  SWIG_check_num_args("Std::FileSystem::file_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::file_size",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::file_size",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_file_size",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (uintmax_t)(arg1)->file_size((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_hard_link_count(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  uintmax_t result;
  
  SWIG_check_num_args("Std::FileSystem::hard_link_count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::hard_link_count",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::hard_link_count",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_hard_link_count",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (uintmax_t)(arg1)->hard_link_count((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_read_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::read_symlink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::read_symlink",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::read_symlink",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_read_symlink",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->read_symlink((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_remove(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::remove",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::remove",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_remove",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->remove((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_remove_all(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  uintmax_t result;
  
  SWIG_check_num_args("Std::FileSystem::remove_all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::remove_all",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::remove_all",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_remove_all",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (uintmax_t)(arg1)->remove_all((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_rename(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("Std::FileSystem::rename",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::rename",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::rename",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::FileSystem::rename",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_rename",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->rename((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_resize_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  uintmax_t arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::FileSystem::resize_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::resize_file",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::resize_file",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::FileSystem::resize_file",3,"uintmax_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_resize_file",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (uintmax_t)lua_tonumber(L, 3);
  (arg1)->resize_file((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_temp_directory_path(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::FileSystem::temp_directory_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::temp_directory_path",1,"Std::FileSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_temp_directory_path",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  result = (arg1)->temp_directory_path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_block_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_block_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_block_file",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_block_file",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_block_file",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_block_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_character_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_character_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_character_file",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_character_file",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_character_file",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_character_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_directory(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_directory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_directory",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_directory",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_directory",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_directory((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_empty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_empty",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_empty",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_empty",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_empty((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_fifo(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_fifo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_fifo",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_fifo",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_fifo",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_fifo((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_other(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_other",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_other",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_other",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_other",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_other((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_regular_file(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_regular_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_regular_file",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_regular_file",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_regular_file",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_regular_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_socket(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_socket",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_socket",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_socket",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_socket",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_socket((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_is_symlink(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::FileSystem::is_symlink",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::is_symlink",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::is_symlink",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_is_symlink",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->is_symlink((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_dir(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string temp2 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("Std::FileSystem::dir",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::dir",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::dir",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::FileSystem::dir",3,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_dir",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("FileSystem_dir",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (std::vector< std::string > *) &(arg1)->dir((std::string const &)*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileSystem_rdir(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *arg1 = (Std::FileSystem *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::string temp2 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("Std::FileSystem::rdir",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::FileSystem::rdir",1,"Std::FileSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::FileSystem::rdir",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::FileSystem::rdir",3,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__FileSystem,0))){
    SWIG_fail_ptr("FileSystem_rdir",1,SWIGTYPE_p_Std__FileSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("FileSystem_rdir",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (std::vector< std::string > *) &(arg1)->rdir((std::string const &)*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileSystem(lua_State* L) {
  int SWIG_arg = 0;
  Std::FileSystem *result = 0 ;
  
  SWIG_check_num_args("Std::FileSystem::FileSystem",0,0)
  result = (Std::FileSystem *)new Std::FileSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__FileSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileSystem(void *obj) {
Std::FileSystem *arg1 = (Std::FileSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileSystem_methods[]= {
    { "absolute", _wrap_FileSystem_absolute},
    { "canonical", _wrap_FileSystem_canonical},
    { "weakly_canonical", _wrap_FileSystem_weakly_canonical},
    { "relative", _wrap_FileSystem_relative},
    { "proximate", _wrap_FileSystem_proximate},
    { "copy", _wrap_FileSystem_copy},
    { "copy_file", _wrap_FileSystem_copy_file},
    { "copy_symlink", _wrap_FileSystem_copy_symlink},
    { "create_directory", _wrap_FileSystem_create_directory},
    { "create_directories", _wrap_FileSystem_create_directories},
    { "create_hard_link", _wrap_FileSystem_create_hard_link},
    { "create_symlink", _wrap_FileSystem_create_symlink},
    { "create_directory_symlink", _wrap_FileSystem_create_directory_symlink},
    { "current_path", _wrap_FileSystem_current_path},
    { "exists", _wrap_FileSystem_exists},
    { "equivalent", _wrap_FileSystem_equivalent},
    { "file_size", _wrap_FileSystem_file_size},
    { "hard_link_count", _wrap_FileSystem_hard_link_count},
    { "read_symlink", _wrap_FileSystem_read_symlink},
    { "remove", _wrap_FileSystem_remove},
    { "remove_all", _wrap_FileSystem_remove_all},
    { "rename", _wrap_FileSystem_rename},
    { "resize_file", _wrap_FileSystem_resize_file},
    { "temp_directory_path", _wrap_FileSystem_temp_directory_path},
    { "is_block_file", _wrap_FileSystem_is_block_file},
    { "is_character_file", _wrap_FileSystem_is_character_file},
    { "is_directory", _wrap_FileSystem_is_directory},
    { "is_empty", _wrap_FileSystem_is_empty},
    { "is_fifo", _wrap_FileSystem_is_fifo},
    { "is_other", _wrap_FileSystem_is_other},
    { "is_regular_file", _wrap_FileSystem_is_regular_file},
    { "is_socket", _wrap_FileSystem_is_socket},
    { "is_symlink", _wrap_FileSystem_is_symlink},
    { "dir", _wrap_FileSystem_dir},
    { "rdir", _wrap_FileSystem_rdir},
    {0,0}
};
static swig_lua_method swig_FileSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileSystem_Sf_SwigStatic = {
    "FileSystem",
    swig_FileSystem_Sf_SwigStatic_methods,
    swig_FileSystem_Sf_SwigStatic_attributes,
    swig_FileSystem_Sf_SwigStatic_constants,
    swig_FileSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileSystem_bases[] = {0};
static const char *swig_FileSystem_base_names[] = {0};
static swig_lua_class _wrap_class_FileSystem = { "FileSystem", "FileSystem", &SWIGTYPE_p_Std__FileSystem,_proxy__wrap_new_FileSystem, swig_delete_FileSystem, swig_FileSystem_methods, swig_FileSystem_attributes, &swig_FileSystem_Sf_SwigStatic, swig_FileSystem_meta, swig_FileSystem_bases, swig_FileSystem_base_names };

static int _wrap_strerror(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string result;
  
  SWIG_check_num_args("Std::strerror",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::strerror",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = Std::strerror(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_strerrno(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::strerrno",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::strerrno",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)Std::strerrno(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_basename(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("Std::basename",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::basename",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Std::basename((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dirname(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("Std::dirname",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::dirname",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Std::dirname((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realpath(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string temp1 ;
  bool result;
  
  SWIG_check_num_args("Std::realpath",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::realpath",1,"std::string const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::realpath",2,"std::string *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("realpath",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)Std::realpath((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_join__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("Std::join",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::join",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::join",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = Std::join((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_join__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string result;
  
  SWIG_check_num_args("Std::join",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::join",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::join",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::join",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = Std::join((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_join__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("Std::join",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::join",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::join",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::join",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Std::join",4,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = Std::join((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_join__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string result;
  
  SWIG_check_num_args("Std::join",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Std::join",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::join",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Std::join",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Std::join",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Std::join",5,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  result = Std::join((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_join(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_join__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_join__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_join__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_join__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'join'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::join(std::string const &,std::string const &)\n"
    "    Std::join(std::string const &,std::string const &,std::string const &)\n"
    "    Std::join(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    Std::join(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_time(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t result;
  
  SWIG_check_num_args("Std::time",0,0)
  result = (uint64_t)Std::time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_monotonic_time(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t result;
  
  SWIG_check_num_args("Std::monotonic_time",0,0)
  result = (uint64_t)Std::monotonic_time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wallclock_time(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t result;
  
  SWIG_check_num_args("Std::wallclock_time",0,0)
  result = (uint64_t)Std::wallclock_time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sleep(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  
  SWIG_check_num_args("Std::sleep",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::sleep",1,"uint64_t");
  arg1 = (uint64_t)lua_tonumber(L, 1);
  Std::sleep(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *result = 0 ;
  
  SWIG_check_num_args("Std::fd::fd",0,0)
  result = (Std::fd *)new Std::fd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__fd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Std::fd *result = 0 ;
  
  SWIG_check_num_args("Std::fd::fd",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::fd::fd",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Std::fd *)new Std::fd(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__fd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fd__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::fd::fd()\n"
    "    Std::fd::fd(int)\n");
  lua_error(L);return 0;
}


static int _wrap_fd_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::fd::get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::get",1,"Std::fd const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_get",1,SWIGTYPE_p_Std__fd);
  }
  
  result = (int)((Std::fd const *)arg1)->get();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_close(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  
  SWIG_check_num_args("Std::fd::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::close",1,"Std::fd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_close",1,SWIGTYPE_p_Std__fd);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_read(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::fd::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::read",1,"Std::fd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::fd::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::fd::read",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_read",1,SWIGTYPE_p_Std__fd);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"fd_read");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->read(arg2,arg3);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_xread(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::fd::xread",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::xread",1,"Std::fd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::fd::xread",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::fd::xread",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_xread",1,SWIGTYPE_p_Std__fd);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"fd_xread");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->xread(arg2,arg3);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_write(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::fd::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::write",1,"Std::fd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::fd::write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::fd::write",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_write",1,SWIGTYPE_p_Std__fd);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"fd_write");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->write((void const *)arg2,arg3);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_xwrite(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::fd::xwrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::xwrite",1,"Std::fd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::fd::xwrite",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::fd::xwrite",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_xwrite",1,SWIGTYPE_p_Std__fd);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"fd_xwrite");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->xwrite((void const *)arg2,arg3);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_set_nonblocking(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::fd::set_nonblocking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::set_nonblocking",1,"Std::fd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_set_nonblocking",1,SWIGTYPE_p_Std__fd);
  }
  
  result = (bool)(arg1)->set_nonblocking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fd_swap(lua_State* L) {
  int SWIG_arg = 0;
  Std::fd *arg1 = (Std::fd *) 0 ;
  Std::fd *arg2 = (Std::fd *) 0 ;
  
  SWIG_check_num_args("Std::fd::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::fd::swap",1,"Std::fd *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::fd::swap",2,"Std::fd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_swap",1,SWIGTYPE_p_Std__fd);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__fd,0))){
    SWIG_fail_ptr("fd_swap",2,SWIGTYPE_p_Std__fd);
  }
  
  (arg1)->swap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fd(void *obj) {
Std::fd *arg1 = (Std::fd *) obj;
delete arg1;
}
static int _proxy__wrap_new_fd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fd_methods[]= {
    { "get", _wrap_fd_get},
    { "close", _wrap_fd_close},
    { "read", _wrap_fd_read},
    { "xread", _wrap_fd_xread},
    { "write", _wrap_fd_write},
    { "xwrite", _wrap_fd_xwrite},
    { "set_nonblocking", _wrap_fd_set_nonblocking},
    { "swap", _wrap_fd_swap},
    {0,0}
};
static swig_lua_method swig_fd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fd_Sf_SwigStatic = {
    "fd",
    swig_fd_Sf_SwigStatic_methods,
    swig_fd_Sf_SwigStatic_attributes,
    swig_fd_Sf_SwigStatic_constants,
    swig_fd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fd_bases[] = {0};
static const char *swig_fd_base_names[] = {0};
static swig_lua_class _wrap_class_fd = { "fd", "fd", &SWIGTYPE_p_Std__fd,_proxy__wrap_new_fd, swig_delete_fd, swig_fd_methods, swig_fd_attributes, &swig_fd_Sf_SwigStatic, swig_fd_meta, swig_fd_bases, swig_fd_base_names };

static int _wrap_new_mmap(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  off_t arg6 ;
  off_t *argp6 ;
  Std::mmap *result = 0 ;
  
  SWIG_check_num_args("Std::mmap::mmap",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::mmap",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::mmap::mmap",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::mmap::mmap",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::mmap::mmap",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Std::mmap::mmap",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Std::mmap::mmap",6,"off_t");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_mmap");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_off_t,0))){
    SWIG_fail_ptr("new_mmap",6,SWIGTYPE_p_off_t);
  }
  arg6 = *argp6;
  
  result = (Std::mmap *)new Std::mmap(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__mmap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmap_base(lua_State* L) {
  int SWIG_arg = 0;
  Std::mmap *arg1 = (Std::mmap *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Std::mmap::base",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::base",1,"Std::mmap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mmap,0))){
    SWIG_fail_ptr("mmap_base",1,SWIGTYPE_p_Std__mmap);
  }
  
  result = (void *)((Std::mmap const *)arg1)->base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmap_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::mmap *arg1 = (Std::mmap *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::mmap::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::size",1,"Std::mmap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mmap,0))){
    SWIG_fail_ptr("mmap_size",1,SWIGTYPE_p_Std__mmap);
  }
  
  result = ((Std::mmap const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmap_valid(lua_State* L) {
  int SWIG_arg = 0;
  Std::mmap *arg1 = (Std::mmap *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::mmap::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::valid",1,"Std::mmap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mmap,0))){
    SWIG_fail_ptr("mmap_valid",1,SWIGTYPE_p_Std__mmap);
  }
  
  result = (bool)((Std::mmap const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmap_error(lua_State* L) {
  int SWIG_arg = 0;
  Std::mmap *arg1 = (Std::mmap *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::mmap::error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::error",1,"Std::mmap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mmap,0))){
    SWIG_fail_ptr("mmap_error",1,SWIGTYPE_p_Std__mmap);
  }
  
  result = (int)((Std::mmap const *)arg1)->error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mmap_close(lua_State* L) {
  int SWIG_arg = 0;
  Std::mmap *arg1 = (Std::mmap *) 0 ;
  
  SWIG_check_num_args("Std::mmap::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mmap::close",1,"Std::mmap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mmap,0))){
    SWIG_fail_ptr("mmap_close",1,SWIGTYPE_p_Std__mmap);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_mmap(void *obj) {
Std::mmap *arg1 = (Std::mmap *) obj;
delete arg1;
}
static int _proxy__wrap_new_mmap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mmap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mmap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mmap_methods[]= {
    { "base", _wrap_mmap_base},
    { "size", _wrap_mmap_size},
    { "valid", _wrap_mmap_valid},
    { "error", _wrap_mmap_error},
    { "close", _wrap_mmap_close},
    {0,0}
};
static swig_lua_method swig_mmap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mmap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mmap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mmap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mmap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mmap_SwigStatic = {
    "mmap",
    swig_mmap_SwigStatic_methods,
    swig_mmap_SwigStatic_attributes,
    swig_mmap_SwigStatic_constants,
    swig_mmap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mmap_bases[] = {0};
static const char *swig_mmap_base_names[] = {0};
static swig_lua_class _wrap_class_mmap = { "mmap", "mmap", &SWIGTYPE_p_Std__mmap,_proxy__wrap_new_mmap, swig_delete_mmap, swig_mmap_methods, swig_mmap_attributes, &swig_mmap_SwigStatic, swig_mmap_meta, swig_mmap_bases, swig_mmap_base_names };

static int _wrap_new_mutex(lua_State* L) {
  int SWIG_arg = 0;
  Std::mutex *result = 0 ;
  
  SWIG_check_num_args("Std::mutex::mutex",0,0)
  result = (Std::mutex *)new Std::mutex();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__mutex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mutex_lock(lua_State* L) {
  int SWIG_arg = 0;
  Std::mutex *arg1 = (Std::mutex *) 0 ;
  
  SWIG_check_num_args("Std::mutex::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mutex::lock",1,"Std::mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mutex,0))){
    SWIG_fail_ptr("mutex_lock",1,SWIGTYPE_p_Std__mutex);
  }
  
  (arg1)->lock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mutex_unlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::mutex *arg1 = (Std::mutex *) 0 ;
  
  SWIG_check_num_args("Std::mutex::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::mutex::unlock",1,"Std::mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mutex,0))){
    SWIG_fail_ptr("mutex_unlock",1,SWIGTYPE_p_Std__mutex);
  }
  
  (arg1)->unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_mutex(void *obj) {
Std::mutex *arg1 = (Std::mutex *) obj;
delete arg1;
}
static int _proxy__wrap_new_mutex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mutex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mutex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mutex_methods[]= {
    { "lock", _wrap_mutex_lock},
    { "unlock", _wrap_mutex_unlock},
    {0,0}
};
static swig_lua_method swig_mutex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mutex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mutex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mutex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mutex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mutex_Sf_SwigStatic = {
    "mutex",
    swig_mutex_Sf_SwigStatic_methods,
    swig_mutex_Sf_SwigStatic_attributes,
    swig_mutex_Sf_SwigStatic_constants,
    swig_mutex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mutex_bases[] = {0};
static const char *swig_mutex_base_names[] = {0};
static swig_lua_class _wrap_class_mutex = { "mutex", "mutex", &SWIGTYPE_p_Std__mutex,_proxy__wrap_new_mutex, swig_delete_mutex, swig_mutex_methods, swig_mutex_attributes, &swig_mutex_Sf_SwigStatic, swig_mutex_meta, swig_mutex_bases, swig_mutex_base_names };

static int _wrap_new_hold(lua_State* L) {
  int SWIG_arg = 0;
  Std::mutex *arg1 = (Std::mutex *) 0 ;
  Std::hold *result = 0 ;
  
  SWIG_check_num_args("Std::hold::hold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hold::hold",1,"Std::mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mutex,0))){
    SWIG_fail_ptr("new_hold",1,SWIGTYPE_p_Std__mutex);
  }
  
  result = (Std::hold *)new Std::hold(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__hold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hold_release(lua_State* L) {
  int SWIG_arg = 0;
  Std::hold *arg1 = (Std::hold *) 0 ;
  
  SWIG_check_num_args("Std::hold::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hold::release",1,"Std::hold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hold,0))){
    SWIG_fail_ptr("hold_release",1,SWIGTYPE_p_Std__hold);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_hold(void *obj) {
Std::hold *arg1 = (Std::hold *) obj;
delete arg1;
}
static int _proxy__wrap_new_hold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_hold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_hold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_hold_methods[]= {
    { "release", _wrap_hold_release},
    {0,0}
};
static swig_lua_method swig_hold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_hold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_hold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_hold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_hold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_hold_Sf_SwigStatic = {
    "hold",
    swig_hold_Sf_SwigStatic_methods,
    swig_hold_Sf_SwigStatic_attributes,
    swig_hold_Sf_SwigStatic_constants,
    swig_hold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_hold_bases[] = {0};
static const char *swig_hold_base_names[] = {0};
static swig_lua_class _wrap_class_hold = { "hold", "hold", &SWIGTYPE_p_Std__hold,_proxy__wrap_new_hold, swig_delete_hold, swig_hold_methods, swig_hold_attributes, &swig_hold_Sf_SwigStatic, swig_hold_meta, swig_hold_bases, swig_hold_base_names };

static int _wrap_new_rwlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *result = 0 ;
  
  SWIG_check_num_args("Std::rwlock::rwlock",0,0)
  result = (Std::rwlock *)new Std::rwlock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__rwlock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rwlock_rdlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *arg1 = (Std::rwlock *) 0 ;
  
  SWIG_check_num_args("Std::rwlock::rdlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::rwlock::rdlock",1,"Std::rwlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rwlock,0))){
    SWIG_fail_ptr("rwlock_rdlock",1,SWIGTYPE_p_Std__rwlock);
  }
  
  (arg1)->rdlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rwlock_wrlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *arg1 = (Std::rwlock *) 0 ;
  
  SWIG_check_num_args("Std::rwlock::wrlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::rwlock::wrlock",1,"Std::rwlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rwlock,0))){
    SWIG_fail_ptr("rwlock_wrlock",1,SWIGTYPE_p_Std__rwlock);
  }
  
  (arg1)->wrlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rwlock_unlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *arg1 = (Std::rwlock *) 0 ;
  
  SWIG_check_num_args("Std::rwlock::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::rwlock::unlock",1,"Std::rwlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rwlock,0))){
    SWIG_fail_ptr("rwlock_unlock",1,SWIGTYPE_p_Std__rwlock);
  }
  
  (arg1)->unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rwlock(void *obj) {
Std::rwlock *arg1 = (Std::rwlock *) obj;
delete arg1;
}
static int _proxy__wrap_new_rwlock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rwlock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rwlock_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rwlock_methods[]= {
    { "rdlock", _wrap_rwlock_rdlock},
    { "wrlock", _wrap_rwlock_wrlock},
    { "unlock", _wrap_rwlock_unlock},
    {0,0}
};
static swig_lua_method swig_rwlock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rwlock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rwlock_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rwlock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rwlock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rwlock_Sf_SwigStatic = {
    "rwlock",
    swig_rwlock_Sf_SwigStatic_methods,
    swig_rwlock_Sf_SwigStatic_attributes,
    swig_rwlock_Sf_SwigStatic_constants,
    swig_rwlock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rwlock_bases[] = {0};
static const char *swig_rwlock_base_names[] = {0};
static swig_lua_class _wrap_class_rwlock = { "rwlock", "rwlock", &SWIGTYPE_p_Std__rwlock,_proxy__wrap_new_rwlock, swig_delete_rwlock, swig_rwlock_methods, swig_rwlock_attributes, &swig_rwlock_Sf_SwigStatic, swig_rwlock_meta, swig_rwlock_bases, swig_rwlock_base_names };

static int _wrap_new_rdhold(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *arg1 = (Std::rwlock *) 0 ;
  Std::rdhold *result = 0 ;
  
  SWIG_check_num_args("Std::rdhold::rdhold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::rdhold::rdhold",1,"Std::rwlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rwlock,0))){
    SWIG_fail_ptr("new_rdhold",1,SWIGTYPE_p_Std__rwlock);
  }
  
  result = (Std::rdhold *)new Std::rdhold(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__rdhold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rdhold_release(lua_State* L) {
  int SWIG_arg = 0;
  Std::rdhold *arg1 = (Std::rdhold *) 0 ;
  
  SWIG_check_num_args("Std::rdhold::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::rdhold::release",1,"Std::rdhold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rdhold,0))){
    SWIG_fail_ptr("rdhold_release",1,SWIGTYPE_p_Std__rdhold);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rdhold(void *obj) {
Std::rdhold *arg1 = (Std::rdhold *) obj;
delete arg1;
}
static int _proxy__wrap_new_rdhold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rdhold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rdhold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rdhold_methods[]= {
    { "release", _wrap_rdhold_release},
    {0,0}
};
static swig_lua_method swig_rdhold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rdhold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rdhold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rdhold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rdhold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rdhold_Sf_SwigStatic = {
    "rdhold",
    swig_rdhold_Sf_SwigStatic_methods,
    swig_rdhold_Sf_SwigStatic_attributes,
    swig_rdhold_Sf_SwigStatic_constants,
    swig_rdhold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rdhold_bases[] = {0};
static const char *swig_rdhold_base_names[] = {0};
static swig_lua_class _wrap_class_rdhold = { "rdhold", "rdhold", &SWIGTYPE_p_Std__rdhold,_proxy__wrap_new_rdhold, swig_delete_rdhold, swig_rdhold_methods, swig_rdhold_attributes, &swig_rdhold_Sf_SwigStatic, swig_rdhold_meta, swig_rdhold_bases, swig_rdhold_base_names };

static int _wrap_new_wrhold(lua_State* L) {
  int SWIG_arg = 0;
  Std::rwlock *arg1 = (Std::rwlock *) 0 ;
  Std::wrhold *result = 0 ;
  
  SWIG_check_num_args("Std::wrhold::wrhold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::wrhold::wrhold",1,"Std::rwlock *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__rwlock,0))){
    SWIG_fail_ptr("new_wrhold",1,SWIGTYPE_p_Std__rwlock);
  }
  
  result = (Std::wrhold *)new Std::wrhold(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__wrhold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wrhold_release(lua_State* L) {
  int SWIG_arg = 0;
  Std::wrhold *arg1 = (Std::wrhold *) 0 ;
  
  SWIG_check_num_args("Std::wrhold::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::wrhold::release",1,"Std::wrhold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__wrhold,0))){
    SWIG_fail_ptr("wrhold_release",1,SWIGTYPE_p_Std__wrhold);
  }
  
  (arg1)->release();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_wrhold(void *obj) {
Std::wrhold *arg1 = (Std::wrhold *) obj;
delete arg1;
}
static int _proxy__wrap_new_wrhold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_wrhold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_wrhold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_wrhold_methods[]= {
    { "release", _wrap_wrhold_release},
    {0,0}
};
static swig_lua_method swig_wrhold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_wrhold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_wrhold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_wrhold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_wrhold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_wrhold_Sf_SwigStatic = {
    "wrhold",
    swig_wrhold_Sf_SwigStatic_methods,
    swig_wrhold_Sf_SwigStatic_attributes,
    swig_wrhold_Sf_SwigStatic_constants,
    swig_wrhold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_wrhold_bases[] = {0};
static const char *swig_wrhold_base_names[] = {0};
static swig_lua_class _wrap_class_wrhold = { "wrhold", "wrhold", &SWIGTYPE_p_Std__wrhold,_proxy__wrap_new_wrhold, swig_delete_wrhold, swig_wrhold_methods, swig_wrhold_attributes, &swig_wrhold_Sf_SwigStatic, swig_wrhold_meta, swig_wrhold_bases, swig_wrhold_base_names };

static int _wrap_new_cond(lua_State* L) {
  int SWIG_arg = 0;
  Std::mutex *arg1 = (Std::mutex *) 0 ;
  Std::cond *result = 0 ;
  
  SWIG_check_num_args("Std::cond::cond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::cond",1,"Std::mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__mutex,0))){
    SWIG_fail_ptr("new_cond",1,SWIGTYPE_p_Std__mutex);
  }
  
  result = (Std::cond *)new Std::cond(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__cond,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cond_lock(lua_State* L) {
  int SWIG_arg = 0;
  Std::cond *arg1 = (Std::cond *) 0 ;
  
  SWIG_check_num_args("Std::cond::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::lock",1,"Std::cond *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__cond,0))){
    SWIG_fail_ptr("cond_lock",1,SWIGTYPE_p_Std__cond);
  }
  
  (arg1)->lock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cond_unlock(lua_State* L) {
  int SWIG_arg = 0;
  Std::cond *arg1 = (Std::cond *) 0 ;
  
  SWIG_check_num_args("Std::cond::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::unlock",1,"Std::cond *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__cond,0))){
    SWIG_fail_ptr("cond_unlock",1,SWIGTYPE_p_Std__cond);
  }
  
  (arg1)->unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cond_wait(lua_State* L) {
  int SWIG_arg = 0;
  Std::cond *arg1 = (Std::cond *) 0 ;
  
  SWIG_check_num_args("Std::cond::wait",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::wait",1,"Std::cond *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__cond,0))){
    SWIG_fail_ptr("cond_wait",1,SWIGTYPE_p_Std__cond);
  }
  
  (arg1)->wait();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cond_signal(lua_State* L) {
  int SWIG_arg = 0;
  Std::cond *arg1 = (Std::cond *) 0 ;
  
  SWIG_check_num_args("Std::cond::signal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::signal",1,"Std::cond *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__cond,0))){
    SWIG_fail_ptr("cond_signal",1,SWIGTYPE_p_Std__cond);
  }
  
  (arg1)->signal();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cond_broadcast(lua_State* L) {
  int SWIG_arg = 0;
  Std::cond *arg1 = (Std::cond *) 0 ;
  
  SWIG_check_num_args("Std::cond::broadcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::cond::broadcast",1,"Std::cond *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__cond,0))){
    SWIG_fail_ptr("cond_broadcast",1,SWIGTYPE_p_Std__cond);
  }
  
  (arg1)->broadcast();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cond(void *obj) {
Std::cond *arg1 = (Std::cond *) obj;
delete arg1;
}
static int _proxy__wrap_new_cond(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cond);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cond_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cond_methods[]= {
    { "lock", _wrap_cond_lock},
    { "unlock", _wrap_cond_unlock},
    { "wait", _wrap_cond_wait},
    { "signal", _wrap_cond_signal},
    { "broadcast", _wrap_cond_broadcast},
    {0,0}
};
static swig_lua_method swig_cond_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_cond_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cond_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cond_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cond_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cond_Sf_SwigStatic = {
    "cond",
    swig_cond_Sf_SwigStatic_methods,
    swig_cond_Sf_SwigStatic_attributes,
    swig_cond_Sf_SwigStatic_constants,
    swig_cond_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cond_bases[] = {0};
static const char *swig_cond_base_names[] = {0};
static swig_lua_class _wrap_class_cond = { "cond", "cond", &SWIGTYPE_p_Std__cond,_proxy__wrap_new_cond, swig_delete_cond, swig_cond_methods, swig_cond_attributes, &swig_cond_Sf_SwigStatic, swig_cond_meta, swig_cond_bases, swig_cond_base_names };

static int _wrap_new_barrier(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  Std::barrier *result = 0 ;
  
  SWIG_check_num_args("Std::barrier::barrier",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::barrier::barrier",1,"uint64_t");
  arg1 = (uint64_t)lua_tonumber(L, 1);
  result = (Std::barrier *)new Std::barrier(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__barrier,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_barrier_wait(lua_State* L) {
  int SWIG_arg = 0;
  Std::barrier *arg1 = (Std::barrier *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::barrier::wait",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::barrier::wait",1,"Std::barrier *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__barrier,0))){
    SWIG_fail_ptr("barrier_wait",1,SWIGTYPE_p_Std__barrier);
  }
  
  result = (bool)(arg1)->wait();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_barrier(void *obj) {
Std::barrier *arg1 = (Std::barrier *) obj;
delete arg1;
}
static int _proxy__wrap_new_barrier(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_barrier);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_barrier_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_barrier_methods[]= {
    { "wait", _wrap_barrier_wait},
    {0,0}
};
static swig_lua_method swig_barrier_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_barrier_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_barrier_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_barrier_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_barrier_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_barrier_Sf_SwigStatic = {
    "barrier",
    swig_barrier_Sf_SwigStatic_methods,
    swig_barrier_Sf_SwigStatic_attributes,
    swig_barrier_Sf_SwigStatic_constants,
    swig_barrier_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_barrier_bases[] = {0};
static const char *swig_barrier_base_names[] = {0};
static swig_lua_class _wrap_class_barrier = { "barrier", "barrier", &SWIGTYPE_p_Std__barrier,_proxy__wrap_new_barrier, swig_delete_barrier, swig_barrier_methods, swig_barrier_attributes, &swig_barrier_Sf_SwigStatic, swig_barrier_meta, swig_barrier_bases, swig_barrier_base_names };

static int _wrap_new_thread(lua_State* L) {
  int SWIG_arg = 0;
  Std::function arg1 ;
  Std::function *argp1 ;
  Std::thread *result = 0 ;
  
  SWIG_check_num_args("Std::thread::thread",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::thread::thread",1,"Std::function");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__functionT_void_fvoidF_t,0))){
    SWIG_fail_ptr("new_thread",1,SWIGTYPE_p_std__functionT_void_fvoidF_t);
  }
  arg1 = *argp1;
  
  result = (Std::thread *)new Std::thread(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__thread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_thread_start(lua_State* L) {
  int SWIG_arg = 0;
  Std::thread *arg1 = (Std::thread *) 0 ;
  
  SWIG_check_num_args("Std::thread::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::thread::start",1,"Std::thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__thread,0))){
    SWIG_fail_ptr("thread_start",1,SWIGTYPE_p_Std__thread);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_thread_join(lua_State* L) {
  int SWIG_arg = 0;
  Std::thread *arg1 = (Std::thread *) 0 ;
  
  SWIG_check_num_args("Std::thread::join",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::thread::join",1,"Std::thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__thread,0))){
    SWIG_fail_ptr("thread_join",1,SWIGTYPE_p_Std__thread);
  }
  
  (arg1)->join();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_thread(void *obj) {
Std::thread *arg1 = (Std::thread *) obj;
delete arg1;
}
static int _proxy__wrap_new_thread(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_thread);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_thread_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_thread_methods[]= {
    { "start", _wrap_thread_start},
    { "join", _wrap_thread_join},
    {0,0}
};
static swig_lua_method swig_thread_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_thread_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_thread_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_thread_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_thread_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_thread_Sf_SwigStatic = {
    "thread",
    swig_thread_Sf_SwigStatic_methods,
    swig_thread_Sf_SwigStatic_attributes,
    swig_thread_Sf_SwigStatic_constants,
    swig_thread_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_thread_bases[] = {0};
static const char *swig_thread_base_names[] = {0};
static swig_lua_class _wrap_class_thread = { "thread", "thread", &SWIGTYPE_p_Std__thread,_proxy__wrap_new_thread, swig_delete_thread, swig_thread_methods, swig_thread_attributes, &swig_thread_Sf_SwigStatic, swig_thread_meta, swig_thread_bases, swig_thread_base_names };

static int _wrap_ipaddr_ANY(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr result;
  
  SWIG_check_num_args("Std::ipaddr::ANY",0,0)
  result = Std::ipaddr::ANY();
  {
    Std::ipaddr * resultptr = new Std::ipaddr((const Std::ipaddr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_hash(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = 0 ;
  uint64_t result;
  
  SWIG_check_num_args("Std::ipaddr::hash",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::ipaddr::hash",1,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_hash",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (uint64_t)Std::ipaddr::hash((Std::ipaddr const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::ipaddr",0,0)
  result = (Std::ipaddr *)new Std::ipaddr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  in_addr *arg1 = 0 ;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::ipaddr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::ipaddr::ipaddr",1,"in_addr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_in_addr,0))){
    SWIG_fail_ptr("new_ipaddr",1,SWIGTYPE_p_in_addr);
  }
  
  result = (Std::ipaddr *)new Std::ipaddr((in_addr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  in_addr_t *arg1 = 0 ;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::ipaddr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::ipaddr::ipaddr",1,"in_addr_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_in_addr_t,0))){
    SWIG_fail_ptr("new_ipaddr",1,SWIGTYPE_p_in_addr_t);
  }
  
  result = (Std::ipaddr *)new Std::ipaddr((in_addr_t const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  in6_addr *arg1 = 0 ;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::ipaddr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::ipaddr::ipaddr",1,"in6_addr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_in6_addr,0))){
    SWIG_fail_ptr("new_ipaddr",1,SWIGTYPE_p_in6_addr);
  }
  
  result = (Std::ipaddr *)new Std::ipaddr((in6_addr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = 0 ;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::ipaddr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::ipaddr::ipaddr",1,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("new_ipaddr",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (Std::ipaddr *)new Std::ipaddr((Std::ipaddr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ipaddr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ipaddr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_in_addr, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ipaddr__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_in_addr_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ipaddr__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_in6_addr, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ipaddr__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ipaddr__SWIG_4(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ipaddr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::ipaddr::ipaddr()\n"
    "    Std::ipaddr::ipaddr(in_addr const &)\n"
    "    Std::ipaddr::ipaddr(in_addr_t const &)\n"
    "    Std::ipaddr::ipaddr(in6_addr const &)\n"
    "    Std::ipaddr::ipaddr(Std::ipaddr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ipaddr_family(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::ipaddr::family",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::family",1,"Std::ipaddr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_family",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (int)((Std::ipaddr const *)arg1)->family();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_pack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  sockaddr *arg2 = (sockaddr *) 0 ;
  socklen_t *arg3 = (socklen_t *) 0 ;
  in_port_t arg4 ;
  in_port_t *argp4 ;
  
  SWIG_check_num_args("Std::ipaddr::pack",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::pack",1,"Std::ipaddr const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::ipaddr::pack",2,"sockaddr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Std::ipaddr::pack",3,"socklen_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::ipaddr::pack",4,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_pack",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr,0))){
    SWIG_fail_ptr("ipaddr_pack",2,SWIGTYPE_p_sockaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_socklen_t,0))){
    SWIG_fail_ptr("ipaddr_pack",3,SWIGTYPE_p_socklen_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("ipaddr_pack",4,SWIGTYPE_p_in_port_t);
  }
  arg4 = *argp4;
  
  ((Std::ipaddr const *)arg1)->pack(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_pack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  sockaddr_in *arg2 = (sockaddr_in *) 0 ;
  in_port_t arg3 ;
  in_port_t *argp3 ;
  
  SWIG_check_num_args("Std::ipaddr::pack",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::pack",1,"Std::ipaddr const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::ipaddr::pack",2,"sockaddr_in *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::ipaddr::pack",3,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_pack",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr_in,0))){
    SWIG_fail_ptr("ipaddr_pack",2,SWIGTYPE_p_sockaddr_in);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("ipaddr_pack",3,SWIGTYPE_p_in_port_t);
  }
  arg3 = *argp3;
  
  ((Std::ipaddr const *)arg1)->pack(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_pack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  sockaddr_in6 *arg2 = (sockaddr_in6 *) 0 ;
  in_port_t arg3 ;
  in_port_t *argp3 ;
  
  SWIG_check_num_args("Std::ipaddr::pack",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::pack",1,"Std::ipaddr const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::ipaddr::pack",2,"sockaddr_in6 *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::ipaddr::pack",3,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_pack",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr_in6,0))){
    SWIG_fail_ptr("ipaddr_pack",2,SWIGTYPE_p_sockaddr_in6);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("ipaddr_pack",3,SWIGTYPE_p_in_port_t);
  }
  arg3 = *argp3;
  
  ((Std::ipaddr const *)arg1)->pack(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_pack(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr_in, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ipaddr_pack__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr_in6, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ipaddr_pack__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_socklen_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ipaddr_pack__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ipaddr_pack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::ipaddr::pack(sockaddr *,socklen_t *,in_port_t) const\n"
    "    Std::ipaddr::pack(sockaddr_in *,in_port_t) const\n"
    "    Std::ipaddr::pack(sockaddr_in6 *,in_port_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_ipaddr_v4addr(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  in_addr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::v4addr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::v4addr",1,"Std::ipaddr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_v4addr",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (in_addr *) &((Std::ipaddr const *)arg1)->v4addr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_in_addr,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_v6addr(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  in6_addr *result = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::v6addr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::v6addr",1,"Std::ipaddr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_v6addr",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (in6_addr *) &((Std::ipaddr const *)arg1)->v6addr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_in6_addr,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_compare(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("Std::ipaddr::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::compare",1,"Std::ipaddr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::compare",2,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_compare",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_compare",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (int)((Std::ipaddr const *)arg1)->compare((Std::ipaddr const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::ipaddr::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::set",1,"Std::ipaddr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::ipaddr::set",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_set",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->set((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("Std::ipaddr::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::set",1,"Std::ipaddr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::ipaddr::set",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_set",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->set((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  in_addr *arg2 = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::set",1,"Std::ipaddr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::set",2,"in_addr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_set",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_in_addr,0))){
    SWIG_fail_ptr("ipaddr_set",2,SWIGTYPE_p_in_addr);
  }
  
  (arg1)->set((in_addr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  in6_addr *arg2 = 0 ;
  
  SWIG_check_num_args("Std::ipaddr::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::set",1,"Std::ipaddr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::set",2,"in6_addr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_set",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_in6_addr,0))){
    SWIG_fail_ptr("ipaddr_set",2,SWIGTYPE_p_in6_addr);
  }
  
  (arg1)->set((in6_addr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_set(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_in_addr, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ipaddr_set__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_in6_addr, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ipaddr_set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ipaddr_set__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ipaddr_set__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ipaddr_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::ipaddr::set(char const *)\n"
    "    Std::ipaddr::set(std::string const &)\n"
    "    Std::ipaddr::set(in_addr const &)\n"
    "    Std::ipaddr::set(in6_addr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ipaddr___lt(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::ipaddr::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::operator <",1,"Std::ipaddr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::operator <",2,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___lt",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___lt",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (bool)((Std::ipaddr const *)arg1)->operator <((Std::ipaddr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr___le(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::ipaddr::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::operator <=",1,"Std::ipaddr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::operator <=",2,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___le",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___le",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (bool)((Std::ipaddr const *)arg1)->operator <=((Std::ipaddr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::ipaddr::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::operator ==",1,"Std::ipaddr const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::ipaddr::operator ==",2,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___eq",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr___eq",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (bool)((Std::ipaddr const *)arg1)->operator ==((Std::ipaddr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_m_family_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Std::ipaddr::m_family",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::m_family",1,"Std::ipaddr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::ipaddr::m_family",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_m_family_set",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->m_family = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipaddr_m_family_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = (Std::ipaddr *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::ipaddr::m_family",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::ipaddr::m_family",1,"Std::ipaddr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("ipaddr_m_family_get",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (int) ((arg1)->m_family);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ipaddr(void *obj) {
Std::ipaddr *arg1 = (Std::ipaddr *) obj;
delete arg1;
}
static int _proxy__wrap_new_ipaddr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ipaddr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ipaddr_attributes[] = {
    { "m_family", _wrap_ipaddr_m_family_get, _wrap_ipaddr_m_family_set },
    {0,0,0}
};
static swig_lua_method swig_ipaddr_methods[]= {
    { "family", _wrap_ipaddr_family},
    { "pack", _wrap_ipaddr_pack},
    { "v4addr", _wrap_ipaddr_v4addr},
    { "v6addr", _wrap_ipaddr_v6addr},
    { "compare", _wrap_ipaddr_compare},
    { "set", _wrap_ipaddr_set},
    { "__lt", _wrap_ipaddr___lt},
    { "__le", _wrap_ipaddr___le},
    { "__eq", _wrap_ipaddr___eq},
    {0,0}
};
static swig_lua_method swig_ipaddr_meta[] = {
    { "__lt", _wrap_ipaddr___lt},
    { "__le", _wrap_ipaddr___le},
    { "__eq", _wrap_ipaddr___eq},
    {0,0}
};

static swig_lua_attribute swig_ipaddr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ipaddr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ipaddr_Sf_SwigStatic_methods[]= {
    { "ANY", _wrap_ipaddr_ANY},
    { "hash", _wrap_ipaddr_hash},
    {0,0}
};
static swig_lua_class* swig_ipaddr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ipaddr_Sf_SwigStatic = {
    "ipaddr",
    swig_ipaddr_Sf_SwigStatic_methods,
    swig_ipaddr_Sf_SwigStatic_attributes,
    swig_ipaddr_Sf_SwigStatic_constants,
    swig_ipaddr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ipaddr_bases[] = {0};
static const char *swig_ipaddr_base_names[] = {0};
static swig_lua_class _wrap_class_ipaddr = { "ipaddr", "ipaddr", &SWIGTYPE_p_Std__ipaddr,_proxy__wrap_new_ipaddr, swig_delete_ipaddr, swig_ipaddr_methods, swig_ipaddr_attributes, &swig_ipaddr_Sf_SwigStatic, swig_ipaddr_meta, swig_ipaddr_bases, swig_ipaddr_base_names };

static int _wrap_location_hash(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = 0 ;
  uint64_t result;
  
  SWIG_check_num_args("Std::location::hash",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::location::hash",1,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_hash",1,SWIGTYPE_p_Std__location);
  }
  
  result = (uint64_t)Std::location::hash((Std::location const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",0,0)
  result = (Std::location *)new Std::location();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = 0 ;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::location::location",1,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("new_location",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (Std::location *)new Std::location((Std::ipaddr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::ipaddr *arg1 = 0 ;
  in_port_t arg2 ;
  in_port_t *argp2 ;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::location::location",1,"Std::ipaddr const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::location::location",2,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("new_location",1,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("new_location",2,SWIGTYPE_p_in_port_t);
  }
  arg2 = *argp2;
  
  result = (Std::location *)new Std::location((Std::ipaddr const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  sockaddr_in *arg1 = (sockaddr_in *) 0 ;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::location",1,"sockaddr_in const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sockaddr_in,0))){
    SWIG_fail_ptr("new_location",1,SWIGTYPE_p_sockaddr_in);
  }
  
  result = (Std::location *)new Std::location((sockaddr_in const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  sockaddr_in6 *arg1 = (sockaddr_in6 *) 0 ;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::location",1,"sockaddr_in6 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sockaddr_in6,0))){
    SWIG_fail_ptr("new_location",1,SWIGTYPE_p_sockaddr_in6);
  }
  
  result = (Std::location *)new Std::location((sockaddr_in6 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = 0 ;
  Std::location *result = 0 ;
  
  SWIG_check_num_args("Std::location::location",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::location::location",1,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("new_location",1,SWIGTYPE_p_Std__location);
  }
  
  result = (Std::location *)new Std::location((Std::location const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__location,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_location(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_location__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_location__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sockaddr_in, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_location__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sockaddr_in6, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_location__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_location__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_location__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_location'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::location::location()\n"
    "    Std::location::location(Std::ipaddr const &)\n"
    "    Std::location::location(Std::ipaddr const &,in_port_t)\n"
    "    Std::location::location(sockaddr_in const *)\n"
    "    Std::location::location(sockaddr_in6 const *)\n"
    "    Std::location::location(Std::location const &)\n");
  lua_error(L);return 0;
}


static int _wrap_location_pack(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  sockaddr *arg2 = (sockaddr *) 0 ;
  socklen_t *arg3 = (socklen_t *) 0 ;
  
  SWIG_check_num_args("Std::location::pack",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::pack",1,"Std::location const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::location::pack",2,"sockaddr *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Std::location::pack",3,"socklen_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_pack",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr,0))){
    SWIG_fail_ptr("location_pack",2,SWIGTYPE_p_sockaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_socklen_t,0))){
    SWIG_fail_ptr("location_pack",3,SWIGTYPE_p_socklen_t);
  }
  
  ((Std::location const *)arg1)->pack(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::location::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::set",1,"Std::location *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::location::set",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_set",1,SWIGTYPE_p_Std__location);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->set((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  char *arg2 = (char *) 0 ;
  in_port_t arg3 ;
  in_port_t *argp3 ;
  bool result;
  
  SWIG_check_num_args("Std::location::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::set",1,"Std::location *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::location::set",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::location::set",3,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_set",1,SWIGTYPE_p_Std__location);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("location_set",3,SWIGTYPE_p_in_port_t);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->set((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  sockaddr *arg2 = (sockaddr *) 0 ;
  socklen_t arg3 ;
  socklen_t *argp3 ;
  bool result;
  
  SWIG_check_num_args("Std::location::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::set",1,"Std::location *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::location::set",2,"sockaddr const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::location::set",3,"socklen_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_set",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr,0))){
    SWIG_fail_ptr("location_set",2,SWIGTYPE_p_sockaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_socklen_t,0))){
    SWIG_fail_ptr("location_set",3,SWIGTYPE_p_socklen_t);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->set((sockaddr const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  sockaddr_in *arg2 = (sockaddr_in *) 0 ;
  
  SWIG_check_num_args("Std::location::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::set",1,"Std::location *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::location::set",2,"sockaddr_in const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_set",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr_in,0))){
    SWIG_fail_ptr("location_set",2,SWIGTYPE_p_sockaddr_in);
  }
  
  (arg1)->set((sockaddr_in const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  sockaddr_in6 *arg2 = (sockaddr_in6 *) 0 ;
  
  SWIG_check_num_args("Std::location::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::set",1,"Std::location *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::location::set",2,"sockaddr_in6 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_set",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sockaddr_in6,0))){
    SWIG_fail_ptr("location_set",2,SWIGTYPE_p_sockaddr_in6);
  }
  
  (arg1)->set((sockaddr_in6 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr_in, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_location_set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr_in6, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_location_set__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_location_set__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sockaddr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_socklen_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_location_set__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_location_set__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'location_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::location::set(char const *)\n"
    "    Std::location::set(char const *,in_port_t)\n"
    "    Std::location::set(sockaddr const *,socklen_t)\n"
    "    Std::location::set(sockaddr_in const *)\n"
    "    Std::location::set(sockaddr_in6 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_location___lt(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  Std::location *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::location::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::operator <",1,"Std::location const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::location::operator <",2,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___lt",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___lt",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)((Std::location const *)arg1)->operator <((Std::location const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location___le(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  Std::location *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::location::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::operator <=",1,"Std::location const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::location::operator <=",2,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___le",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___le",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)((Std::location const *)arg1)->operator <=((Std::location const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  Std::location *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::location::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::operator ==",1,"Std::location const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::location::operator ==",2,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___eq",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location___eq",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)((Std::location const *)arg1)->operator ==((Std::location const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_address_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  Std::ipaddr *arg2 = (Std::ipaddr *) 0 ;
  
  SWIG_check_num_args("Std::location::address",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::address",1,"Std::location *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::location::address",2,"Std::ipaddr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_address_set",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("location_address_set",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  if (arg1) (arg1)->address = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_address_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  Std::ipaddr *result = 0 ;
  
  SWIG_check_num_args("Std::location::address",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::address",1,"Std::location *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_address_get",1,SWIGTYPE_p_Std__location);
  }
  
  result = (Std::ipaddr *)& ((arg1)->address);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__ipaddr,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_port_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  in_port_t arg2 ;
  in_port_t *argp2 ;
  
  SWIG_check_num_args("Std::location::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::port",1,"Std::location *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::location::port",2,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_port_set",1,SWIGTYPE_p_Std__location);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("location_port_set",2,SWIGTYPE_p_in_port_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_location_port_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = (Std::location *) 0 ;
  in_port_t result;
  
  SWIG_check_num_args("Std::location::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::location::port",1,"Std::location *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("location_port_get",1,SWIGTYPE_p_Std__location);
  }
  
  result =  ((arg1)->port);
  {
    in_port_t * resultptr = new in_port_t((const in_port_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_in_port_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_location(void *obj) {
Std::location *arg1 = (Std::location *) obj;
delete arg1;
}
static int _proxy__wrap_new_location(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_location);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_location_attributes[] = {
    { "address", _wrap_location_address_get, _wrap_location_address_set },
    { "port", _wrap_location_port_get, _wrap_location_port_set },
    {0,0,0}
};
static swig_lua_method swig_location_methods[]= {
    { "pack", _wrap_location_pack},
    { "set", _wrap_location_set},
    { "__lt", _wrap_location___lt},
    { "__le", _wrap_location___le},
    { "__eq", _wrap_location___eq},
    {0,0}
};
static swig_lua_method swig_location_meta[] = {
    { "__lt", _wrap_location___lt},
    { "__le", _wrap_location___le},
    { "__eq", _wrap_location___eq},
    {0,0}
};

static swig_lua_attribute swig_location_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_location_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_location_Sf_SwigStatic_methods[]= {
    { "hash", _wrap_location_hash},
    {0,0}
};
static swig_lua_class* swig_location_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_location_Sf_SwigStatic = {
    "location",
    swig_location_Sf_SwigStatic_methods,
    swig_location_Sf_SwigStatic_attributes,
    swig_location_Sf_SwigStatic_constants,
    swig_location_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_location_bases[] = {0};
static const char *swig_location_base_names[] = {0};
static swig_lua_class _wrap_class_location = { "location", "location", &SWIGTYPE_p_Std__location,_proxy__wrap_new_location, swig_delete_location, swig_location_methods, swig_location_attributes, &swig_location_Sf_SwigStatic, swig_location_meta, swig_location_bases, swig_location_base_names };

static int _wrap_new_hostname__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *result = 0 ;
  
  SWIG_check_num_args("Std::hostname::hostname",0,0)
  result = (Std::hostname *)new Std::hostname();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__hostname,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_hostname__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  in_port_t arg2 ;
  in_port_t *argp2 ;
  Std::hostname *result = 0 ;
  
  SWIG_check_num_args("Std::hostname::hostname",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::hostname::hostname",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::hostname::hostname",2,"in_port_t");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("new_hostname",2,SWIGTYPE_p_in_port_t);
  }
  arg2 = *argp2;
  
  result = (Std::hostname *)new Std::hostname((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__hostname,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_hostname__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::location *arg1 = 0 ;
  Std::hostname *result = 0 ;
  
  SWIG_check_num_args("Std::hostname::hostname",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::hostname::hostname",1,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("new_hostname",1,SWIGTYPE_p_Std__location);
  }
  
  result = (Std::hostname *)new Std::hostname((Std::location const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__hostname,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_hostname__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = 0 ;
  Std::hostname *result = 0 ;
  
  SWIG_check_num_args("Std::hostname::hostname",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::hostname::hostname",1,"Std::hostname const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("new_hostname",1,SWIGTYPE_p_Std__hostname);
  }
  
  result = (Std::hostname *)new Std::hostname((Std::hostname const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__hostname,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_hostname(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_hostname__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__location, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_hostname__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__hostname, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_hostname__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_hostname__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_hostname'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::hostname::hostname()\n"
    "    Std::hostname::hostname(char const *,in_port_t)\n"
    "    Std::hostname::hostname(Std::location const &)\n"
    "    Std::hostname::hostname(Std::hostname const &)\n");
  lua_error(L);return 0;
}


static int _wrap_hostname_connect(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Std::socket *arg5 = (Std::socket *) 0 ;
  Std::location result;
  
  SWIG_check_num_args("Std::hostname::connect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::connect",1,"Std::hostname const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::hostname::connect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::hostname::connect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::hostname::connect",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Std::hostname::connect",5,"Std::socket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_connect",1,SWIGTYPE_p_Std__hostname);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("hostname_connect",5,SWIGTYPE_p_Std__socket);
  }
  
  result = ((Std::hostname const *)arg1)->connect(arg2,arg3,arg4,arg5);
  {
    Std::location * resultptr = new Std::location((const Std::location &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__location,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname_lookup(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  int arg2 ;
  int arg3 ;
  Std::location result;
  
  SWIG_check_num_args("Std::hostname::lookup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::lookup",1,"Std::hostname const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::hostname::lookup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::hostname::lookup",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_lookup",1,SWIGTYPE_p_Std__hostname);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((Std::hostname const *)arg1)->lookup(arg2,arg3);
  {
    Std::location * resultptr = new Std::location((const Std::location &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__location,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname___lt(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  Std::hostname *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::hostname::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::operator <",1,"Std::hostname const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::hostname::operator <",2,"Std::hostname const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___lt",1,SWIGTYPE_p_Std__hostname);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___lt",2,SWIGTYPE_p_Std__hostname);
  }
  
  result = (bool)((Std::hostname const *)arg1)->operator <((Std::hostname const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname___le(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  Std::hostname *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::hostname::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::operator <=",1,"Std::hostname const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::hostname::operator <=",2,"Std::hostname const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___le",1,SWIGTYPE_p_Std__hostname);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___le",2,SWIGTYPE_p_Std__hostname);
  }
  
  result = (bool)((Std::hostname const *)arg1)->operator <=((Std::hostname const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  Std::hostname *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::hostname::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::operator ==",1,"Std::hostname const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::hostname::operator ==",2,"Std::hostname const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___eq",1,SWIGTYPE_p_Std__hostname);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname___eq",2,SWIGTYPE_p_Std__hostname);
  }
  
  result = (bool)((Std::hostname const *)arg1)->operator ==((Std::hostname const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname_address_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::hostname::address",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::address",1,"Std::hostname *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::hostname::address",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_address_set",1,SWIGTYPE_p_Std__hostname);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->address = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname_address_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Std::hostname::address",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::address",1,"Std::hostname *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_address_get",1,SWIGTYPE_p_Std__hostname);
  }
  
  result = (std::string *) & ((arg1)->address);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname_port_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  in_port_t arg2 ;
  in_port_t *argp2 ;
  
  SWIG_check_num_args("Std::hostname::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::port",1,"Std::hostname *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::hostname::port",2,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_port_set",1,SWIGTYPE_p_Std__hostname);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("hostname_port_set",2,SWIGTYPE_p_in_port_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hostname_port_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::hostname *arg1 = (Std::hostname *) 0 ;
  in_port_t result;
  
  SWIG_check_num_args("Std::hostname::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::hostname::port",1,"Std::hostname *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__hostname,0))){
    SWIG_fail_ptr("hostname_port_get",1,SWIGTYPE_p_Std__hostname);
  }
  
  result =  ((arg1)->port);
  {
    in_port_t * resultptr = new in_port_t((const in_port_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_in_port_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_hostname(void *obj) {
Std::hostname *arg1 = (Std::hostname *) obj;
delete arg1;
}
static int _proxy__wrap_new_hostname(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_hostname);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_hostname_attributes[] = {
    { "address", _wrap_hostname_address_get, _wrap_hostname_address_set },
    { "port", _wrap_hostname_port_get, _wrap_hostname_port_set },
    {0,0,0}
};
static swig_lua_method swig_hostname_methods[]= {
    { "connect", _wrap_hostname_connect},
    { "lookup", _wrap_hostname_lookup},
    { "__lt", _wrap_hostname___lt},
    { "__le", _wrap_hostname___le},
    { "__eq", _wrap_hostname___eq},
    {0,0}
};
static swig_lua_method swig_hostname_meta[] = {
    { "__lt", _wrap_hostname___lt},
    { "__le", _wrap_hostname___le},
    { "__eq", _wrap_hostname___eq},
    {0,0}
};

static swig_lua_attribute swig_hostname_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_hostname_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_hostname_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_hostname_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_hostname_Sf_SwigStatic = {
    "hostname",
    swig_hostname_Sf_SwigStatic_methods,
    swig_hostname_Sf_SwigStatic_attributes,
    swig_hostname_Sf_SwigStatic_constants,
    swig_hostname_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_hostname_bases[] = {0};
static const char *swig_hostname_base_names[] = {0};
static swig_lua_class _wrap_class_hostname = { "hostname", "hostname", &SWIGTYPE_p_Std__hostname,_proxy__wrap_new_hostname, swig_delete_hostname, swig_hostname_methods, swig_hostname_attributes, &swig_hostname_Sf_SwigStatic, swig_hostname_meta, swig_hostname_bases, swig_hostname_base_names };

static int _wrap_new_socket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *result = 0 ;
  
  SWIG_check_num_args("Std::socket::socket",0,0)
  result = (Std::socket *)new Std::socket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__socket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_socket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Std::socket *result = 0 ;
  
  SWIG_check_num_args("Std::socket::socket",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::socket::socket",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Std::socket *)new Std::socket(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__socket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_socket(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_socket__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_socket__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_socket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::socket::socket()\n"
    "    Std::socket::socket(int)\n");
  lua_error(L);return 0;
}


static int _wrap_socket_reset(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::reset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::reset",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::reset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::reset",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::socket::reset",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_reset",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)(arg1)->reset(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_bind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  in_port_t arg3 ;
  in_port_t *argp3 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::bind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::bind",1,"Std::socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::socket::bind",2,"Std::ipaddr const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::socket::bind",3,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_bind",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("socket_bind",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("socket_bind",3,SWIGTYPE_p_in_port_t);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->bind((Std::ipaddr const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_bind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::bind",1,"Std::socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::socket::bind",2,"Std::ipaddr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_bind",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("socket_bind",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  result = (bool)(arg1)->bind((Std::ipaddr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_bind__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::location *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::bind",1,"Std::socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::socket::bind",2,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_bind",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("socket_bind",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)(arg1)->bind((Std::location const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_bind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_socket_bind__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__location, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_socket_bind__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_socket_bind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'socket_bind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::socket::bind(Std::ipaddr const &,in_port_t)\n"
    "    Std::socket::bind(Std::ipaddr const &)\n"
    "    Std::socket::bind(Std::location const &)\n");
  lua_error(L);return 0;
}


static int _wrap_socket_connect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::ipaddr *arg2 = 0 ;
  in_port_t arg3 ;
  in_port_t *argp3 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::connect",1,"Std::socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::socket::connect",2,"Std::ipaddr const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::socket::connect",3,"in_port_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_connect",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__ipaddr,0))){
    SWIG_fail_ptr("socket_connect",2,SWIGTYPE_p_Std__ipaddr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_in_port_t,0))){
    SWIG_fail_ptr("socket_connect",3,SWIGTYPE_p_in_port_t);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->connect((Std::ipaddr const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_connect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::location *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::connect",1,"Std::socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::socket::connect",2,"Std::location const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_connect",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("socket_connect",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)(arg1)->connect((Std::location const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_connect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__location, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_socket_connect__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Std__ipaddr, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_in_port_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_socket_connect__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'socket_connect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::socket::connect(Std::ipaddr const &,in_port_t)\n"
    "    Std::socket::connect(Std::location const &)\n");
  lua_error(L);return 0;
}


static int _wrap_socket_listen(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::listen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::listen",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::listen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_listen",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->listen(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_accept(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::socket *arg2 = (Std::socket *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::accept",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::accept",2,"Std::socket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_accept",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_accept",2,SWIGTYPE_p_Std__socket);
  }
  
  result = (bool)(arg1)->accept(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_shutdown(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::shutdown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::shutdown",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::shutdown",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_shutdown",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->shutdown(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_getpeername(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::location *arg2 = (Std::location *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::getpeername",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::getpeername",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::getpeername",2,"Std::location *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_getpeername",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("socket_getpeername",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)(arg1)->getpeername(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_getsockname(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  Std::location *arg2 = (Std::location *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::getsockname",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::getsockname",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::getsockname",2,"Std::location *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_getsockname",1,SWIGTYPE_p_Std__socket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__location,0))){
    SWIG_fail_ptr("socket_getsockname",2,SWIGTYPE_p_Std__location);
  }
  
  result = (bool)(arg1)->getsockname(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_set_sockopt(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  socklen_t arg5 ;
  socklen_t *argp5 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::set_sockopt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::set_sockopt",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::set_sockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::set_sockopt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Std::socket::set_sockopt",4,"void const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Std::socket::set_sockopt",5,"socklen_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_set_sockopt",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"socket_set_sockopt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_socklen_t,0))){
    SWIG_fail_ptr("socket_set_sockopt",5,SWIGTYPE_p_socklen_t);
  }
  arg5 = *argp5;
  
  result = (bool)(arg1)->set_sockopt(arg2,arg3,(void const *)arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_set_reuseaddr(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::set_reuseaddr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::set_reuseaddr",1,"Std::socket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_set_reuseaddr",1,SWIGTYPE_p_Std__socket);
  }
  
  result = (bool)(arg1)->set_reuseaddr();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_set_tcp_nodelay(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::set_tcp_nodelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::set_tcp_nodelay",1,"Std::socket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_set_tcp_nodelay",1,SWIGTYPE_p_Std__socket);
  }
  
  result = (bool)(arg1)->set_tcp_nodelay();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_sndbuf(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::sndbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::sndbuf",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::sndbuf",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_sndbuf",1,SWIGTYPE_p_Std__socket);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->sndbuf(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_rcvbuf(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::rcvbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::rcvbuf",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::rcvbuf",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_rcvbuf",1,SWIGTYPE_p_Std__socket);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->rcvbuf(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_sndlowat(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::sndlowat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::sndlowat",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::sndlowat",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_sndlowat",1,SWIGTYPE_p_Std__socket);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->sndlowat(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_rcvlowat(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::socket::rcvlowat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::rcvlowat",1,"Std::socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::socket::rcvlowat",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_rcvlowat",1,SWIGTYPE_p_Std__socket);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->rcvlowat(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_recv(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int arg4 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::socket::recv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::recv",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::recv",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::recv",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::socket::recv",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_recv",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"socket_recv");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->recv(arg2,arg3,arg4);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_xrecv(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int arg4 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::socket::xrecv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::xrecv",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::xrecv",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::xrecv",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::socket::xrecv",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_xrecv",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"socket_xrecv");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->xrecv(arg2,arg3,arg4);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_send(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int arg4 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::socket::send",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::send",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::send",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::send",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::socket::send",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_send",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"socket_send");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->send((void const *)arg2,arg3,arg4);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_socket_xsend(lua_State* L) {
  int SWIG_arg = 0;
  Std::socket *arg1 = (Std::socket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int arg4 ;
  ssize_t result;
  
  SWIG_check_num_args("Std::socket::xsend",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::socket::xsend",1,"Std::socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::socket::xsend",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::socket::xsend",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::socket::xsend",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__socket,0))){
    SWIG_fail_ptr("socket_xsend",1,SWIGTYPE_p_Std__socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"socket_xsend");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->xsend((void const *)arg2,arg3,arg4);
  {
    ssize_t * resultptr = new ssize_t((const ssize_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ssize_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_socket(void *obj) {
Std::socket *arg1 = (Std::socket *) obj;
delete arg1;
}
static int _proxy__wrap_new_socket(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_socket);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_socket_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_socket_methods[]= {
    { "reset", _wrap_socket_reset},
    { "bind", _wrap_socket_bind},
    { "connect", _wrap_socket_connect},
    { "listen", _wrap_socket_listen},
    { "accept", _wrap_socket_accept},
    { "shutdown", _wrap_socket_shutdown},
    { "getpeername", _wrap_socket_getpeername},
    { "getsockname", _wrap_socket_getsockname},
    { "set_sockopt", _wrap_socket_set_sockopt},
    { "set_reuseaddr", _wrap_socket_set_reuseaddr},
    { "set_tcp_nodelay", _wrap_socket_set_tcp_nodelay},
    { "sndbuf", _wrap_socket_sndbuf},
    { "rcvbuf", _wrap_socket_rcvbuf},
    { "sndlowat", _wrap_socket_sndlowat},
    { "rcvlowat", _wrap_socket_rcvlowat},
    { "recv", _wrap_socket_recv},
    { "xrecv", _wrap_socket_xrecv},
    { "send", _wrap_socket_send},
    { "xsend", _wrap_socket_xsend},
    {0,0}
};
static swig_lua_method swig_socket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_socket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_socket_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_socket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_socket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_socket_Sf_SwigStatic = {
    "socket",
    swig_socket_Sf_SwigStatic_methods,
    swig_socket_Sf_SwigStatic_attributes,
    swig_socket_Sf_SwigStatic_constants,
    swig_socket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_socket_bases[] = {0,0};
static const char *swig_socket_base_names[] = {"Std::fd *",0};
static swig_lua_class _wrap_class_socket = { "socket", "socket", &SWIGTYPE_p_Std__socket,_proxy__wrap_new_socket, swig_delete_socket, swig_socket_methods, swig_socket_attributes, &swig_socket_Sf_SwigStatic, swig_socket_meta, swig_socket_bases, swig_socket_base_names };

static int _wrap_GNUPlot_gc_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  gnuplot_ctrl *arg2 = (gnuplot_ctrl *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::gc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::gc",1,"Std::GNUPlot *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::GNUPlot::gc",2,"gnuplot_ctrl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_gc_set",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gnuplot_ctrl,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GNUPlot_gc_set",2,SWIGTYPE_p_gnuplot_ctrl);
  }
  
  if (arg1) (arg1)->gc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_gc_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  gnuplot_ctrl *result = 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::gc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::gc",1,"Std::GNUPlot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_gc_get",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  result = (gnuplot_ctrl *) ((arg1)->gc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gnuplot_ctrl,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GNUPlot(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *result = 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::GNUPlot",0,0)
  result = (Std::GNUPlot *)new Std::GNUPlot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__GNUPlot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_setstyle(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::setstyle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::setstyle",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::setstyle",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_setstyle",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setstyle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_set_xlabel(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::set_xlabel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::set_xlabel",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::set_xlabel",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_set_xlabel",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->set_xlabel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_set_ylabel(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::set_ylabel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::set_ylabel",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::set_ylabel",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_set_ylabel",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->set_ylabel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_reset(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::reset",1,"Std::GNUPlot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_reset",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_plot_x(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  std::vector< double > *arg2 = 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::plot_x",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::plot_x",1,"Std::GNUPlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::GNUPlot::plot_x",2,"std::vector< double > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::GNUPlot::plot_x",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Std::GNUPlot::plot_x",4,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_plot_x",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_plot_x",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->plot_x(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_plot_xy(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  std::vector< double > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::plot_xy",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::plot_xy",1,"Std::GNUPlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::GNUPlot::plot_xy",2,"std::vector< double > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::GNUPlot::plot_xy",3,"std::vector< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::GNUPlot::plot_xy",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Std::GNUPlot::plot_xy",5,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_plot_xy",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_plot_xy",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_plot_xy",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->plot_xy(*arg2,*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_plot_once(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  std::vector< double > *arg6 = 0 ;
  std::vector< double > *arg7 = 0 ;
  int arg8 ;
  
  SWIG_check_num_args("Std::GNUPlot::plot_once",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::plot_once",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::plot_once",2,"char *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::GNUPlot::plot_once",3,"char *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Std::GNUPlot::plot_once",4,"char *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Std::GNUPlot::plot_once",5,"char *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Std::GNUPlot::plot_once",6,"std::vector< double > &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Std::GNUPlot::plot_once",7,"std::vector< double > &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Std::GNUPlot::plot_once",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_plot_once",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_plot_once",6,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_plot_once",7,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  (arg1)->plot_once(arg2,arg3,arg4,arg5,*arg6,*arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_plot_slope(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::plot_slope",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::plot_slope",1,"Std::GNUPlot *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::GNUPlot::plot_slope",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::GNUPlot::plot_slope",3,"double");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Std::GNUPlot::plot_slope",4,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_plot_slope",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->plot_slope(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_plot_equation(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::plot_equation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::plot_equation",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::plot_equation",2,"char *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::GNUPlot::plot_equation",3,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_plot_equation",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->plot_equation(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_write_x_csv(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > *arg3 = 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::write_x_csv",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::write_x_csv",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::write_x_csv",2,"char *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::GNUPlot::write_x_csv",3,"std::vector< double > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::GNUPlot::write_x_csv",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Std::GNUPlot::write_x_csv",5,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_write_x_csv",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_write_x_csv",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->write_x_csv(arg2,*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GNUPlot_write_xy_csv(lua_State* L) {
  int SWIG_arg = 0;
  Std::GNUPlot *arg1 = (Std::GNUPlot *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  SWIG_check_num_args("Std::GNUPlot::write_xy_csv",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",1,"Std::GNUPlot *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",2,"char *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",3,"std::vector< double > &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",4,"std::vector< double > &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",5,"int");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Std::GNUPlot::write_xy_csv",6,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__GNUPlot,0))){
    SWIG_fail_ptr("GNUPlot_write_xy_csv",1,SWIGTYPE_p_Std__GNUPlot);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_write_xy_csv",3,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("GNUPlot_write_xy_csv",4,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  (arg1)->write_xy_csv(arg2,*arg3,*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GNUPlot(void *obj) {
Std::GNUPlot *arg1 = (Std::GNUPlot *) obj;
delete arg1;
}
static int _proxy__wrap_new_GNUPlot(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GNUPlot);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GNUPlot_attributes[] = {
    { "gc", _wrap_GNUPlot_gc_get, _wrap_GNUPlot_gc_set },
    {0,0,0}
};
static swig_lua_method swig_GNUPlot_methods[]= {
    { "setstyle", _wrap_GNUPlot_setstyle},
    { "set_xlabel", _wrap_GNUPlot_set_xlabel},
    { "set_ylabel", _wrap_GNUPlot_set_ylabel},
    { "reset", _wrap_GNUPlot_reset},
    { "plot_x", _wrap_GNUPlot_plot_x},
    { "plot_xy", _wrap_GNUPlot_plot_xy},
    { "plot_once", _wrap_GNUPlot_plot_once},
    { "plot_slope", _wrap_GNUPlot_plot_slope},
    { "plot_equation", _wrap_GNUPlot_plot_equation},
    { "write_x_csv", _wrap_GNUPlot_write_x_csv},
    { "write_xy_csv", _wrap_GNUPlot_write_xy_csv},
    {0,0}
};
static swig_lua_method swig_GNUPlot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GNUPlot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GNUPlot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GNUPlot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GNUPlot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GNUPlot_Sf_SwigStatic = {
    "GNUPlot",
    swig_GNUPlot_Sf_SwigStatic_methods,
    swig_GNUPlot_Sf_SwigStatic_attributes,
    swig_GNUPlot_Sf_SwigStatic_constants,
    swig_GNUPlot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GNUPlot_bases[] = {0};
static const char *swig_GNUPlot_base_names[] = {0};
static swig_lua_class _wrap_class_GNUPlot = { "GNUPlot", "GNUPlot", &SWIGTYPE_p_Std__GNUPlot,_proxy__wrap_new_GNUPlot, swig_delete_GNUPlot, swig_GNUPlot_methods, swig_GNUPlot_attributes, &swig_GNUPlot_Sf_SwigStatic, swig_GNUPlot_meta, swig_GNUPlot_bases, swig_GNUPlot_base_names };

static int _wrap_RandomBase_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomBase *arg1 = (Std::RandomBase *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomBase::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomBase::generate",1,"Std::RandomBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomBase,0))){
    SWIG_fail_ptr("RandomBase_generate",1,SWIGTYPE_p_Std__RandomBase);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomBase(void *obj) {
Std::RandomBase *arg1 = (Std::RandomBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_RandomBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomBase_methods[]= {
    { "generate", _wrap_RandomBase_generate},
    {0,0}
};
static swig_lua_method swig_RandomBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomBase_Sf_SwigStatic = {
    "RandomBase",
    swig_RandomBase_Sf_SwigStatic_methods,
    swig_RandomBase_Sf_SwigStatic_attributes,
    swig_RandomBase_Sf_SwigStatic_constants,
    swig_RandomBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomBase_bases[] = {0,0};
static const char *swig_RandomBase_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_RandomBase = { "RandomBase", "RandomBase", &SWIGTYPE_p_Std__RandomBase,0, swig_delete_RandomBase, swig_RandomBase_methods, swig_RandomBase_attributes, &swig_RandomBase_Sf_SwigStatic, swig_RandomBase_meta, swig_RandomBase_bases, swig_RandomBase_base_names };

static int _wrap_RandomMinStd_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  
  SWIG_check_num_args("Std::RandomMinStd::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::seed_engine",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_seed_engine",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMinStd::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::min",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_min",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMinStd::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::max",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_max",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMinStd::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::generate",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_generate",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMinStd::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::randint",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_randint",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::rand",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_rand",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::uniform_int_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::uniform_real_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::binomial_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_binomial_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::cauchy_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_cauchy_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::chi_squared_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::discrete_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_discrete_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::exponential_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_exponential_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::fisher_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_fisher_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::gamma_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_gamma_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::geometric_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_geometric_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::lognormal_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_lognormal_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::negative_binomial_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::normal_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMinStd::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_normal_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::piecewise_constant_distribution",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMinStd::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::piecewise_linear_distribution",1,"Std::RandomMinStd *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMinStd_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *arg1 = (Std::RandomMinStd *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMinStd::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMinStd::poisson_distribution",1,"Std::RandomMinStd *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMinStd::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMinStd,0))){
    SWIG_fail_ptr("RandomMinStd_poisson_distribution",1,SWIGTYPE_p_Std__RandomMinStd);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomMinStd(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMinStd *result = 0 ;
  
  SWIG_check_num_args("Std::RandomMinStd::RandomMinStd",0,0)
  result = (Std::RandomMinStd *)new Std::RandomMinStd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomMinStd,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomMinStd(void *obj) {
Std::RandomMinStd *arg1 = (Std::RandomMinStd *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomMinStd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomMinStd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomMinStd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomMinStd_methods[]= {
    { "seed_engine", _wrap_RandomMinStd_seed_engine},
    { "min", _wrap_RandomMinStd_min},
    { "max", _wrap_RandomMinStd_max},
    { "generate", _wrap_RandomMinStd_generate},
    { "randint", _wrap_RandomMinStd_randint},
    { "rand", _wrap_RandomMinStd_rand},
    { "uniform_int_distribution", _wrap_RandomMinStd_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomMinStd_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomMinStd_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomMinStd_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomMinStd_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomMinStd_discrete_distribution},
    { "exponential_distribution", _wrap_RandomMinStd_exponential_distribution},
    { "fisher_distribution", _wrap_RandomMinStd_fisher_distribution},
    { "gamma_distribution", _wrap_RandomMinStd_gamma_distribution},
    { "geometric_distribution", _wrap_RandomMinStd_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomMinStd_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomMinStd_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomMinStd_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomMinStd_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomMinStd_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomMinStd_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomMinStd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomMinStd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomMinStd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomMinStd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomMinStd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomMinStd_Sf_SwigStatic = {
    "RandomMinStd",
    swig_RandomMinStd_Sf_SwigStatic_methods,
    swig_RandomMinStd_Sf_SwigStatic_attributes,
    swig_RandomMinStd_Sf_SwigStatic_constants,
    swig_RandomMinStd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomMinStd_bases[] = {0,0};
static const char *swig_RandomMinStd_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomMinStd = { "RandomMinStd", "RandomMinStd", &SWIGTYPE_p_Std__RandomMinStd,_proxy__wrap_new_RandomMinStd, swig_delete_RandomMinStd, swig_RandomMinStd_methods, swig_RandomMinStd_attributes, &swig_RandomMinStd_Sf_SwigStatic, swig_RandomMinStd_meta, swig_RandomMinStd_bases, swig_RandomMinStd_base_names };

static int _wrap_RandomMersenne_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  
  SWIG_check_num_args("Std::RandomMersenne::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::seed_engine",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_seed_engine",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::min",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_min",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::max",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_max",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::generate",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_generate",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::randint",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_randint",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::rand",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_rand",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::uniform_int_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::uniform_real_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::binomial_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_binomial_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::cauchy_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_cauchy_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::chi_squared_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::discrete_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_discrete_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::exponential_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_exponential_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::fisher_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_fisher_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::gamma_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_gamma_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::geometric_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_geometric_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::lognormal_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_lognormal_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::negative_binomial_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::normal_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_normal_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::piecewise_constant_distribution",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::piecewise_linear_distribution",1,"Std::RandomMersenne *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *arg1 = (Std::RandomMersenne *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne::poisson_distribution",1,"Std::RandomMersenne *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("RandomMersenne_poisson_distribution",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomMersenne(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne *result = 0 ;
  
  SWIG_check_num_args("Std::RandomMersenne::RandomMersenne",0,0)
  result = (Std::RandomMersenne *)new Std::RandomMersenne();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomMersenne,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomMersenne(void *obj) {
Std::RandomMersenne *arg1 = (Std::RandomMersenne *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomMersenne(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomMersenne);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomMersenne_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomMersenne_methods[]= {
    { "seed_engine", _wrap_RandomMersenne_seed_engine},
    { "min", _wrap_RandomMersenne_min},
    { "max", _wrap_RandomMersenne_max},
    { "generate", _wrap_RandomMersenne_generate},
    { "randint", _wrap_RandomMersenne_randint},
    { "rand", _wrap_RandomMersenne_rand},
    { "uniform_int_distribution", _wrap_RandomMersenne_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomMersenne_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomMersenne_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomMersenne_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomMersenne_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomMersenne_discrete_distribution},
    { "exponential_distribution", _wrap_RandomMersenne_exponential_distribution},
    { "fisher_distribution", _wrap_RandomMersenne_fisher_distribution},
    { "gamma_distribution", _wrap_RandomMersenne_gamma_distribution},
    { "geometric_distribution", _wrap_RandomMersenne_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomMersenne_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomMersenne_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomMersenne_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomMersenne_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomMersenne_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomMersenne_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomMersenne_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomMersenne_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomMersenne_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomMersenne_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomMersenne_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomMersenne_Sf_SwigStatic = {
    "RandomMersenne",
    swig_RandomMersenne_Sf_SwigStatic_methods,
    swig_RandomMersenne_Sf_SwigStatic_attributes,
    swig_RandomMersenne_Sf_SwigStatic_constants,
    swig_RandomMersenne_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomMersenne_bases[] = {0,0};
static const char *swig_RandomMersenne_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomMersenne = { "RandomMersenne", "RandomMersenne", &SWIGTYPE_p_Std__RandomMersenne,_proxy__wrap_new_RandomMersenne, swig_delete_RandomMersenne, swig_RandomMersenne_methods, swig_RandomMersenne_attributes, &swig_RandomMersenne_Sf_SwigStatic, swig_RandomMersenne_meta, swig_RandomMersenne_bases, swig_RandomMersenne_base_names };

static int _wrap_RandomMersenne64_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  
  SWIG_check_num_args("Std::RandomMersenne64::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::seed_engine",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_seed_engine",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomMersenne64::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::min",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_min",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomMersenne64::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::max",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_max",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::generate",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_generate",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::randint",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_randint",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::rand",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_rand",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::uniform_int_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::uniform_real_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::binomial_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_binomial_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::cauchy_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_cauchy_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::chi_squared_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::discrete_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_discrete_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::exponential_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_exponential_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::fisher_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_fisher_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::gamma_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_gamma_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::geometric_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_geometric_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::lognormal_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_lognormal_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::negative_binomial_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::normal_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomMersenne64::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_normal_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::piecewise_constant_distribution",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomMersenne64::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::piecewise_linear_distribution",1,"Std::RandomMersenne64 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomMersenne64_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomMersenne64::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomMersenne64::poisson_distribution",1,"Std::RandomMersenne64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomMersenne64::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomMersenne64,0))){
    SWIG_fail_ptr("RandomMersenne64_poisson_distribution",1,SWIGTYPE_p_Std__RandomMersenne64);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomMersenne64(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne64 *result = 0 ;
  
  SWIG_check_num_args("Std::RandomMersenne64::RandomMersenne64",0,0)
  result = (Std::RandomMersenne64 *)new Std::RandomMersenne64();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomMersenne64,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomMersenne64(void *obj) {
Std::RandomMersenne64 *arg1 = (Std::RandomMersenne64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomMersenne64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomMersenne64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomMersenne64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomMersenne64_methods[]= {
    { "seed_engine", _wrap_RandomMersenne64_seed_engine},
    { "min", _wrap_RandomMersenne64_min},
    { "max", _wrap_RandomMersenne64_max},
    { "generate", _wrap_RandomMersenne64_generate},
    { "randint", _wrap_RandomMersenne64_randint},
    { "rand", _wrap_RandomMersenne64_rand},
    { "uniform_int_distribution", _wrap_RandomMersenne64_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomMersenne64_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomMersenne64_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomMersenne64_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomMersenne64_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomMersenne64_discrete_distribution},
    { "exponential_distribution", _wrap_RandomMersenne64_exponential_distribution},
    { "fisher_distribution", _wrap_RandomMersenne64_fisher_distribution},
    { "gamma_distribution", _wrap_RandomMersenne64_gamma_distribution},
    { "geometric_distribution", _wrap_RandomMersenne64_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomMersenne64_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomMersenne64_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomMersenne64_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomMersenne64_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomMersenne64_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomMersenne64_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomMersenne64_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomMersenne64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomMersenne64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomMersenne64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomMersenne64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomMersenne64_Sf_SwigStatic = {
    "RandomMersenne64",
    swig_RandomMersenne64_Sf_SwigStatic_methods,
    swig_RandomMersenne64_Sf_SwigStatic_attributes,
    swig_RandomMersenne64_Sf_SwigStatic_constants,
    swig_RandomMersenne64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomMersenne64_bases[] = {0,0};
static const char *swig_RandomMersenne64_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomMersenne64 = { "RandomMersenne64", "RandomMersenne64", &SWIGTYPE_p_Std__RandomMersenne64,_proxy__wrap_new_RandomMersenne64, swig_delete_RandomMersenne64, swig_RandomMersenne64_methods, swig_RandomMersenne64_attributes, &swig_RandomMersenne64_Sf_SwigStatic, swig_RandomMersenne64_meta, swig_RandomMersenne64_bases, swig_RandomMersenne64_base_names };

static int _wrap_RandomRanLux24_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  
  SWIG_check_num_args("Std::RandomRanLux24::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::seed_engine",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_seed_engine",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::min",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_min",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::max",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_max",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::generate",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_generate",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::randint",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_randint",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::rand",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_rand",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::uniform_int_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::uniform_real_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::binomial_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_binomial_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::cauchy_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_cauchy_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::chi_squared_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::discrete_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_discrete_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::exponential_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_exponential_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::fisher_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_fisher_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::gamma_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_gamma_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::geometric_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_geometric_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::lognormal_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_lognormal_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::negative_binomial_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::normal_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux24::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_normal_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::piecewise_constant_distribution",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux24::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::piecewise_linear_distribution",1,"Std::RandomRanLux24 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux24_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux24::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux24::poisson_distribution",1,"Std::RandomRanLux24 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux24::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux24,0))){
    SWIG_fail_ptr("RandomRanLux24_poisson_distribution",1,SWIGTYPE_p_Std__RandomRanLux24);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomRanLux24(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux24 *result = 0 ;
  
  SWIG_check_num_args("Std::RandomRanLux24::RandomRanLux24",0,0)
  result = (Std::RandomRanLux24 *)new Std::RandomRanLux24();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomRanLux24,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomRanLux24(void *obj) {
Std::RandomRanLux24 *arg1 = (Std::RandomRanLux24 *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomRanLux24(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomRanLux24);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomRanLux24_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomRanLux24_methods[]= {
    { "seed_engine", _wrap_RandomRanLux24_seed_engine},
    { "min", _wrap_RandomRanLux24_min},
    { "max", _wrap_RandomRanLux24_max},
    { "generate", _wrap_RandomRanLux24_generate},
    { "randint", _wrap_RandomRanLux24_randint},
    { "rand", _wrap_RandomRanLux24_rand},
    { "uniform_int_distribution", _wrap_RandomRanLux24_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomRanLux24_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomRanLux24_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomRanLux24_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomRanLux24_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomRanLux24_discrete_distribution},
    { "exponential_distribution", _wrap_RandomRanLux24_exponential_distribution},
    { "fisher_distribution", _wrap_RandomRanLux24_fisher_distribution},
    { "gamma_distribution", _wrap_RandomRanLux24_gamma_distribution},
    { "geometric_distribution", _wrap_RandomRanLux24_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomRanLux24_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomRanLux24_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomRanLux24_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomRanLux24_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomRanLux24_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomRanLux24_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomRanLux24_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomRanLux24_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomRanLux24_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomRanLux24_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomRanLux24_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomRanLux24_Sf_SwigStatic = {
    "RandomRanLux24",
    swig_RandomRanLux24_Sf_SwigStatic_methods,
    swig_RandomRanLux24_Sf_SwigStatic_attributes,
    swig_RandomRanLux24_Sf_SwigStatic_constants,
    swig_RandomRanLux24_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomRanLux24_bases[] = {0,0};
static const char *swig_RandomRanLux24_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomRanLux24 = { "RandomRanLux24", "RandomRanLux24", &SWIGTYPE_p_Std__RandomRanLux24,_proxy__wrap_new_RandomRanLux24, swig_delete_RandomRanLux24, swig_RandomRanLux24_methods, swig_RandomRanLux24_attributes, &swig_RandomRanLux24_Sf_SwigStatic, swig_RandomRanLux24_meta, swig_RandomRanLux24_bases, swig_RandomRanLux24_base_names };

static int _wrap_RandomRanLux48_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  
  SWIG_check_num_args("Std::RandomRanLux48::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::seed_engine",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_seed_engine",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomRanLux48::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::min",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_min",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomRanLux48::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::max",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_max",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::generate",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_generate",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::randint",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_randint",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::rand",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_rand",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::uniform_int_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::uniform_real_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::binomial_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_binomial_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::cauchy_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_cauchy_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::chi_squared_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::discrete_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_discrete_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::exponential_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_exponential_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::fisher_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_fisher_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::gamma_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_gamma_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::geometric_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_geometric_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::lognormal_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_lognormal_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::negative_binomial_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::normal_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomRanLux48::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_normal_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::piecewise_constant_distribution",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomRanLux48::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::piecewise_linear_distribution",1,"Std::RandomRanLux48 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomRanLux48_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomRanLux48::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomRanLux48::poisson_distribution",1,"Std::RandomRanLux48 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomRanLux48::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomRanLux48,0))){
    SWIG_fail_ptr("RandomRanLux48_poisson_distribution",1,SWIGTYPE_p_Std__RandomRanLux48);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomRanLux48(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomRanLux48 *result = 0 ;
  
  SWIG_check_num_args("Std::RandomRanLux48::RandomRanLux48",0,0)
  result = (Std::RandomRanLux48 *)new Std::RandomRanLux48();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomRanLux48,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomRanLux48(void *obj) {
Std::RandomRanLux48 *arg1 = (Std::RandomRanLux48 *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomRanLux48(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomRanLux48);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomRanLux48_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomRanLux48_methods[]= {
    { "seed_engine", _wrap_RandomRanLux48_seed_engine},
    { "min", _wrap_RandomRanLux48_min},
    { "max", _wrap_RandomRanLux48_max},
    { "generate", _wrap_RandomRanLux48_generate},
    { "randint", _wrap_RandomRanLux48_randint},
    { "rand", _wrap_RandomRanLux48_rand},
    { "uniform_int_distribution", _wrap_RandomRanLux48_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomRanLux48_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomRanLux48_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomRanLux48_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomRanLux48_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomRanLux48_discrete_distribution},
    { "exponential_distribution", _wrap_RandomRanLux48_exponential_distribution},
    { "fisher_distribution", _wrap_RandomRanLux48_fisher_distribution},
    { "gamma_distribution", _wrap_RandomRanLux48_gamma_distribution},
    { "geometric_distribution", _wrap_RandomRanLux48_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomRanLux48_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomRanLux48_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomRanLux48_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomRanLux48_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomRanLux48_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomRanLux48_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomRanLux48_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomRanLux48_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomRanLux48_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomRanLux48_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomRanLux48_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomRanLux48_Sf_SwigStatic = {
    "RandomRanLux48",
    swig_RandomRanLux48_Sf_SwigStatic_methods,
    swig_RandomRanLux48_Sf_SwigStatic_attributes,
    swig_RandomRanLux48_Sf_SwigStatic_constants,
    swig_RandomRanLux48_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomRanLux48_bases[] = {0,0};
static const char *swig_RandomRanLux48_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomRanLux48 = { "RandomRanLux48", "RandomRanLux48", &SWIGTYPE_p_Std__RandomRanLux48,_proxy__wrap_new_RandomRanLux48, swig_delete_RandomRanLux48, swig_RandomRanLux48_methods, swig_RandomRanLux48_attributes, &swig_RandomRanLux48_Sf_SwigStatic, swig_RandomRanLux48_meta, swig_RandomRanLux48_bases, swig_RandomRanLux48_base_names };

static int _wrap_RandomKnuth_seed_engine(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  
  SWIG_check_num_args("Std::RandomKnuth::seed_engine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::seed_engine",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_seed_engine",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  (arg1)->seed_engine();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_min(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomKnuth::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::min",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_min",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_max(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::RandomKnuth::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::max",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_max",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_generate(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomKnuth::generate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::generate",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_generate",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (unsigned int)(arg1)->generate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_randint(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::RandomKnuth::randint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::randint",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::randint",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::randint",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_randint",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned int)(arg1)->randint(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_rand(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::rand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::rand",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_rand",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (double)(arg1)->rand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_uniform_int_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::uniform_int_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::uniform_int_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::uniform_int_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::uniform_int_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_uniform_int_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->uniform_int_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_uniform_real_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::uniform_real_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::uniform_real_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::uniform_real_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::uniform_real_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_uniform_real_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->uniform_real_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::binomial_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::binomial_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::binomial_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_binomial_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (int)(arg1)->binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_cauchy_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::cauchy_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::cauchy_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::cauchy_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::cauchy_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_cauchy_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->cauchy_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_chi_squared_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::chi_squared_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::chi_squared_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::chi_squared_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_chi_squared_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->chi_squared_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_discrete_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::discrete_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::discrete_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::discrete_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::discrete_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_discrete_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->discrete_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_exponential_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::exponential_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::exponential_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::exponential_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_exponential_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->exponential_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_fisher_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::fisher_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::fisher_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::fisher_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::fisher_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_fisher_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->fisher_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_gamma_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::gamma_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::gamma_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::gamma_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::gamma_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_gamma_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->gamma_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_geometric_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::geometric_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::geometric_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::geometric_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_geometric_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->geometric_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_lognormal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::lognormal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::lognormal_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::lognormal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::lognormal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_lognormal_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->lognormal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_negative_binomial_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::negative_binomial_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::negative_binomial_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::negative_binomial_distribution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::negative_binomial_distribution",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_negative_binomial_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->negative_binomial_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_normal_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::normal_distribution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::normal_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::normal_distribution",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::RandomKnuth::normal_distribution",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_normal_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->normal_distribution(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_piecewise_constant_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::piecewise_constant_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::piecewise_constant_distribution",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_piecewise_constant_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (double)(arg1)->piecewise_constant_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_piecewise_linear_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::RandomKnuth::piecewise_linear_distribution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::piecewise_linear_distribution",1,"Std::RandomKnuth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_piecewise_linear_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  result = (double)(arg1)->piecewise_linear_distribution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RandomKnuth_poisson_distribution(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *arg1 = (Std::RandomKnuth *) 0 ;
  double arg2 ;
  int result;
  
  SWIG_check_num_args("Std::RandomKnuth::poisson_distribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::RandomKnuth::poisson_distribution",1,"Std::RandomKnuth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::RandomKnuth::poisson_distribution",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__RandomKnuth,0))){
    SWIG_fail_ptr("RandomKnuth_poisson_distribution",1,SWIGTYPE_p_Std__RandomKnuth);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (int)(arg1)->poisson_distribution(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RandomKnuth(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomKnuth *result = 0 ;
  
  SWIG_check_num_args("Std::RandomKnuth::RandomKnuth",0,0)
  result = (Std::RandomKnuth *)new Std::RandomKnuth();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__RandomKnuth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RandomKnuth(void *obj) {
Std::RandomKnuth *arg1 = (Std::RandomKnuth *) obj;
delete arg1;
}
static int _proxy__wrap_new_RandomKnuth(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RandomKnuth);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RandomKnuth_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RandomKnuth_methods[]= {
    { "seed_engine", _wrap_RandomKnuth_seed_engine},
    { "min", _wrap_RandomKnuth_min},
    { "max", _wrap_RandomKnuth_max},
    { "generate", _wrap_RandomKnuth_generate},
    { "randint", _wrap_RandomKnuth_randint},
    { "rand", _wrap_RandomKnuth_rand},
    { "uniform_int_distribution", _wrap_RandomKnuth_uniform_int_distribution},
    { "uniform_real_distribution", _wrap_RandomKnuth_uniform_real_distribution},
    { "binomial_distribution", _wrap_RandomKnuth_binomial_distribution},
    { "cauchy_distribution", _wrap_RandomKnuth_cauchy_distribution},
    { "chi_squared_distribution", _wrap_RandomKnuth_chi_squared_distribution},
    { "discrete_distribution", _wrap_RandomKnuth_discrete_distribution},
    { "exponential_distribution", _wrap_RandomKnuth_exponential_distribution},
    { "fisher_distribution", _wrap_RandomKnuth_fisher_distribution},
    { "gamma_distribution", _wrap_RandomKnuth_gamma_distribution},
    { "geometric_distribution", _wrap_RandomKnuth_geometric_distribution},
    { "lognormal_distribution", _wrap_RandomKnuth_lognormal_distribution},
    { "negative_binomial_distribution", _wrap_RandomKnuth_negative_binomial_distribution},
    { "normal_distribution", _wrap_RandomKnuth_normal_distribution},
    { "piecewise_constant_distribution", _wrap_RandomKnuth_piecewise_constant_distribution},
    { "piecewise_linear_distribution", _wrap_RandomKnuth_piecewise_linear_distribution},
    { "poisson_distribution", _wrap_RandomKnuth_poisson_distribution},
    {0,0}
};
static swig_lua_method swig_RandomKnuth_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RandomKnuth_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RandomKnuth_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RandomKnuth_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RandomKnuth_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RandomKnuth_Sf_SwigStatic = {
    "RandomKnuth",
    swig_RandomKnuth_Sf_SwigStatic_methods,
    swig_RandomKnuth_Sf_SwigStatic_attributes,
    swig_RandomKnuth_Sf_SwigStatic_constants,
    swig_RandomKnuth_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RandomKnuth_bases[] = {0,0};
static const char *swig_RandomKnuth_base_names[] = {"Std::RandomBase *",0};
static swig_lua_class _wrap_class_RandomKnuth = { "RandomKnuth", "RandomKnuth", &SWIGTYPE_p_Std__RandomKnuth,_proxy__wrap_new_RandomKnuth, swig_delete_RandomKnuth, swig_RandomKnuth_methods, swig_RandomKnuth_attributes, &swig_RandomKnuth_Sf_SwigStatic, swig_RandomKnuth_meta, swig_RandomKnuth_bases, swig_RandomKnuth_base_names };

static int _wrap_Dir_dir_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  DIR *arg2 = (DIR *) 0 ;
  
  SWIG_check_num_args("Std::Dir::dir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::dir",1,"Std::Dir *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::Dir::dir",2,"DIR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_dir_set",1,SWIGTYPE_p_Std__Dir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DIR,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Dir_dir_set",2,SWIGTYPE_p_DIR);
  }
  
  if (arg1) (arg1)->dir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_dir_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  DIR *result = 0 ;
  
  SWIG_check_num_args("Std::Dir::dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::dir",1,"Std::Dir *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_dir_get",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (DIR *) ((arg1)->dir);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DIR,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_dent_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  dirent *arg2 = (dirent *) 0 ;
  
  SWIG_check_num_args("Std::Dir::dent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::dent",1,"Std::Dir *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::Dir::dent",2,"dirent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_dent_set",1,SWIGTYPE_p_Std__Dir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dirent,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Dir_dent_set",2,SWIGTYPE_p_dirent);
  }
  
  if (arg1) (arg1)->dent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_dent_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  dirent *result = 0 ;
  
  SWIG_check_num_args("Std::Dir::dent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::dent",1,"Std::Dir *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_dent_get",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (dirent *) ((arg1)->dent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dirent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::Dir::cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::cnt",1,"Std::Dir *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::Dir::cnt",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_cnt_set",1,SWIGTYPE_p_Std__Dir);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::Dir::cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::cnt",1,"Std::Dir *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_cnt_get",1,SWIGTYPE_p_Std__Dir);
  }
  
  result =  ((arg1)->cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Dir(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::Dir *result = 0 ;
  
  SWIG_check_num_args("Std::Dir::Dir",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::Dir::Dir",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::Dir *)new Std::Dir((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Dir,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_tell(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  long result;
  
  SWIG_check_num_args("Std::Dir::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::tell",1,"Std::Dir const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_tell",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (long)((Std::Dir const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_get_count(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  
  SWIG_check_num_args("Std::Dir::get_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::get_count",1,"Std::Dir *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_get_count",1,SWIGTYPE_p_Std__Dir);
  }
  
  (arg1)->get_count();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_count(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::Dir::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::count",1,"Std::Dir const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_count",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (int)((Std::Dir const *)arg1)->count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_entry(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::Dir::entry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::entry",1,"Std::Dir *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_entry",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (char *)(arg1)->entry();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_getcwd(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Std::Dir::getcwd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::getcwd",1,"Std::Dir const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_getcwd",1,SWIGTYPE_p_Std__Dir);
  }
  
  result = (char *)((Std::Dir const *)arg1)->getcwd();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_chdir(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::Dir::chdir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::chdir",1,"Std::Dir *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Dir::chdir",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_chdir",1,SWIGTYPE_p_Std__Dir);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->chdir((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_mkdir(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::Dir::mkdir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::mkdir",1,"Std::Dir *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Dir::mkdir",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_mkdir",1,SWIGTYPE_p_Std__Dir);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->mkdir((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_rename(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::Dir::rename",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::rename",1,"Std::Dir *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Dir::rename",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::Dir::rename",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_rename",1,SWIGTYPE_p_Std__Dir);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->rename((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dir_system(lua_State* L) {
  int SWIG_arg = 0;
  Std::Dir *arg1 = (Std::Dir *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::Dir::system",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Dir::system",1,"Std::Dir *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::Dir::system",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Dir,0))){
    SWIG_fail_ptr("Dir_system",1,SWIGTYPE_p_Std__Dir);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->system((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Dir(void *obj) {
Std::Dir *arg1 = (Std::Dir *) obj;
delete arg1;
}
static int _proxy__wrap_new_Dir(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Dir);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Dir_attributes[] = {
    { "dir", _wrap_Dir_dir_get, _wrap_Dir_dir_set },
    { "dent", _wrap_Dir_dent_get, _wrap_Dir_dent_set },
    { "cnt", _wrap_Dir_cnt_get, _wrap_Dir_cnt_set },
    {0,0,0}
};
static swig_lua_method swig_Dir_methods[]= {
    { "tell", _wrap_Dir_tell},
    { "get_count", _wrap_Dir_get_count},
    { "count", _wrap_Dir_count},
    { "entry", _wrap_Dir_entry},
    { "getcwd", _wrap_Dir_getcwd},
    { "chdir", _wrap_Dir_chdir},
    { "mkdir", _wrap_Dir_mkdir},
    { "rename", _wrap_Dir_rename},
    { "system", _wrap_Dir_system},
    {0,0}
};
static swig_lua_method swig_Dir_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Dir_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Dir_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Dir_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Dir_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Dir_Sf_SwigStatic = {
    "Dir",
    swig_Dir_Sf_SwigStatic_methods,
    swig_Dir_Sf_SwigStatic_attributes,
    swig_Dir_Sf_SwigStatic_constants,
    swig_Dir_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Dir_bases[] = {0};
static const char *swig_Dir_base_names[] = {0};
static swig_lua_class _wrap_class_Dir = { "Dir", "Dir", &SWIGTYPE_p_Std__Dir,_proxy__wrap_new_Dir, swig_delete_Dir, swig_Dir_methods, swig_Dir_attributes, &swig_Dir_Sf_SwigStatic, swig_Dir_meta, swig_Dir_bases, swig_Dir_base_names };

static int _wrap_Glob_globs_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::Glob *arg1 = (Std::Glob *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("Std::Glob::globs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Glob::globs",1,"Std::Glob *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::Glob::globs",2,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Glob,0))){
    SWIG_fail_ptr("Glob_globs_set",1,SWIGTYPE_p_Std__Glob);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("Glob_globs_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->globs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Glob_globs_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::Glob *arg1 = (Std::Glob *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("Std::Glob::globs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Glob::globs",1,"Std::Glob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Glob,0))){
    SWIG_fail_ptr("Glob_globs_get",1,SWIGTYPE_p_Std__Glob);
  }
  
  result = (std::vector< std::string > *)& ((arg1)->globs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Glob(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::Glob *result = 0 ;
  
  SWIG_check_num_args("Std::Glob::Glob",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::Glob::Glob",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::Glob *)new Std::Glob((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__Glob,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Glob_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::Glob *arg1 = (Std::Glob *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::Glob::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::Glob::size",1,"Std::Glob const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__Glob,0))){
    SWIG_fail_ptr("Glob_size",1,SWIGTYPE_p_Std__Glob);
  }
  
  result = ((Std::Glob const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Glob(void *obj) {
Std::Glob *arg1 = (Std::Glob *) obj;
delete arg1;
}
static int _proxy__wrap_new_Glob(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Glob);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Glob_attributes[] = {
    { "globs", _wrap_Glob_globs_get, _wrap_Glob_globs_set },
    {0,0,0}
};
static swig_lua_method swig_Glob_methods[]= {
    { "size", _wrap_Glob_size},
    {0,0}
};
static swig_lua_method swig_Glob_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Glob_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Glob_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Glob_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Glob_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Glob_Sf_SwigStatic = {
    "Glob",
    swig_Glob_Sf_SwigStatic_methods,
    swig_Glob_Sf_SwigStatic_attributes,
    swig_Glob_Sf_SwigStatic_constants,
    swig_Glob_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Glob_bases[] = {0};
static const char *swig_Glob_base_names[] = {0};
static swig_lua_class _wrap_class_Glob = { "Glob", "Glob", &SWIGTYPE_p_Std__Glob,_proxy__wrap_new_Glob, swig_delete_Glob, swig_Glob_methods, swig_Glob_attributes, &swig_Glob_Sf_SwigStatic, swig_Glob_meta, swig_Glob_bases, swig_Glob_base_names };

static int _wrap_new_StdFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::StdFile *result = 0 ;
  
  SWIG_check_num_args("Std::StdFile::StdFile",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::StdFile::StdFile",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdFile::StdFile",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (Std::StdFile *)new Std::StdFile((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdFile_open(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdFile *arg1 = (Std::StdFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Std::StdFile::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdFile::open",1,"Std::StdFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::StdFile::open",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Std::StdFile::open",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdFile,0))){
    SWIG_fail_ptr("StdFile_open",1,SWIGTYPE_p_Std__StdFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->open((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdFile_close(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdFile *arg1 = (Std::StdFile *) 0 ;
  
  SWIG_check_num_args("Std::StdFile::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdFile::close",1,"Std::StdFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdFile,0))){
    SWIG_fail_ptr("StdFile_close",1,SWIGTYPE_p_Std__StdFile);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdFile_seek__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdFile *arg1 = (Std::StdFile *) 0 ;
  uint64_t arg2 ;
  Std::SeekType arg3 ;
  
  SWIG_check_num_args("Std::StdFile::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdFile::seek",1,"Std::StdFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdFile::seek",2,"uint64_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdFile::seek",3,"Std::SeekType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdFile,0))){
    SWIG_fail_ptr("StdFile_seek",1,SWIGTYPE_p_Std__StdFile);
  }
  
  arg2 = (uint64_t)lua_tonumber(L, 2);
  arg3 = (Std::SeekType)(int)lua_tonumber(L, 3);
  (arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdFile_seek__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdFile *arg1 = (Std::StdFile *) 0 ;
  uint64_t arg2 ;
  
  SWIG_check_num_args("Std::StdFile::seek",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdFile::seek",1,"Std::StdFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdFile::seek",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdFile,0))){
    SWIG_fail_ptr("StdFile_seek",1,SWIGTYPE_p_Std__StdFile);
  }
  
  arg2 = (uint64_t)lua_tonumber(L, 2);
  (arg1)->seek(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StdFile_seek(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StdFile_seek__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StdFile_seek__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StdFile_seek'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdFile::seek(uint64_t,Std::SeekType)\n"
    "    Std::StdFile::seek(uint64_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_StdFile(void *obj) {
Std::StdFile *arg1 = (Std::StdFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_StdFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StdFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StdFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StdFile_methods[]= {
    { "open", _wrap_StdFile_open},
    { "close", _wrap_StdFile_close},
    { "seek", _wrap_StdFile_seek},
    {0,0}
};
static swig_lua_method swig_StdFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StdFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StdFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StdFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StdFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StdFile_Sf_SwigStatic = {
    "StdFile",
    swig_StdFile_Sf_SwigStatic_methods,
    swig_StdFile_Sf_SwigStatic_attributes,
    swig_StdFile_Sf_SwigStatic_constants,
    swig_StdFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StdFile_bases[] = {0,0};
static const char *swig_StdFile_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_StdFile = { "StdFile", "StdFile", &SWIGTYPE_p_Std__StdFile,_proxy__wrap_new_StdFile, swig_delete_StdFile, swig_StdFile_methods, swig_StdFile_attributes, &swig_StdFile_Sf_SwigStatic, swig_StdFile_meta, swig_StdFile_bases, swig_StdFile_base_names };

static int _wrap_new_BinaryFileWriter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::BinaryFileWriter *result = 0 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::BinaryFileWriter",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::BinaryFileWriter",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::BinaryFileWriter",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (Std::BinaryFileWriter *)new Std::BinaryFileWriter((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BinaryFileWriter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryFileWriter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::BinaryFileWriter *result = 0 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::BinaryFileWriter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::BinaryFileWriter",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::BinaryFileWriter *)new Std::BinaryFileWriter((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BinaryFileWriter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryFileWriter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryFileWriter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryFileWriter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BinaryFileWriter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::BinaryFileWriter::BinaryFileWriter(char const *,char const *)\n"
    "    Std::BinaryFileWriter::BinaryFileWriter(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryFileWriter_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  int8_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"int8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (int8_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  int16_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"int16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (int16_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  int32_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (int32_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  int64_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (int64_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  uint16_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint16_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  uint64_t arg2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"uint64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (uint64_t)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->write((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Std::BinaryFileWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileWriter::write",1,"Std::BinaryFileWriter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Std::BinaryFileWriter::write",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileWriter,0))){
    SWIG_fail_ptr("BinaryFileWriter_write",1,SWIGTYPE_p_Std__BinaryFileWriter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->write((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileWriter_write(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileWriter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryFileWriter_write__SWIG_9(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryFileWriter_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::BinaryFileWriter::write(int8_t)\n"
    "    Std::BinaryFileWriter::write(int16_t)\n"
    "    Std::BinaryFileWriter::write(int32_t)\n"
    "    Std::BinaryFileWriter::write(int64_t)\n"
    "    Std::BinaryFileWriter::write(uint8_t)\n"
    "    Std::BinaryFileWriter::write(uint16_t)\n"
    "    Std::BinaryFileWriter::write(uint32_t)\n"
    "    Std::BinaryFileWriter::write(uint64_t)\n"
    "    Std::BinaryFileWriter::write(char const *)\n"
    "    Std::BinaryFileWriter::write(std::string const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BinaryFileWriter(void *obj) {
Std::BinaryFileWriter *arg1 = (Std::BinaryFileWriter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BinaryFileWriter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BinaryFileWriter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BinaryFileWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BinaryFileWriter_methods[]= {
    { "write", _wrap_BinaryFileWriter_write},
    {0,0}
};
static swig_lua_method swig_BinaryFileWriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BinaryFileWriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BinaryFileWriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BinaryFileWriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BinaryFileWriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BinaryFileWriter_Sf_SwigStatic = {
    "BinaryFileWriter",
    swig_BinaryFileWriter_Sf_SwigStatic_methods,
    swig_BinaryFileWriter_Sf_SwigStatic_attributes,
    swig_BinaryFileWriter_Sf_SwigStatic_constants,
    swig_BinaryFileWriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BinaryFileWriter_bases[] = {0,0};
static const char *swig_BinaryFileWriter_base_names[] = {"Std::StdFile *",0};
static swig_lua_class _wrap_class_BinaryFileWriter = { "BinaryFileWriter", "BinaryFileWriter", &SWIGTYPE_p_Std__BinaryFileWriter,_proxy__wrap_new_BinaryFileWriter, swig_delete_BinaryFileWriter, swig_BinaryFileWriter_methods, swig_BinaryFileWriter_attributes, &swig_BinaryFileWriter_Sf_SwigStatic, swig_BinaryFileWriter_meta, swig_BinaryFileWriter_bases, swig_BinaryFileWriter_base_names };

static int _wrap_new_BinaryFileReader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Std::BinaryFileReader *result = 0 ;
  
  SWIG_check_num_args("Std::BinaryFileReader::BinaryFileReader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::BinaryFileReader::BinaryFileReader",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Std::BinaryFileReader::BinaryFileReader",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (Std::BinaryFileReader *)new Std::BinaryFileReader((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BinaryFileReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryFileReader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Std::BinaryFileReader *result = 0 ;
  
  SWIG_check_num_args("Std::BinaryFileReader::BinaryFileReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Std::BinaryFileReader::BinaryFileReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Std::BinaryFileReader *)new Std::BinaryFileReader((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BinaryFileReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryFileReader(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryFileReader__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryFileReader__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BinaryFileReader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::BinaryFileReader::BinaryFileReader(char const *,char const *)\n"
    "    Std::BinaryFileReader::BinaryFileReader(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryFileReader_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  int8_t *arg2 = (int8_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"int8_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_signed_char);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  int16_t *arg2 = (int16_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"int16_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_short);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"int32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_int);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"int64_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long_long,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_long_long);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"uint8_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"uint16_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_unsigned_short);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"uint32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_unsigned_int);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BinaryFileReader::read",2,"uint64_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_long_long,0))){
    SWIG_fail_ptr("BinaryFileReader_read",2,SWIGTYPE_p_unsigned_long_long);
  }
  
  result = (arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Std::BinaryFileReader::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BinaryFileReader::read",1,"Std::BinaryFileReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BinaryFileReader,0))){
    SWIG_fail_ptr("BinaryFileReader_read",1,SWIGTYPE_p_Std__BinaryFileReader);
  }
  
  result = (arg1)->read();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryFileReader_read(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BinaryFileReader_read__SWIG_8(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_short, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_long_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BinaryFileReader, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryFileReader_read__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryFileReader_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::BinaryFileReader::read(int8_t *)\n"
    "    Std::BinaryFileReader::read(int16_t *)\n"
    "    Std::BinaryFileReader::read(int32_t *)\n"
    "    Std::BinaryFileReader::read(int64_t *)\n"
    "    Std::BinaryFileReader::read(uint8_t *)\n"
    "    Std::BinaryFileReader::read(uint16_t *)\n"
    "    Std::BinaryFileReader::read(uint32_t *)\n"
    "    Std::BinaryFileReader::read(uint64_t *)\n"
    "    Std::BinaryFileReader::read()\n");
  lua_error(L);return 0;
}


static void swig_delete_BinaryFileReader(void *obj) {
Std::BinaryFileReader *arg1 = (Std::BinaryFileReader *) obj;
delete arg1;
}
static int _proxy__wrap_new_BinaryFileReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BinaryFileReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BinaryFileReader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BinaryFileReader_methods[]= {
    { "read", _wrap_BinaryFileReader_read},
    {0,0}
};
static swig_lua_method swig_BinaryFileReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BinaryFileReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BinaryFileReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BinaryFileReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BinaryFileReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BinaryFileReader_Sf_SwigStatic = {
    "BinaryFileReader",
    swig_BinaryFileReader_Sf_SwigStatic_methods,
    swig_BinaryFileReader_Sf_SwigStatic_attributes,
    swig_BinaryFileReader_Sf_SwigStatic_constants,
    swig_BinaryFileReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BinaryFileReader_bases[] = {0,0};
static const char *swig_BinaryFileReader_base_names[] = {"Std::StdFile *",0};
static swig_lua_class _wrap_class_BinaryFileReader = { "BinaryFileReader", "BinaryFileReader", &SWIGTYPE_p_Std__BinaryFileReader,_proxy__wrap_new_BinaryFileReader, swig_delete_BinaryFileReader, swig_BinaryFileReader_methods, swig_BinaryFileReader_attributes, &swig_BinaryFileReader_Sf_SwigStatic, swig_BinaryFileReader_meta, swig_BinaryFileReader_bases, swig_BinaryFileReader_base_names };

static int _wrap_BitArray_v_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  std::vector< bool > *arg2 = (std::vector< bool > *) 0 ;
  
  SWIG_check_num_args("Std::BitArray::v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::v",1,"Std::BitArray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::BitArray::v",2,"std::vector< bool > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_v_set",1,SWIGTYPE_p_Std__BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_bool_t,0))){
    SWIG_fail_ptr("BitArray_v_set",2,SWIGTYPE_p_std__vectorT_bool_t);
  }
  
  if (arg1) (arg1)->v = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_v_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  std::vector< bool > *result = 0 ;
  
  SWIG_check_num_args("Std::BitArray::v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::v",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_v_get",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (std::vector< bool > *)& ((arg1)->v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_bool_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *result = 0 ;
  
  SWIG_check_num_args("Std::BitArray::BitArray",0,0)
  result = (Std::BitArray *)new Std::BitArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::BitArray *result = 0 ;
  
  SWIG_check_num_args("Std::BitArray::BitArray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::BitArray::BitArray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::BitArray *)new Std::BitArray(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = 0 ;
  Std::BitArray *result = 0 ;
  
  SWIG_check_num_args("Std::BitArray::BitArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::BitArray::BitArray",1,"Std::BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("new_BitArray",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (Std::BitArray *)new Std::BitArray((Std::BitArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BitArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BitArray(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BitArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__BitArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BitArray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BitArray__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BitArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::BitArray::BitArray()\n"
    "    Std::BitArray::BitArray(size_t)\n"
    "    Std::BitArray::BitArray(Std::BitArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BitArray_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Std::BitArray::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::set",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::set",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::BitArray::set",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_set",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::get",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::get",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_get",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->get(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::BitArray::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::resize",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_resize",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BitArray::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::size",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_size",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_max_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BitArray::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::max_size",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_max_size",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_capacity(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::BitArray::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::capacity",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_capacity",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::empty",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_empty",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_reserve(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::BitArray::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::reserve",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_reserve",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  
  SWIG_check_num_args("Std::BitArray::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::shrink_to_fit",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_shrink_to_fit",1,SWIGTYPE_p_Std__BitArray);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___getitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::__getitem",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___getitem",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->__getitem(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___setitem(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Std::BitArray::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::__setitem",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::__setitem",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Std::BitArray::__setitem",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___setitem",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->__setitem(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  Std::BitArray *arg2 = 0 ;
  Std::BitArray *result = 0 ;
  
  SWIG_check_num_args("Std::BitArray::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::operator +",1,"Std::BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BitArray::operator +",2,"Std::BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___add",1,SWIGTYPE_p_Std__BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___add",2,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (Std::BitArray *) &(arg1)->operator +((Std::BitArray const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__BitArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::at",1,"Std::BitArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::BitArray::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_at",1,SWIGTYPE_p_Std__BitArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->at(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::front",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_front",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->front();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::back",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_back",1,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->back();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Std::BitArray::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::push_back",1,"Std::BitArray *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Std::BitArray::push_back",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_push_back",1,SWIGTYPE_p_Std__BitArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  
  SWIG_check_num_args("Std::BitArray::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::pop_back",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_pop_back",1,SWIGTYPE_p_Std__BitArray);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  
  SWIG_check_num_args("Std::BitArray::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::clear",1,"Std::BitArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray_clear",1,SWIGTYPE_p_Std__BitArray);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___eq(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  Std::BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::operator ==",1,"Std::BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BitArray::operator ==",2,"Std::BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___eq",1,SWIGTYPE_p_Std__BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___eq",2,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->operator ==((Std::BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___lt(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  Std::BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::operator <",1,"Std::BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BitArray::operator <",2,"Std::BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___lt",1,SWIGTYPE_p_Std__BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___lt",2,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->operator <((Std::BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BitArray___le(lua_State* L) {
  int SWIG_arg = 0;
  Std::BitArray *arg1 = (Std::BitArray *) 0 ;
  Std::BitArray *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Std::BitArray::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::BitArray::operator <=",1,"Std::BitArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::BitArray::operator <=",2,"Std::BitArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___le",1,SWIGTYPE_p_Std__BitArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__BitArray,0))){
    SWIG_fail_ptr("BitArray___le",2,SWIGTYPE_p_Std__BitArray);
  }
  
  result = (bool)(arg1)->operator <=((Std::BitArray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitArray(void *obj) {
Std::BitArray *arg1 = (Std::BitArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitArray_attributes[] = {
    { "v", _wrap_BitArray_v_get, _wrap_BitArray_v_set },
    {0,0,0}
};
static swig_lua_method swig_BitArray_methods[]= {
    { "set", _wrap_BitArray_set},
    { "get", _wrap_BitArray_get},
    { "resize", _wrap_BitArray_resize},
    { "size", _wrap_BitArray_size},
    { "max_size", _wrap_BitArray_max_size},
    { "capacity", _wrap_BitArray_capacity},
    { "empty", _wrap_BitArray_empty},
    { "reserve", _wrap_BitArray_reserve},
    { "shrink_to_fit", _wrap_BitArray_shrink_to_fit},
    { "__getitem", _wrap_BitArray___getitem},
    { "__setitem", _wrap_BitArray___setitem},
    { "__add", _wrap_BitArray___add},
    { "at", _wrap_BitArray_at},
    { "front", _wrap_BitArray_front},
    { "back", _wrap_BitArray_back},
    { "push_back", _wrap_BitArray_push_back},
    { "pop_back", _wrap_BitArray_pop_back},
    { "clear", _wrap_BitArray_clear},
    { "__eq", _wrap_BitArray___eq},
    { "__lt", _wrap_BitArray___lt},
    { "__le", _wrap_BitArray___le},
    {0,0}
};
static swig_lua_method swig_BitArray_meta[] = {
    { "__getitem", _wrap_BitArray___getitem},
    { "__setitem", _wrap_BitArray___setitem},
    { "__add", _wrap_BitArray___add},
    { "__eq", _wrap_BitArray___eq},
    { "__lt", _wrap_BitArray___lt},
    { "__le", _wrap_BitArray___le},
    {0,0}
};

static swig_lua_attribute swig_BitArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitArray_Sf_SwigStatic = {
    "BitArray",
    swig_BitArray_Sf_SwigStatic_methods,
    swig_BitArray_Sf_SwigStatic_attributes,
    swig_BitArray_Sf_SwigStatic_constants,
    swig_BitArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitArray_bases[] = {0,0};
static const char *swig_BitArray_base_names[] = {"Std::StdObject *",0};
static swig_lua_class _wrap_class_BitArray = { "BitArray", "BitArray", &SWIGTYPE_p_Std__BitArray,_proxy__wrap_new_BitArray, swig_delete_BitArray, swig_BitArray_methods, swig_BitArray_attributes, &swig_BitArray_Sf_SwigStatic, swig_BitArray_meta, swig_BitArray_bases, swig_BitArray_base_names };

static int _wrap_lua_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  std::vector< SWIGLUA_REF > *arg2 = (std::vector< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::vector",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::vector",2,"std::vector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_vector_set",2,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  std::vector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::vector",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (std::vector< SWIGLUA_REF > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::StdVector",0,0)
  result = (Std::StdVector< SWIGLUA_REF > *)new Std::StdVector< SWIGLUA_REF >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< SWIGLUA_REF > *)new Std::StdVector< SWIGLUA_REF >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< SWIGLUA_REF > *arg1 = 0 ;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::StdVector",1,"std::initializer_list< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_lua_vector",1,SWIGTYPE_p_std__initializer_listT_SWIGLUA_REF_t);
  }
  
  result = (Std::StdVector< SWIGLUA_REF > *)new Std::StdVector< SWIGLUA_REF >((std::initializer_list< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SWIGLUA_REF > *arg1 = 0 ;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::StdVector",1,"std::vector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_lua_vector",1,SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t);
  }
  
  result = (Std::StdVector< SWIGLUA_REF > *)new Std::StdVector< SWIGLUA_REF >((std::vector< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = 0 ;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::StdVector",1,"Std::StdVector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("new_lua_vector",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (Std::StdVector< SWIGLUA_REF > *)new Std::StdVector< SWIGLUA_REF >((Std::StdVector< SWIGLUA_REF > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lua_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_lua_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_lua_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_lua_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_lua_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_lua_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_lua_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< SWIGLUA_REF >::StdVector()\n"
    "    Std::StdVector< SWIGLUA_REF >::StdVector(size_t)\n"
    "    Std::StdVector< SWIGLUA_REF >::StdVector(std::initializer_list< SWIGLUA_REF > const &)\n"
    "    Std::StdVector< SWIGLUA_REF >::StdVector(std::vector< SWIGLUA_REF > const &)\n"
    "    Std::StdVector< SWIGLUA_REF >::StdVector(Std::StdVector< SWIGLUA_REF > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lua_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  Std::StdVector< SWIGLUA_REF > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::copy",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::copy",2,"Std::StdVector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  (arg1)->copy((Std::StdVector< SWIGLUA_REF > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  Std::StdVector< SWIGLUA_REF > *arg2 = 0 ;
  Std::StdVector< SWIGLUA_REF > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::operator +",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::operator +",2,"Std::StdVector< SWIGLUA_REF > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector___add",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector___add",2,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (Std::StdVector< SWIGLUA_REF > *) &(arg1)->operator +((Std::StdVector< SWIGLUA_REF > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::front",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_front",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (SWIGLUA_REF *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::back",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_back",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (SWIGLUA_REF *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::push_back",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::push_back",2,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("lua_vector_push_back",2,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  (arg1)->push_back((SWIGLUA_REF const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::pop_back",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (arg1)->pop_back();
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::at",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_at",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SWIGLUA_REF *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::data",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_data",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (SWIGLUA_REF *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SWIGLUA_REF,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::size",1,"Std::StdVector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_size",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = ((Std::StdVector< SWIGLUA_REF > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::empty",1,"Std::StdVector< SWIGLUA_REF > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  result = (bool)((Std::StdVector< SWIGLUA_REF > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::resize",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::clear",1,"Std::StdVector< SWIGLUA_REF > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::erase",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::erase",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_lua_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_lua_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lua_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< SWIGLUA_REF >::erase(size_t)\n"
    "    Std::StdVector< SWIGLUA_REF >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_lua_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",3,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("lua_vector_insert",3,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  (arg1)->insert(arg2,(SWIGLUA_REF const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SWIGLUA_REF *arg4 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::insert",4,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("lua_vector_insert",4,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  (arg1)->insert(arg2,arg3,(SWIGLUA_REF const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SWIGLUA_REF, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_lua_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SWIGLUA_REF, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_lua_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lua_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< SWIGLUA_REF >::insert(size_t,SWIGLUA_REF const &)\n"
    "    Std::StdVector< SWIGLUA_REF >::insert(size_t,size_t,SWIGLUA_REF const &)\n");
  lua_error(L);return 0;
}


static int _wrap_lua_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  size_t arg2 ;
  SWIGLUA_REF *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::emplace",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::emplace",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::emplace",3,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("lua_vector_emplace",3,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  (arg1)->emplace(arg2,(SWIGLUA_REF const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lua_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) 0 ;
  SWIGLUA_REF *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< SWIGLUA_REF >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::fill",1,"Std::StdVector< SWIGLUA_REF > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< SWIGLUA_REF >::fill",2,"SWIGLUA_REF const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,0))){
    SWIG_fail_ptr("lua_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SWIGLUA_REF,0))){
    SWIG_fail_ptr("lua_vector_fill",2,SWIGTYPE_p_SWIGLUA_REF);
  }
  
  (arg1)->fill((SWIGLUA_REF const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_lua_vector(void *obj) {
Std::StdVector< SWIGLUA_REF > *arg1 = (Std::StdVector< SWIGLUA_REF > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lua_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lua_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lua_vector_attributes[] = {
    { "vector", _wrap_lua_vector_vector_get, _wrap_lua_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_lua_vector_methods[]= {
    { "copy", _wrap_lua_vector_copy},
    { "__add", _wrap_lua_vector___add},
    { "front", _wrap_lua_vector_front},
    { "back", _wrap_lua_vector_back},
    { "push_back", _wrap_lua_vector_push_back},
    { "pop_back", _wrap_lua_vector_pop_back},
    { "at", _wrap_lua_vector_at},
    { "data", _wrap_lua_vector_data},
    { "size", _wrap_lua_vector_size},
    { "empty", _wrap_lua_vector_empty},
    { "resize", _wrap_lua_vector_resize},
    { "clear", _wrap_lua_vector_clear},
    { "erase", _wrap_lua_vector_erase},
    { "insert", _wrap_lua_vector_insert},
    { "emplace", _wrap_lua_vector_emplace},
    { "fill", _wrap_lua_vector_fill},
    {0,0}
};
static swig_lua_method swig_lua_vector_meta[] = {
    { "__add", _wrap_lua_vector___add},
    {0,0}
};

static swig_lua_attribute swig_lua_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lua_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lua_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lua_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lua_vector_Sf_SwigStatic = {
    "lua_vector",
    swig_lua_vector_Sf_SwigStatic_methods,
    swig_lua_vector_Sf_SwigStatic_attributes,
    swig_lua_vector_Sf_SwigStatic_constants,
    swig_lua_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lua_vector_bases[] = {0};
static const char *swig_lua_vector_base_names[] = {0};
static swig_lua_class _wrap_class_lua_vector = { "lua_vector", "lua_vector", &SWIGTYPE_p_Std__StdVectorT_SWIGLUA_REF_t,_proxy__wrap_new_lua_vector, swig_delete_lua_vector, swig_lua_vector_methods, swig_lua_vector_attributes, &swig_lua_vector_Sf_SwigStatic, swig_lua_vector_meta, swig_lua_vector_bases, swig_lua_vector_base_names };

static int _wrap_string_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  std::vector< Std::StdString > *arg2 = (std::vector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",1,"Std::StdVector< Std::StdString > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",2,"std::vector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_vector_set",2,SWIGTYPE_p_std__vectorT_Std__StdString_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  std::vector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::vector",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (std::vector< Std::StdString > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",0,0)
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"std::initializer_list< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_string_vector",1,SWIGTYPE_p_std__initializer_listT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((std::initializer_list< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"std::vector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_string_vector",1,SWIGTYPE_p_std__vectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((std::vector< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::StdVector",1,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("new_string_vector",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *)new Std::StdVector< Std::StdString >((Std::StdVector< Std::StdString > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::StdVector()\n"
    "    Std::StdVector< Std::StdString >::StdVector(size_t)\n"
    "    Std::StdVector< Std::StdString >::StdVector(std::initializer_list< Std::StdString > const &)\n"
    "    Std::StdVector< Std::StdString >::StdVector(std::vector< Std::StdString > const &)\n"
    "    Std::StdVector< Std::StdString >::StdVector(Std::StdVector< Std::StdString > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::copy",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::copy",2,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->copy((Std::StdVector< Std::StdString > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdVector< Std::StdString > *arg2 = 0 ;
  Std::StdVector< Std::StdString > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::operator +",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::operator +",2,"Std::StdVector< Std::StdString > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector___add",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector___add",2,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdVector< Std::StdString > *) &(arg1)->operator +((Std::StdVector< Std::StdString > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::front",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_front",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::back",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::push_back",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::push_back",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("string_vector_push_back",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->push_back((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::pop_back",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (arg1)->pop_back();
  {
    Std::StdString * resultptr = new Std::StdString((const Std::StdString &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__StdString,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::at",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_at",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Std::StdString *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::data",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_data",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (Std::StdString *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::size",1,"Std::StdVector< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_size",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = ((Std::StdVector< Std::StdString > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::empty",1,"Std::StdVector< Std::StdString > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  result = (bool)((Std::StdVector< Std::StdString > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::resize",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::clear",1,"Std::StdVector< Std::StdString > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::erase(size_t)\n"
    "    Std::StdVector< Std::StdString >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("string_vector_insert",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Std::StdString *arg4 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Std::StdVector< Std::StdString >::insert",4,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("string_vector_insert",4,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->insert(arg2,arg3,(Std::StdString const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_string_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_Std__StdString_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Std__StdString, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_string_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< Std::StdString >::insert(size_t,Std::StdString const &)\n"
    "    Std::StdVector< Std::StdString >::insert(size_t,size_t,Std::StdString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  size_t arg2 ;
  Std::StdString *arg3 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Std::StdVector< Std::StdString >::emplace",3,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("string_vector_emplace",3,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->emplace(arg2,(Std::StdString const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) 0 ;
  Std::StdString *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< Std::StdString >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< Std::StdString >::fill",1,"Std::StdVector< Std::StdString > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< Std::StdString >::fill",2,"Std::StdString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,0))){
    SWIG_fail_ptr("string_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_Std__StdString_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdString,0))){
    SWIG_fail_ptr("string_vector_fill",2,SWIGTYPE_p_Std__StdString);
  }
  
  (arg1)->fill((Std::StdString const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string_vector(void *obj) {
Std::StdVector< Std::StdString > *arg1 = (Std::StdVector< Std::StdString > *) obj;
delete arg1;
}
static int _proxy__wrap_new_string_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_vector_attributes[] = {
    { "vector", _wrap_string_vector_vector_get, _wrap_string_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_string_vector_methods[]= {
    { "copy", _wrap_string_vector_copy},
    { "__add", _wrap_string_vector___add},
    { "front", _wrap_string_vector_front},
    { "back", _wrap_string_vector_back},
    { "push_back", _wrap_string_vector_push_back},
    { "pop_back", _wrap_string_vector_pop_back},
    { "at", _wrap_string_vector_at},
    { "data", _wrap_string_vector_data},
    { "size", _wrap_string_vector_size},
    { "empty", _wrap_string_vector_empty},
    { "resize", _wrap_string_vector_resize},
    { "clear", _wrap_string_vector_clear},
    { "erase", _wrap_string_vector_erase},
    { "insert", _wrap_string_vector_insert},
    { "emplace", _wrap_string_vector_emplace},
    { "fill", _wrap_string_vector_fill},
    {0,0}
};
static swig_lua_method swig_string_vector_meta[] = {
    { "__add", _wrap_string_vector___add},
    {0,0}
};

static swig_lua_attribute swig_string_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_vector_Sf_SwigStatic = {
    "string_vector",
    swig_string_vector_Sf_SwigStatic_methods,
    swig_string_vector_Sf_SwigStatic_attributes,
    swig_string_vector_Sf_SwigStatic_constants,
    swig_string_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_vector_bases[] = {0};
static const char *swig_string_vector_base_names[] = {0};
static swig_lua_class _wrap_class_string_vector = { "string_vector", "string_vector", &SWIGTYPE_p_Std__StdVectorT_Std__StdString_t,_proxy__wrap_new_string_vector, swig_delete_string_vector, swig_string_vector_methods, swig_string_vector_attributes, &swig_string_vector_Sf_SwigStatic, swig_string_vector_meta, swig_string_vector_bases, swig_string_vector_base_names };

static int _wrap_float_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::vector",1,"Std::StdVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< float >::vector",2,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_vector_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::vector",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (std::vector< float > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",0,0)
  result = (Std::StdVector< float > *)new Std::StdVector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< float > *)new Std::StdVector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"std::initializer_list< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__initializer_listT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((std::initializer_list< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< float >::StdVector",1,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (Std::StdVector< float > *)new Std::StdVector< float >((Std::StdVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::StdVector()\n"
    "    Std::StdVector< float >::StdVector(size_t)\n"
    "    Std::StdVector< float >::StdVector(std::initializer_list< float > const &)\n"
    "    Std::StdVector< float >::StdVector(std::vector< float > const &)\n"
    "    Std::StdVector< float >::StdVector(Std::StdVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  Std::StdVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::copy",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::copy",2,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->copy((Std::StdVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  Std::StdVector< float > *arg2 = 0 ;
  Std::StdVector< float > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::operator +",1,"Std::StdVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< float >::operator +",2,"Std::StdVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___add",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___add",2,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (Std::StdVector< float > *) &(arg1)->operator +((Std::StdVector< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::front",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::back",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::push_back",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("Std::StdVector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::pop_back",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::at",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_at",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::data",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_data",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::size",1,"Std::StdVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = ((Std::StdVector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::empty",1,"Std::StdVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  result = (bool)((Std::StdVector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::resize",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::clear",1,"Std::StdVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::erase",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::erase",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::erase(size_t)\n"
    "    Std::StdVector< float >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::insert",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::insert",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  float temp4 ;
  
  SWIG_check_num_args("Std::StdVector< float >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::insert",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< float >::insert",4,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(float const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_float_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< float >::insert(size_t,float const &)\n"
    "    Std::StdVector< float >::insert(size_t,size_t,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("Std::StdVector< float >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::emplace",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< float >::emplace",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< float > *arg1 = (Std::StdVector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("Std::StdVector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< float >::fill",1,"Std::StdVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< float >::fill",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
Std::StdVector< float > *arg1 = (Std::StdVector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    { "vector", _wrap_float_vector_vector_get, _wrap_float_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "copy", _wrap_float_vector_copy},
    { "__add", _wrap_float_vector___add},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "at", _wrap_float_vector_at},
    { "data", _wrap_float_vector_data},
    { "size", _wrap_float_vector_size},
    { "empty", _wrap_float_vector_empty},
    { "resize", _wrap_float_vector_resize},
    { "clear", _wrap_float_vector_clear},
    { "erase", _wrap_float_vector_erase},
    { "insert", _wrap_float_vector_insert},
    { "emplace", _wrap_float_vector_emplace},
    { "fill", _wrap_float_vector_fill},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__add", _wrap_float_vector___add},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_Std__StdVectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_double_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::vector",1,"Std::StdVector< double > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< double >::vector",2,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_vector_set",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::vector",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (std::vector< double > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",0,0)
  result = (Std::StdVector< double > *)new Std::StdVector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< double > *)new Std::StdVector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"std::initializer_list< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__initializer_listT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((std::initializer_list< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< double >::StdVector",1,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (Std::StdVector< double > *)new Std::StdVector< double >((Std::StdVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::StdVector()\n"
    "    Std::StdVector< double >::StdVector(size_t)\n"
    "    Std::StdVector< double >::StdVector(std::initializer_list< double > const &)\n"
    "    Std::StdVector< double >::StdVector(std::vector< double > const &)\n"
    "    Std::StdVector< double >::StdVector(Std::StdVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  Std::StdVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::copy",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::copy",2,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->copy((Std::StdVector< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  Std::StdVector< double > *arg2 = 0 ;
  Std::StdVector< double > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::operator +",1,"Std::StdVector< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< double >::operator +",2,"Std::StdVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___add",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___add",2,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (Std::StdVector< double > *) &(arg1)->operator +((Std::StdVector< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::front",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::back",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::push_back",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("Std::StdVector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::pop_back",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::at",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_at",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::data",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_data",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::size",1,"Std::StdVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = ((Std::StdVector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::empty",1,"Std::StdVector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  result = (bool)((Std::StdVector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::resize",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::clear",1,"Std::StdVector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::erase",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::erase",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::erase(size_t)\n"
    "    Std::StdVector< double >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::insert",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::insert",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = 0 ;
  double temp4 ;
  
  SWIG_check_num_args("Std::StdVector< double >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::insert",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< double >::insert",4,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(double)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(double const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_double_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_double_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< double >::insert(size_t,double const &)\n"
    "    Std::StdVector< double >::insert(size_t,size_t,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("Std::StdVector< double >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::emplace",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< double >::emplace",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< double > *arg1 = (Std::StdVector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("Std::StdVector< double >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< double >::fill",1,"Std::StdVector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< double >::fill",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
Std::StdVector< double > *arg1 = (Std::StdVector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    { "vector", _wrap_double_vector_vector_get, _wrap_double_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "copy", _wrap_double_vector_copy},
    { "__add", _wrap_double_vector___add},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "at", _wrap_double_vector_at},
    { "data", _wrap_double_vector_data},
    { "size", _wrap_double_vector_size},
    { "empty", _wrap_double_vector_empty},
    { "resize", _wrap_double_vector_resize},
    { "clear", _wrap_double_vector_clear},
    { "erase", _wrap_double_vector_erase},
    { "insert", _wrap_double_vector_insert},
    { "emplace", _wrap_double_vector_emplace},
    { "fill", _wrap_double_vector_fill},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__add", _wrap_double_vector___add},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_Std__StdVectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_char_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  std::vector< signed char > *arg2 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::vector",1,"Std::StdVector< signed char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::vector",2,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_vector_set",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::vector",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (std::vector< signed char > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::StdVector",0,0)
  result = (Std::StdVector< signed char > *)new Std::StdVector< signed char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< signed char > *)new Std::StdVector< signed char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< signed char > *arg1 = 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::StdVector",1,"std::initializer_list< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_signed_char_t,0))){
    SWIG_fail_ptr("new_char_vector",1,SWIGTYPE_p_std__initializer_listT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *)new Std::StdVector< signed char >((std::initializer_list< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::StdVector",1,"std::vector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_char_vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *)new Std::StdVector< signed char >((std::vector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::StdVector",1,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_char_vector",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *)new Std::StdVector< signed char >((Std::StdVector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_char_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_char_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_char_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_char_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< signed char >::StdVector()\n"
    "    Std::StdVector< signed char >::StdVector(size_t)\n"
    "    Std::StdVector< signed char >::StdVector(std::initializer_list< signed char > const &)\n"
    "    Std::StdVector< signed char >::StdVector(std::vector< signed char > const &)\n"
    "    Std::StdVector< signed char >::StdVector(Std::StdVector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_char_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  Std::StdVector< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::copy",1,"Std::StdVector< signed char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::copy",2,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->copy((Std::StdVector< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  Std::StdVector< signed char > *arg2 = 0 ;
  Std::StdVector< signed char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::operator +",1,"Std::StdVector< signed char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::operator +",2,"Std::StdVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector___add",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector___add",2,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (Std::StdVector< signed char > *) &(arg1)->operator +((Std::StdVector< signed char > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::front",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_front",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::back",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::push_back",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::push_back",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("Std::StdVector< signed char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::pop_back",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::at",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_at",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::data",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_data",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< signed char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::size",1,"Std::StdVector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_size",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = ((Std::StdVector< signed char > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< signed char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::empty",1,"Std::StdVector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  result = (bool)((Std::StdVector< signed char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::resize",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::clear",1,"Std::StdVector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::erase",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::erase",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< signed char >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_char_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_char_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'char_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< signed char >::erase(size_t)\n"
    "    Std::StdVector< signed char >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_char_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::insert",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< signed char >::insert",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  signed char *arg4 = 0 ;
  signed char temp4 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::insert",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< signed char >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< signed char >::insert",4,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(signed char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(signed char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_char_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_char_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'char_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< signed char >::insert(size_t,signed char const &)\n"
    "    Std::StdVector< signed char >::insert(size_t,size_t,signed char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_char_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::emplace",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< signed char >::emplace",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< signed char >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< signed char >::fill",1,"Std::StdVector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< signed char >::fill",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_signed_char_t,0))){
    SWIG_fail_ptr("char_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_char_vector(void *obj) {
Std::StdVector< signed char > *arg1 = (Std::StdVector< signed char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_char_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_char_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_char_vector_attributes[] = {
    { "vector", _wrap_char_vector_vector_get, _wrap_char_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_char_vector_methods[]= {
    { "copy", _wrap_char_vector_copy},
    { "__add", _wrap_char_vector___add},
    { "front", _wrap_char_vector_front},
    { "back", _wrap_char_vector_back},
    { "push_back", _wrap_char_vector_push_back},
    { "pop_back", _wrap_char_vector_pop_back},
    { "at", _wrap_char_vector_at},
    { "data", _wrap_char_vector_data},
    { "size", _wrap_char_vector_size},
    { "empty", _wrap_char_vector_empty},
    { "resize", _wrap_char_vector_resize},
    { "clear", _wrap_char_vector_clear},
    { "erase", _wrap_char_vector_erase},
    { "insert", _wrap_char_vector_insert},
    { "emplace", _wrap_char_vector_emplace},
    { "fill", _wrap_char_vector_fill},
    {0,0}
};
static swig_lua_method swig_char_vector_meta[] = {
    { "__add", _wrap_char_vector___add},
    {0,0}
};

static swig_lua_attribute swig_char_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_char_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_char_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_char_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_char_vector_Sf_SwigStatic = {
    "char_vector",
    swig_char_vector_Sf_SwigStatic_methods,
    swig_char_vector_Sf_SwigStatic_attributes,
    swig_char_vector_Sf_SwigStatic_constants,
    swig_char_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_char_vector_bases[] = {0};
static const char *swig_char_vector_base_names[] = {0};
static swig_lua_class _wrap_class_char_vector = { "char_vector", "char_vector", &SWIGTYPE_p_Std__StdVectorT_signed_char_t,_proxy__wrap_new_char_vector, swig_delete_char_vector, swig_char_vector_methods, swig_char_vector_attributes, &swig_char_vector_Sf_SwigStatic, swig_char_vector_meta, swig_char_vector_bases, swig_char_vector_base_names };

static int _wrap_uchar_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::vector",1,"Std::StdVector< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::vector",2,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::vector",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (std::vector< unsigned char > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::StdVector",0,0)
  result = (Std::StdVector< unsigned char > *)new Std::StdVector< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< unsigned char > *)new Std::StdVector< unsigned char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned char > *arg1 = 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::StdVector",1,"std::initializer_list< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uchar_vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *)new Std::StdVector< unsigned char >((std::initializer_list< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::StdVector",1,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uchar_vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *)new Std::StdVector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::StdVector",1,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uchar_vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *)new Std::StdVector< unsigned char >((Std::StdVector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uchar_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uchar_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uchar_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uchar_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uchar_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uchar_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uchar_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned char >::StdVector()\n"
    "    Std::StdVector< unsigned char >::StdVector(size_t)\n"
    "    Std::StdVector< unsigned char >::StdVector(std::initializer_list< unsigned char > const &)\n"
    "    Std::StdVector< unsigned char >::StdVector(std::vector< unsigned char > const &)\n"
    "    Std::StdVector< unsigned char >::StdVector(Std::StdVector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uchar_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::copy",1,"Std::StdVector< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::copy",2,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  Std::StdVector< unsigned char > *arg2 = 0 ;
  Std::StdVector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::operator +",1,"Std::StdVector< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::operator +",2,"Std::StdVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (Std::StdVector< unsigned char > *) &(arg1)->operator +((Std::StdVector< unsigned char > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::front",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::back",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::push_back",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::push_back",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::pop_back",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::at",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::data",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::size",1,"Std::StdVector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = ((Std::StdVector< unsigned char > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::empty",1,"Std::StdVector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  result = (bool)((Std::StdVector< unsigned char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::resize",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::clear",1,"Std::StdVector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::erase",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::erase",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned char >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uchar_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uchar_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uchar_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned char >::erase(size_t)\n"
    "    Std::StdVector< unsigned char >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uchar_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned char *arg4 = 0 ;
  unsigned char temp4 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< unsigned char >::insert",4,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  temp4=(unsigned char)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned char const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uchar_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_uchar_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uchar_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned char >::insert(size_t,unsigned char const &)\n"
    "    Std::StdVector< unsigned char >::insert(size_t,size_t,unsigned char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uchar_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::emplace",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned char >::emplace",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uchar_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned char >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned char >::fill",1,"Std::StdVector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned char >::fill",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uchar_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uchar_vector(void *obj) {
Std::StdVector< unsigned char > *arg1 = (Std::StdVector< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uchar_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uchar_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uchar_vector_attributes[] = {
    { "vector", _wrap_uchar_vector_vector_get, _wrap_uchar_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_uchar_vector_methods[]= {
    { "copy", _wrap_uchar_vector_copy},
    { "__add", _wrap_uchar_vector___add},
    { "front", _wrap_uchar_vector_front},
    { "back", _wrap_uchar_vector_back},
    { "push_back", _wrap_uchar_vector_push_back},
    { "pop_back", _wrap_uchar_vector_pop_back},
    { "at", _wrap_uchar_vector_at},
    { "data", _wrap_uchar_vector_data},
    { "size", _wrap_uchar_vector_size},
    { "empty", _wrap_uchar_vector_empty},
    { "resize", _wrap_uchar_vector_resize},
    { "clear", _wrap_uchar_vector_clear},
    { "erase", _wrap_uchar_vector_erase},
    { "insert", _wrap_uchar_vector_insert},
    { "emplace", _wrap_uchar_vector_emplace},
    { "fill", _wrap_uchar_vector_fill},
    {0,0}
};
static swig_lua_method swig_uchar_vector_meta[] = {
    { "__add", _wrap_uchar_vector___add},
    {0,0}
};

static swig_lua_attribute swig_uchar_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uchar_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uchar_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uchar_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uchar_vector_Sf_SwigStatic = {
    "uchar_vector",
    swig_uchar_vector_Sf_SwigStatic_methods,
    swig_uchar_vector_Sf_SwigStatic_attributes,
    swig_uchar_vector_Sf_SwigStatic_constants,
    swig_uchar_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uchar_vector_bases[] = {0};
static const char *swig_uchar_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uchar_vector = { "uchar_vector", "uchar_vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_char_t,_proxy__wrap_new_uchar_vector, swig_delete_uchar_vector, swig_uchar_vector_methods, swig_uchar_vector_attributes, &swig_uchar_vector_Sf_SwigStatic, swig_uchar_vector_meta, swig_uchar_vector_bases, swig_uchar_vector_base_names };

static int _wrap_short_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  std::vector< short > *arg2 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::vector",1,"Std::StdVector< short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< short >::vector",2,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_vector_set",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::vector",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (std::vector< short > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::StdVector",0,0)
  result = (Std::StdVector< short > *)new Std::StdVector< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< short >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< short > *)new Std::StdVector< short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< short > *arg1 = 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< short >::StdVector",1,"std::initializer_list< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_short_t,0))){
    SWIG_fail_ptr("new_short_vector",1,SWIGTYPE_p_std__initializer_listT_short_t);
  }
  
  result = (Std::StdVector< short > *)new Std::StdVector< short >((std::initializer_list< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< short >::StdVector",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_short_vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (Std::StdVector< short > *)new Std::StdVector< short >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< short >::StdVector",1,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("new_short_vector",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (Std::StdVector< short > *)new Std::StdVector< short >((Std::StdVector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_short_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_short_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_short_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< short >::StdVector()\n"
    "    Std::StdVector< short >::StdVector(size_t)\n"
    "    Std::StdVector< short >::StdVector(std::initializer_list< short > const &)\n"
    "    Std::StdVector< short >::StdVector(std::vector< short > const &)\n"
    "    Std::StdVector< short >::StdVector(Std::StdVector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_short_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  Std::StdVector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::copy",1,"Std::StdVector< short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< short >::copy",2,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->copy((Std::StdVector< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  Std::StdVector< short > *arg2 = 0 ;
  Std::StdVector< short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::operator +",1,"Std::StdVector< short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< short >::operator +",2,"Std::StdVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector___add",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector___add",2,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (Std::StdVector< short > *) &(arg1)->operator +((Std::StdVector< short > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::front",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_front",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::back",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::push_back",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::push_back",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("Std::StdVector< short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::pop_back",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::at",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_at",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::data",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_data",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::size",1,"Std::StdVector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_size",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = ((Std::StdVector< short > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::empty",1,"Std::StdVector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  result = (bool)((Std::StdVector< short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< short >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::resize",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::clear",1,"Std::StdVector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< short >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::erase",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< short >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::erase",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< short >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_short_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_short_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'short_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< short >::erase(size_t)\n"
    "    Std::StdVector< short >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_short_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< short >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::insert",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< short >::insert",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  short *arg4 = 0 ;
  short temp4 ;
  
  SWIG_check_num_args("Std::StdVector< short >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::insert",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< short >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< short >::insert",4,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_short_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_short_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'short_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< short >::insert(size_t,short const &)\n"
    "    Std::StdVector< short >::insert(size_t,size_t,short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_short_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< short >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::emplace",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< short >::emplace",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< short > *arg1 = (Std::StdVector< short > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< short >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< short >::fill",1,"Std::StdVector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< short >::fill",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_short_t,0))){
    SWIG_fail_ptr("short_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_vector(void *obj) {
Std::StdVector< short > *arg1 = (Std::StdVector< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_vector_attributes[] = {
    { "vector", _wrap_short_vector_vector_get, _wrap_short_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_short_vector_methods[]= {
    { "copy", _wrap_short_vector_copy},
    { "__add", _wrap_short_vector___add},
    { "front", _wrap_short_vector_front},
    { "back", _wrap_short_vector_back},
    { "push_back", _wrap_short_vector_push_back},
    { "pop_back", _wrap_short_vector_pop_back},
    { "at", _wrap_short_vector_at},
    { "data", _wrap_short_vector_data},
    { "size", _wrap_short_vector_size},
    { "empty", _wrap_short_vector_empty},
    { "resize", _wrap_short_vector_resize},
    { "clear", _wrap_short_vector_clear},
    { "erase", _wrap_short_vector_erase},
    { "insert", _wrap_short_vector_insert},
    { "emplace", _wrap_short_vector_emplace},
    { "fill", _wrap_short_vector_fill},
    {0,0}
};
static swig_lua_method swig_short_vector_meta[] = {
    { "__add", _wrap_short_vector___add},
    {0,0}
};

static swig_lua_attribute swig_short_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_vector_Sf_SwigStatic = {
    "short_vector",
    swig_short_vector_Sf_SwigStatic_methods,
    swig_short_vector_Sf_SwigStatic_attributes,
    swig_short_vector_Sf_SwigStatic_constants,
    swig_short_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_vector_bases[] = {0};
static const char *swig_short_vector_base_names[] = {0};
static swig_lua_class _wrap_class_short_vector = { "short_vector", "short_vector", &SWIGTYPE_p_Std__StdVectorT_short_t,_proxy__wrap_new_short_vector, swig_delete_short_vector, swig_short_vector_methods, swig_short_vector_attributes, &swig_short_vector_Sf_SwigStatic, swig_short_vector_meta, swig_short_vector_bases, swig_short_vector_base_names };

static int _wrap_ushort_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  std::vector< unsigned short > *arg2 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::vector",1,"Std::StdVector< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::vector",2,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::vector",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (std::vector< unsigned short > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::StdVector",0,0)
  result = (Std::StdVector< unsigned short > *)new Std::StdVector< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< unsigned short > *)new Std::StdVector< unsigned short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned short > *arg1 = 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::StdVector",1,"std::initializer_list< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ushort_vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *)new Std::StdVector< unsigned short >((std::initializer_list< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::StdVector",1,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ushort_vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *)new Std::StdVector< unsigned short >((std::vector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::StdVector",1,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ushort_vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *)new Std::StdVector< unsigned short >((Std::StdVector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ushort_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ushort_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ushort_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ushort_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ushort_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ushort_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned short >::StdVector()\n"
    "    Std::StdVector< unsigned short >::StdVector(size_t)\n"
    "    Std::StdVector< unsigned short >::StdVector(std::initializer_list< unsigned short > const &)\n"
    "    Std::StdVector< unsigned short >::StdVector(std::vector< unsigned short > const &)\n"
    "    Std::StdVector< unsigned short >::StdVector(Std::StdVector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ushort_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::copy",1,"Std::StdVector< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::copy",2,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  Std::StdVector< unsigned short > *arg2 = 0 ;
  Std::StdVector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::operator +",1,"Std::StdVector< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::operator +",2,"Std::StdVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (Std::StdVector< unsigned short > *) &(arg1)->operator +((Std::StdVector< unsigned short > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::front",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::back",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::push_back",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::push_back",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::pop_back",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::at",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::data",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::size",1,"Std::StdVector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = ((Std::StdVector< unsigned short > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::empty",1,"Std::StdVector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  result = (bool)((Std::StdVector< unsigned short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::resize",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::clear",1,"Std::StdVector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::erase",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::erase",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned short >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ushort_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ushort_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ushort_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned short >::erase(size_t)\n"
    "    Std::StdVector< unsigned short >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ushort_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned short *arg4 = 0 ;
  unsigned short temp4 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< unsigned short >::insert",4,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  temp4=(unsigned short)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned short const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ushort_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ushort_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ushort_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned short >::insert(size_t,unsigned short const &)\n"
    "    Std::StdVector< unsigned short >::insert(size_t,size_t,unsigned short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ushort_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::emplace",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned short >::emplace",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned short >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned short >::fill",1,"Std::StdVector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned short >::fill",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_vector(void *obj) {
Std::StdVector< unsigned short > *arg1 = (Std::StdVector< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_vector_attributes[] = {
    { "vector", _wrap_ushort_vector_vector_get, _wrap_ushort_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_ushort_vector_methods[]= {
    { "copy", _wrap_ushort_vector_copy},
    { "__add", _wrap_ushort_vector___add},
    { "front", _wrap_ushort_vector_front},
    { "back", _wrap_ushort_vector_back},
    { "push_back", _wrap_ushort_vector_push_back},
    { "pop_back", _wrap_ushort_vector_pop_back},
    { "at", _wrap_ushort_vector_at},
    { "data", _wrap_ushort_vector_data},
    { "size", _wrap_ushort_vector_size},
    { "empty", _wrap_ushort_vector_empty},
    { "resize", _wrap_ushort_vector_resize},
    { "clear", _wrap_ushort_vector_clear},
    { "erase", _wrap_ushort_vector_erase},
    { "insert", _wrap_ushort_vector_insert},
    { "emplace", _wrap_ushort_vector_emplace},
    { "fill", _wrap_ushort_vector_fill},
    {0,0}
};
static swig_lua_method swig_ushort_vector_meta[] = {
    { "__add", _wrap_ushort_vector___add},
    {0,0}
};

static swig_lua_attribute swig_ushort_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_vector_Sf_SwigStatic = {
    "ushort_vector",
    swig_ushort_vector_Sf_SwigStatic_methods,
    swig_ushort_vector_Sf_SwigStatic_attributes,
    swig_ushort_vector_Sf_SwigStatic_constants,
    swig_ushort_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_vector_bases[] = {0};
static const char *swig_ushort_vector_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_vector = { "ushort_vector", "ushort_vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_short_t,_proxy__wrap_new_ushort_vector, swig_delete_ushort_vector, swig_ushort_vector_methods, swig_ushort_vector_attributes, &swig_ushort_vector_Sf_SwigStatic, swig_ushort_vector_meta, swig_ushort_vector_bases, swig_ushort_vector_base_names };

static int _wrap_int_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::vector",1,"Std::StdVector< int > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< int >::vector",2,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_vector_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::vector",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (std::vector< int > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::StdVector",0,0)
  result = (Std::StdVector< int > *)new Std::StdVector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< int >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< int > *)new Std::StdVector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< int > *arg1 = 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int >::StdVector",1,"std::initializer_list< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_int_t,0))){
    SWIG_fail_ptr("new_int_vector",1,SWIGTYPE_p_std__initializer_listT_int_t);
  }
  
  result = (Std::StdVector< int > *)new Std::StdVector< int >((std::initializer_list< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int >::StdVector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_int_vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (Std::StdVector< int > *)new Std::StdVector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< int >::StdVector",1,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("new_int_vector",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (Std::StdVector< int > *)new Std::StdVector< int >((Std::StdVector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int >::StdVector()\n"
    "    Std::StdVector< int >::StdVector(size_t)\n"
    "    Std::StdVector< int >::StdVector(std::initializer_list< int > const &)\n"
    "    Std::StdVector< int >::StdVector(std::vector< int > const &)\n"
    "    Std::StdVector< int >::StdVector(Std::StdVector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  Std::StdVector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::copy",1,"Std::StdVector< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int >::copy",2,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->copy((Std::StdVector< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  Std::StdVector< int > *arg2 = 0 ;
  Std::StdVector< int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::operator +",1,"Std::StdVector< int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< int >::operator +",2,"Std::StdVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector___add",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector___add",2,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (Std::StdVector< int > *) &(arg1)->operator +((Std::StdVector< int > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::front",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_front",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::back",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::push_back",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::push_back",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("Std::StdVector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::pop_back",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::at",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_at",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::data",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_data",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::size",1,"Std::StdVector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_size",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = ((Std::StdVector< int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::empty",1,"Std::StdVector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  result = (bool)((Std::StdVector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::resize",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::clear",1,"Std::StdVector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< int >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::erase",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< int >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::erase",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_int_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int >::erase(size_t)\n"
    "    Std::StdVector< int >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::insert",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int >::insert",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  int *arg4 = 0 ;
  int temp4 ;
  
  SWIG_check_num_args("Std::StdVector< int >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::insert",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< int >::insert",4,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_int_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_int_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'int_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< int >::insert(size_t,int const &)\n"
    "    Std::StdVector< int >::insert(size_t,size_t,int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_int_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< int >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::emplace",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< int >::emplace",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< int > *arg1 = (Std::StdVector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< int >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< int >::fill",1,"Std::StdVector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< int >::fill",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_int_t,0))){
    SWIG_fail_ptr("int_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_vector(void *obj) {
Std::StdVector< int > *arg1 = (Std::StdVector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_vector_attributes[] = {
    { "vector", _wrap_int_vector_vector_get, _wrap_int_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_int_vector_methods[]= {
    { "copy", _wrap_int_vector_copy},
    { "__add", _wrap_int_vector___add},
    { "front", _wrap_int_vector_front},
    { "back", _wrap_int_vector_back},
    { "push_back", _wrap_int_vector_push_back},
    { "pop_back", _wrap_int_vector_pop_back},
    { "at", _wrap_int_vector_at},
    { "data", _wrap_int_vector_data},
    { "size", _wrap_int_vector_size},
    { "empty", _wrap_int_vector_empty},
    { "resize", _wrap_int_vector_resize},
    { "clear", _wrap_int_vector_clear},
    { "erase", _wrap_int_vector_erase},
    { "insert", _wrap_int_vector_insert},
    { "emplace", _wrap_int_vector_emplace},
    { "fill", _wrap_int_vector_fill},
    {0,0}
};
static swig_lua_method swig_int_vector_meta[] = {
    { "__add", _wrap_int_vector___add},
    {0,0}
};

static swig_lua_attribute swig_int_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_vector_Sf_SwigStatic = {
    "int_vector",
    swig_int_vector_Sf_SwigStatic_methods,
    swig_int_vector_Sf_SwigStatic_attributes,
    swig_int_vector_Sf_SwigStatic_constants,
    swig_int_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_vector_bases[] = {0};
static const char *swig_int_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int_vector = { "int_vector", "int_vector", &SWIGTYPE_p_Std__StdVectorT_int_t,_proxy__wrap_new_int_vector, swig_delete_int_vector, swig_int_vector_methods, swig_int_vector_attributes, &swig_int_vector_Sf_SwigStatic, swig_int_vector_meta, swig_int_vector_bases, swig_int_vector_base_names };

static int _wrap_uint_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::vector",1,"Std::StdVector< unsigned int > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::vector",2,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::vector",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (std::vector< unsigned int > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::StdVector",0,0)
  result = (Std::StdVector< unsigned int > *)new Std::StdVector< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< unsigned int > *)new Std::StdVector< unsigned int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned int > *arg1 = 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::StdVector",1,"std::initializer_list< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint_vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *)new Std::StdVector< unsigned int >((std::initializer_list< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::StdVector",1,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint_vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *)new Std::StdVector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::StdVector",1,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint_vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *)new Std::StdVector< unsigned int >((Std::StdVector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned int >::StdVector()\n"
    "    Std::StdVector< unsigned int >::StdVector(size_t)\n"
    "    Std::StdVector< unsigned int >::StdVector(std::initializer_list< unsigned int > const &)\n"
    "    Std::StdVector< unsigned int >::StdVector(std::vector< unsigned int > const &)\n"
    "    Std::StdVector< unsigned int >::StdVector(Std::StdVector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::copy",1,"Std::StdVector< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::copy",2,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  Std::StdVector< unsigned int > *arg2 = 0 ;
  Std::StdVector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::operator +",1,"Std::StdVector< unsigned int > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::operator +",2,"Std::StdVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (Std::StdVector< unsigned int > *) &(arg1)->operator +((Std::StdVector< unsigned int > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::front",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::back",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::push_back",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::push_back",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::pop_back",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::at",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::data",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::size",1,"Std::StdVector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = ((Std::StdVector< unsigned int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::empty",1,"Std::StdVector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  result = (bool)((Std::StdVector< unsigned int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::resize",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::clear",1,"Std::StdVector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::erase",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::erase",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned int >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_uint_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned int >::erase(size_t)\n"
    "    Std::StdVector< unsigned int >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_uint_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned int *arg4 = 0 ;
  unsigned int temp4 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< unsigned int >::insert",4,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  temp4=(unsigned int)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned int const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_uint_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_uint_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'uint_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned int >::insert(size_t,unsigned int const &)\n"
    "    Std::StdVector< unsigned int >::insert(size_t,size_t,unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_uint_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::emplace",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned int >::emplace",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned int >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned int >::fill",1,"Std::StdVector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned int >::fill",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_vector(void *obj) {
Std::StdVector< unsigned int > *arg1 = (Std::StdVector< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_vector_attributes[] = {
    { "vector", _wrap_uint_vector_vector_get, _wrap_uint_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_uint_vector_methods[]= {
    { "copy", _wrap_uint_vector_copy},
    { "__add", _wrap_uint_vector___add},
    { "front", _wrap_uint_vector_front},
    { "back", _wrap_uint_vector_back},
    { "push_back", _wrap_uint_vector_push_back},
    { "pop_back", _wrap_uint_vector_pop_back},
    { "at", _wrap_uint_vector_at},
    { "data", _wrap_uint_vector_data},
    { "size", _wrap_uint_vector_size},
    { "empty", _wrap_uint_vector_empty},
    { "resize", _wrap_uint_vector_resize},
    { "clear", _wrap_uint_vector_clear},
    { "erase", _wrap_uint_vector_erase},
    { "insert", _wrap_uint_vector_insert},
    { "emplace", _wrap_uint_vector_emplace},
    { "fill", _wrap_uint_vector_fill},
    {0,0}
};
static swig_lua_method swig_uint_vector_meta[] = {
    { "__add", _wrap_uint_vector___add},
    {0,0}
};

static swig_lua_attribute swig_uint_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_vector_Sf_SwigStatic = {
    "uint_vector",
    swig_uint_vector_Sf_SwigStatic_methods,
    swig_uint_vector_Sf_SwigStatic_attributes,
    swig_uint_vector_Sf_SwigStatic_constants,
    swig_uint_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_vector_bases[] = {0};
static const char *swig_uint_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint_vector = { "uint_vector", "uint_vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_int_t,_proxy__wrap_new_uint_vector, swig_delete_uint_vector, swig_uint_vector_methods, swig_uint_vector_attributes, &swig_uint_vector_Sf_SwigStatic, swig_uint_vector_meta, swig_uint_vector_bases, swig_uint_vector_base_names };

static int _wrap_long_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  std::vector< long > *arg2 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::vector",1,"Std::StdVector< long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< long >::vector",2,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_vector_set",2,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::vector",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (std::vector< long > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::StdVector",0,0)
  result = (Std::StdVector< long > *)new Std::StdVector< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< long >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< long > *)new Std::StdVector< long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< long > *arg1 = 0 ;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long >::StdVector",1,"std::initializer_list< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_long_t,0))){
    SWIG_fail_ptr("new_long_vector",1,SWIGTYPE_p_std__initializer_listT_long_t);
  }
  
  result = (Std::StdVector< long > *)new Std::StdVector< long >((std::initializer_list< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = 0 ;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long >::StdVector",1,"std::vector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("new_long_vector",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (Std::StdVector< long > *)new Std::StdVector< long >((std::vector< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = 0 ;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long >::StdVector",1,"Std::StdVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("new_long_vector",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (Std::StdVector< long > *)new Std::StdVector< long >((Std::StdVector< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_long_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_long_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_long_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long >::StdVector()\n"
    "    Std::StdVector< long >::StdVector(size_t)\n"
    "    Std::StdVector< long >::StdVector(std::initializer_list< long > const &)\n"
    "    Std::StdVector< long >::StdVector(std::vector< long > const &)\n"
    "    Std::StdVector< long >::StdVector(Std::StdVector< long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_long_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  Std::StdVector< long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::copy",1,"Std::StdVector< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< long >::copy",2,"Std::StdVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  (arg1)->copy((Std::StdVector< long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  Std::StdVector< long > *arg2 = 0 ;
  Std::StdVector< long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::operator +",1,"Std::StdVector< long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< long >::operator +",2,"Std::StdVector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector___add",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector___add",2,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (Std::StdVector< long > *) &(arg1)->operator +((Std::StdVector< long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::front",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_front",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::back",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_back",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::push_back",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::push_back",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("Std::StdVector< long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::pop_back",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::at",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_at",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::data",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_data",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::size",1,"Std::StdVector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_size",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = ((Std::StdVector< long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::empty",1,"Std::StdVector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  result = (bool)((Std::StdVector< long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::resize",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::clear",1,"Std::StdVector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::erase",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::erase",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_long_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_long_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'long_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long >::erase(size_t)\n"
    "    Std::StdVector< long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_long_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::insert",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long >::insert",3,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long *arg4 = 0 ;
  long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< long >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::insert",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< long >::insert",4,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_long_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_long_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'long_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long >::insert(size_t,long const &)\n"
    "    Std::StdVector< long >::insert(size_t,size_t,long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_long_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  size_t arg2 ;
  long *arg3 = 0 ;
  long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< long >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::emplace",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long >::emplace",3,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long > *arg1 = (Std::StdVector< long > *) 0 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long >::fill",1,"Std::StdVector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long >::fill",2,"long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_t,0))){
    SWIG_fail_ptr("long_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_long_t);
  }
  
  temp2=(long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_vector(void *obj) {
Std::StdVector< long > *arg1 = (Std::StdVector< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_vector_attributes[] = {
    { "vector", _wrap_long_vector_vector_get, _wrap_long_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_long_vector_methods[]= {
    { "copy", _wrap_long_vector_copy},
    { "__add", _wrap_long_vector___add},
    { "front", _wrap_long_vector_front},
    { "back", _wrap_long_vector_back},
    { "push_back", _wrap_long_vector_push_back},
    { "pop_back", _wrap_long_vector_pop_back},
    { "at", _wrap_long_vector_at},
    { "data", _wrap_long_vector_data},
    { "size", _wrap_long_vector_size},
    { "empty", _wrap_long_vector_empty},
    { "resize", _wrap_long_vector_resize},
    { "clear", _wrap_long_vector_clear},
    { "erase", _wrap_long_vector_erase},
    { "insert", _wrap_long_vector_insert},
    { "emplace", _wrap_long_vector_emplace},
    { "fill", _wrap_long_vector_fill},
    {0,0}
};
static swig_lua_method swig_long_vector_meta[] = {
    { "__add", _wrap_long_vector___add},
    {0,0}
};

static swig_lua_attribute swig_long_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_vector_Sf_SwigStatic = {
    "long_vector",
    swig_long_vector_Sf_SwigStatic_methods,
    swig_long_vector_Sf_SwigStatic_attributes,
    swig_long_vector_Sf_SwigStatic_constants,
    swig_long_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_vector_bases[] = {0};
static const char *swig_long_vector_base_names[] = {0};
static swig_lua_class _wrap_class_long_vector = { "long_vector", "long_vector", &SWIGTYPE_p_Std__StdVectorT_long_t,_proxy__wrap_new_long_vector, swig_delete_long_vector, swig_long_vector_methods, swig_long_vector_attributes, &swig_long_vector_Sf_SwigStatic, swig_long_vector_meta, swig_long_vector_bases, swig_long_vector_base_names };

static int _wrap_ulong_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  std::vector< unsigned long > *arg2 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::vector",1,"Std::StdVector< unsigned long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::vector",2,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::vector",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (std::vector< unsigned long > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::StdVector",0,0)
  result = (Std::StdVector< unsigned long > *)new Std::StdVector< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< unsigned long > *)new Std::StdVector< unsigned long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned long > *arg1 = 0 ;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::StdVector",1,"std::initializer_list< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ulong_vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_long_t);
  }
  
  result = (Std::StdVector< unsigned long > *)new Std::StdVector< unsigned long >((std::initializer_list< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = 0 ;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::StdVector",1,"std::vector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ulong_vector",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (Std::StdVector< unsigned long > *)new Std::StdVector< unsigned long >((std::vector< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = 0 ;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::StdVector",1,"Std::StdVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_ulong_vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (Std::StdVector< unsigned long > *)new Std::StdVector< unsigned long >((Std::StdVector< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ulong_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ulong_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ulong_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ulong_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ulong_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ulong_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long >::StdVector()\n"
    "    Std::StdVector< unsigned long >::StdVector(size_t)\n"
    "    Std::StdVector< unsigned long >::StdVector(std::initializer_list< unsigned long > const &)\n"
    "    Std::StdVector< unsigned long >::StdVector(std::vector< unsigned long > const &)\n"
    "    Std::StdVector< unsigned long >::StdVector(Std::StdVector< unsigned long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulong_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  Std::StdVector< unsigned long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::copy",1,"Std::StdVector< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::copy",2,"Std::StdVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  Std::StdVector< unsigned long > *arg2 = 0 ;
  Std::StdVector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::operator +",1,"Std::StdVector< unsigned long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::operator +",2,"Std::StdVector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (Std::StdVector< unsigned long > *) &(arg1)->operator +((Std::StdVector< unsigned long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::front",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (unsigned long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::back",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (unsigned long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::push_back",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::push_back",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::pop_back",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::at",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::data",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (unsigned long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::size",1,"Std::StdVector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = ((Std::StdVector< unsigned long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::empty",1,"Std::StdVector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  result = (bool)((Std::StdVector< unsigned long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::resize",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::clear",1,"Std::StdVector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::erase",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::erase",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ulong_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulong_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulong_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long >::erase(size_t)\n"
    "    Std::StdVector< unsigned long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ulong_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",3,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long *arg4 = 0 ;
  unsigned long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< unsigned long >::insert",4,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  temp4=(unsigned long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ulong_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ulong_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ulong_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long >::insert(size_t,unsigned long const &)\n"
    "    Std::StdVector< unsigned long >::insert(size_t,size_t,unsigned long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ulong_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  size_t arg2 ;
  unsigned long *arg3 = 0 ;
  unsigned long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::emplace",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long >::emplace",3,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) 0 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long >::fill",1,"Std::StdVector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long >::fill",2,"unsigned long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_vector(void *obj) {
Std::StdVector< unsigned long > *arg1 = (Std::StdVector< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_vector_attributes[] = {
    { "vector", _wrap_ulong_vector_vector_get, _wrap_ulong_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_ulong_vector_methods[]= {
    { "copy", _wrap_ulong_vector_copy},
    { "__add", _wrap_ulong_vector___add},
    { "front", _wrap_ulong_vector_front},
    { "back", _wrap_ulong_vector_back},
    { "push_back", _wrap_ulong_vector_push_back},
    { "pop_back", _wrap_ulong_vector_pop_back},
    { "at", _wrap_ulong_vector_at},
    { "data", _wrap_ulong_vector_data},
    { "size", _wrap_ulong_vector_size},
    { "empty", _wrap_ulong_vector_empty},
    { "resize", _wrap_ulong_vector_resize},
    { "clear", _wrap_ulong_vector_clear},
    { "erase", _wrap_ulong_vector_erase},
    { "insert", _wrap_ulong_vector_insert},
    { "emplace", _wrap_ulong_vector_emplace},
    { "fill", _wrap_ulong_vector_fill},
    {0,0}
};
static swig_lua_method swig_ulong_vector_meta[] = {
    { "__add", _wrap_ulong_vector___add},
    {0,0}
};

static swig_lua_attribute swig_ulong_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_vector_Sf_SwigStatic = {
    "ulong_vector",
    swig_ulong_vector_Sf_SwigStatic_methods,
    swig_ulong_vector_Sf_SwigStatic_attributes,
    swig_ulong_vector_Sf_SwigStatic_constants,
    swig_ulong_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_vector_bases[] = {0};
static const char *swig_ulong_vector_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_vector = { "ulong_vector", "ulong_vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_long_t,_proxy__wrap_new_ulong_vector, swig_delete_ulong_vector, swig_ulong_vector_methods, swig_ulong_vector_attributes, &swig_ulong_vector_Sf_SwigStatic, swig_ulong_vector_meta, swig_ulong_vector_bases, swig_ulong_vector_base_names };

static int _wrap_llong_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  std::vector< long long > *arg2 = (std::vector< long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::vector",1,"Std::StdVector< long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< long long >::vector",2,"std::vector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_vector_set",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  std::vector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::vector",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (std::vector< long long > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::StdVector",0,0)
  result = (Std::StdVector< long long > *)new Std::StdVector< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< long long >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< long long > *)new Std::StdVector< long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< long long > *arg1 = 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long long >::StdVector",1,"std::initializer_list< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_long_long_t,0))){
    SWIG_fail_ptr("new_llong_vector",1,SWIGTYPE_p_std__initializer_listT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *)new Std::StdVector< long long >((std::initializer_list< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long long >::StdVector",1,"std::vector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_llong_vector",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *)new Std::StdVector< long long >((std::vector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< long long >::StdVector",1,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("new_llong_vector",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *)new Std::StdVector< long long >((Std::StdVector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_llong_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_llong_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_llong_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_llong_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_llong_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_llong_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long long >::StdVector()\n"
    "    Std::StdVector< long long >::StdVector(size_t)\n"
    "    Std::StdVector< long long >::StdVector(std::initializer_list< long long > const &)\n"
    "    Std::StdVector< long long >::StdVector(std::vector< long long > const &)\n"
    "    Std::StdVector< long long >::StdVector(Std::StdVector< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llong_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  Std::StdVector< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::copy",1,"Std::StdVector< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< long long >::copy",2,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->copy((Std::StdVector< long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  Std::StdVector< long long > *arg2 = 0 ;
  Std::StdVector< long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::operator +",1,"Std::StdVector< long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< long long >::operator +",2,"Std::StdVector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector___add",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector___add",2,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (Std::StdVector< long long > *) &(arg1)->operator +((Std::StdVector< long long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::front",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_front",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::back",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::push_back",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::push_back",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("Std::StdVector< long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::pop_back",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::at",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_at",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::data",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_data",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::size",1,"Std::StdVector< long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_size",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = ((Std::StdVector< long long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::empty",1,"Std::StdVector< long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  result = (bool)((Std::StdVector< long long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::resize",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::clear",1,"Std::StdVector< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::erase",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::erase",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_llong_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llong_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llong_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long long >::erase(size_t)\n"
    "    Std::StdVector< long long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_llong_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::insert",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long long >::insert",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  long long *arg4 = 0 ;
  long long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::insert",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long long >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< long long >::insert",4,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_llong_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_llong_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'llong_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< long long >::insert(size_t,long long const &)\n"
    "    Std::StdVector< long long >::insert(size_t,size_t,long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_llong_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::emplace",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< long long >::emplace",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< long long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< long long >::fill",1,"Std::StdVector< long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< long long >::fill",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_long_long_t,0))){
    SWIG_fail_ptr("llong_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_vector(void *obj) {
Std::StdVector< long long > *arg1 = (Std::StdVector< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_vector_attributes[] = {
    { "vector", _wrap_llong_vector_vector_get, _wrap_llong_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_llong_vector_methods[]= {
    { "copy", _wrap_llong_vector_copy},
    { "__add", _wrap_llong_vector___add},
    { "front", _wrap_llong_vector_front},
    { "back", _wrap_llong_vector_back},
    { "push_back", _wrap_llong_vector_push_back},
    { "pop_back", _wrap_llong_vector_pop_back},
    { "at", _wrap_llong_vector_at},
    { "data", _wrap_llong_vector_data},
    { "size", _wrap_llong_vector_size},
    { "empty", _wrap_llong_vector_empty},
    { "resize", _wrap_llong_vector_resize},
    { "clear", _wrap_llong_vector_clear},
    { "erase", _wrap_llong_vector_erase},
    { "insert", _wrap_llong_vector_insert},
    { "emplace", _wrap_llong_vector_emplace},
    { "fill", _wrap_llong_vector_fill},
    {0,0}
};
static swig_lua_method swig_llong_vector_meta[] = {
    { "__add", _wrap_llong_vector___add},
    {0,0}
};

static swig_lua_attribute swig_llong_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_vector_Sf_SwigStatic = {
    "llong_vector",
    swig_llong_vector_Sf_SwigStatic_methods,
    swig_llong_vector_Sf_SwigStatic_attributes,
    swig_llong_vector_Sf_SwigStatic_constants,
    swig_llong_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_vector_bases[] = {0};
static const char *swig_llong_vector_base_names[] = {0};
static swig_lua_class _wrap_class_llong_vector = { "llong_vector", "llong_vector", &SWIGTYPE_p_Std__StdVectorT_long_long_t,_proxy__wrap_new_llong_vector, swig_delete_llong_vector, swig_llong_vector_methods, swig_llong_vector_attributes, &swig_llong_vector_Sf_SwigStatic, swig_llong_vector_meta, swig_llong_vector_bases, swig_llong_vector_base_names };

static int _wrap_ullong_vector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  std::vector< unsigned long long > *arg2 = (std::vector< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::vector",1,"Std::StdVector< unsigned long long > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::vector",2,"std::vector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_vector_set",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_vector_set",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  std::vector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::vector",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_vector_get",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (std::vector< unsigned long long > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::StdVector",0,0)
  result = (Std::StdVector< unsigned long long > *)new Std::StdVector< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::StdVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::StdVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Std::StdVector< unsigned long long > *)new Std::StdVector< unsigned long long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::initializer_list< unsigned long long > *arg1 = 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::StdVector",1,"std::initializer_list< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ullong_vector",1,SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *)new Std::StdVector< unsigned long long >((std::initializer_list< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long long > *arg1 = 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::StdVector",1,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ullong_vector",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *)new Std::StdVector< unsigned long long >((std::vector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::StdVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::StdVector",1,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_ullong_vector",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *)new Std::StdVector< unsigned long long >((Std::StdVector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ullong_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__initializer_listT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ullong_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ullong_vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ullong_vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ullong_vector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ullong_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long long >::StdVector()\n"
    "    Std::StdVector< unsigned long long >::StdVector(size_t)\n"
    "    Std::StdVector< unsigned long long >::StdVector(std::initializer_list< unsigned long long > const &)\n"
    "    Std::StdVector< unsigned long long >::StdVector(std::vector< unsigned long long > const &)\n"
    "    Std::StdVector< unsigned long long >::StdVector(Std::StdVector< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullong_vector_copy(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::copy",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::copy",2,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_copy",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_copy",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->copy((Std::StdVector< unsigned long long > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector___add(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  Std::StdVector< unsigned long long > *arg2 = 0 ;
  Std::StdVector< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::operator +",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::operator +",2,"Std::StdVector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector___add",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector___add",2,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (Std::StdVector< unsigned long long > *) &(arg1)->operator +((Std::StdVector< unsigned long long > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::front",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_front",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::back",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::push_back",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::push_back",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_push_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::pop_back",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_pop_back",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->pop_back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::at",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_at",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::data",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_data",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::size",1,"Std::StdVector< unsigned long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_size",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = ((Std::StdVector< unsigned long long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::empty",1,"Std::StdVector< unsigned long long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_empty",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  result = (bool)((Std::StdVector< unsigned long long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::resize",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_resize",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::clear",1,"Std::StdVector< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_clear",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::erase",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::erase",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long long >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_erase",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ullong_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullong_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullong_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long long >::erase(size_t)\n"
    "    Std::StdVector< unsigned long long >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_ullong_vector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",3,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(unsigned long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->insert(arg2,(unsigned long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  unsigned long long *arg4 = 0 ;
  unsigned long long temp4 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Std::StdVector< unsigned long long >::insert",4,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_insert",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4=(unsigned long long)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->insert(arg2,arg3,(unsigned long long const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ullong_vector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ullong_vector_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ullong_vector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Std::StdVector< unsigned long long >::insert(size_t,unsigned long long const &)\n"
    "    Std::StdVector< unsigned long long >::insert(size_t,size_t,unsigned long long const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ullong_vector_emplace(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  size_t arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::emplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::emplace",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::emplace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Std::StdVector< unsigned long long >::emplace",3,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_emplace",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(unsigned long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->emplace(arg2,(unsigned long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("Std::StdVector< unsigned long long >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Std::StdVector< unsigned long long >::fill",1,"Std::StdVector< unsigned long long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Std::StdVector< unsigned long long >::fill",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_vector_fill",1,SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fill((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_vector(void *obj) {
Std::StdVector< unsigned long long > *arg1 = (Std::StdVector< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_vector_attributes[] = {
    { "vector", _wrap_ullong_vector_vector_get, _wrap_ullong_vector_vector_set },
    {0,0,0}
};
static swig_lua_method swig_ullong_vector_methods[]= {
    { "copy", _wrap_ullong_vector_copy},
    { "__add", _wrap_ullong_vector___add},
    { "front", _wrap_ullong_vector_front},
    { "back", _wrap_ullong_vector_back},
    { "push_back", _wrap_ullong_vector_push_back},
    { "pop_back", _wrap_ullong_vector_pop_back},
    { "at", _wrap_ullong_vector_at},
    { "data", _wrap_ullong_vector_data},
    { "size", _wrap_ullong_vector_size},
    { "empty", _wrap_ullong_vector_empty},
    { "resize", _wrap_ullong_vector_resize},
    { "clear", _wrap_ullong_vector_clear},
    { "erase", _wrap_ullong_vector_erase},
    { "insert", _wrap_ullong_vector_insert},
    { "emplace", _wrap_ullong_vector_emplace},
    { "fill", _wrap_ullong_vector_fill},
    {0,0}
};
static swig_lua_method swig_ullong_vector_meta[] = {
    { "__add", _wrap_ullong_vector___add},
    {0,0}
};

static swig_lua_attribute swig_ullong_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_vector_Sf_SwigStatic = {
    "ullong_vector",
    swig_ullong_vector_Sf_SwigStatic_methods,
    swig_ullong_vector_Sf_SwigStatic_attributes,
    swig_ullong_vector_Sf_SwigStatic_constants,
    swig_ullong_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_vector_bases[] = {0};
static const char *swig_ullong_vector_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_vector = { "ullong_vector", "ullong_vector", &SWIGTYPE_p_Std__StdVectorT_unsigned_long_long_t,_proxy__wrap_new_ullong_vector, swig_delete_ullong_vector, swig_ullong_vector_methods, swig_ullong_vector_attributes, &swig_ullong_vector_Sf_SwigStatic, swig_ullong_vector_meta, swig_ullong_vector_bases, swig_ullong_vector_base_names };

static int _wrap_srand(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("srand",0,0)
  srand();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("randomf",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("randomf",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randomf",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)randomf(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("randomf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("randomf",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)randomf(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("randomf",0,0)
  result = (float)randomf();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_randomf__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_randomf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_randomf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randomf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randomf(float,float)\n"
    "    randomf(float)\n"
    "    randomf()\n");
  lua_error(L);return 0;
}


static int _wrap_system(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("system",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("system",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)system((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abort(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("abort",0,0)
  abort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("exit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exit",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  exit(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("exit",0,0)
  exit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_exit__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_exit__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    exit(int)\n"
    "    exit()\n");
  lua_error(L);return 0;
}


static int _wrap_getenv(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getenv",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getenv",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)getenv((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_setenv(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("setenv",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("setenv",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("setenv",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setenv",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)setenv((char const *)arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unsetenv(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("unsetenv",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("unsetenv",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)unsetenv((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_putenv(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("putenv",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("putenv",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)putenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raise(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("raise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("raise",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)raise(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TYPE_STRING", Std::TYPE_STRING)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_CHAR", Std::TYPE_CHAR)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UCHAR", Std::TYPE_UCHAR)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT8", Std::TYPE_INT8)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT8", Std::TYPE_UINT8)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT16", Std::TYPE_INT16)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT16", Std::TYPE_UINT16)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT32", Std::TYPE_INT32)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT32", Std::TYPE_UINT32)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_INT64", Std::TYPE_INT64)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_UINT64", Std::TYPE_UINT64)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_FLOAT", Std::TYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_DOUBLE", Std::TYPE_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("TYPE_VOID", Std::TYPE_VOID)},
    {SWIG_LUA_CONSTTAB_STRING("PO6_MICROS", "1000ULL")},
    {SWIG_LUA_CONSTTAB_STRING("PO6_MILLIS", "(1000ULL*1000ULL)")},
    {SWIG_LUA_CONSTTAB_STRING("PO6_SECONDS", "((1000ULL*1000ULL) *1000ULL)")},
    {SWIG_LUA_CONSTTAB_INT("BEGIN", Std::BEGIN)},
    {SWIG_LUA_CONSTTAB_INT("CURRENT", Std::CURRENT)},
    {SWIG_LUA_CONSTTAB_INT("END", Std::END)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "randint", _wrap_randint},
    { "randint64", _wrap_randint64},
    { "randchar", _wrap_randchar},
    { "randfloat", _wrap_randfloat},
    { "randdbl", _wrap_randdbl},
    { "flip", _wrap_flip},
    { "__lt", _wrap___lt},
    { "__eq", _wrap___eq},
    { "cast_double", _wrap_cast_double},
    { "cast_int", _wrap_cast_int},
    { "cast_uint", _wrap_cast_uint},
    { "cast_int64", _wrap_cast_int64},
    { "cast_uint64", _wrap_cast_uint64},
    { "cast_string", _wrap_cast_string},
    { "cast_bool", _wrap_cast_bool},
    { "cast_array", _wrap_cast_array},
    { "strerror", _wrap_strerror},
    { "strerrno", _wrap_strerrno},
    { "basename", _wrap_basename},
    { "dirname", _wrap_dirname},
    { "realpath", _wrap_realpath},
    { "join", _wrap_join},
    { "time", _wrap_time},
    { "monotonic_time", _wrap_monotonic_time},
    { "wallclock_time", _wrap_wallclock_time},
    { "sleep", _wrap_sleep},
    { "ipaddr_ANY", _wrap_ipaddr_ANY},
    { "ipaddr_hash", _wrap_ipaddr_hash},
    { "location_hash", _wrap_location_hash},
    { "srand", _wrap_srand},
    { "randomf", _wrap_randomf},
    { "system", _wrap_system},
    { "abort", _wrap_abort},
    { "exit", _wrap_exit},
    { "getenv", _wrap_getenv},
    { "setenv", _wrap_setenv},
    { "unsetenv", _wrap_unsetenv},
    { "putenv", _wrap_putenv},
    { "raise", _wrap_raise},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_StdObject,
&_wrap_class_StdRandom,
&_wrap_class_StdRandomUniform,
&_wrap_class_StdRandomUniform64,
&_wrap_class_StdBitVector,
&_wrap_class_StdString,
&_wrap_class_StdStringMap,
&_wrap_class_Anything,
&_wrap_class_BasicType,
&_wrap_class_SeparatorParams,
&_wrap_class_LabelParameters,
&_wrap_class_LineReaderParams,
&_wrap_class_StdCsvDocument,
&_wrap_class_JSONValue,
&_wrap_class_JSONDouble,
&_wrap_class_JSONInt,
&_wrap_class_JSONUInt,
&_wrap_class_JSONInt64,
&_wrap_class_JSONUInt64,
&_wrap_class_JSONString,
&_wrap_class_JSONBool,
&_wrap_class_JSONArray,
&_wrap_class_JSON,
&_wrap_class_Path,
&_wrap_class_DirEntry,
&_wrap_class_FileStatus,
&_wrap_class_FileSystem,
&_wrap_class_fd,
&_wrap_class_mmap,
&_wrap_class_mutex,
&_wrap_class_hold,
&_wrap_class_rwlock,
&_wrap_class_rdhold,
&_wrap_class_wrhold,
&_wrap_class_cond,
&_wrap_class_barrier,
&_wrap_class_thread,
&_wrap_class_ipaddr,
&_wrap_class_location,
&_wrap_class_hostname,
&_wrap_class_socket,
&_wrap_class_GNUPlot,
&_wrap_class_RandomBase,
&_wrap_class_RandomMinStd,
&_wrap_class_RandomMersenne,
&_wrap_class_RandomMersenne64,
&_wrap_class_RandomRanLux24,
&_wrap_class_RandomRanLux48,
&_wrap_class_RandomKnuth,
&_wrap_class_Dir,
&_wrap_class_Glob,
&_wrap_class_StdFile,
&_wrap_class_BinaryFileWriter,
&_wrap_class_BinaryFileReader,
&_wrap_class_BitArray,
&_wrap_class_lua_vector,
&_wrap_class_string_vector,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_char_vector,
&_wrap_class_uchar_vector,
&_wrap_class_short_vector,
&_wrap_class_ushort_vector,
&_wrap_class_int_vector,
&_wrap_class_uint_vector,
&_wrap_class_long_vector,
&_wrap_class_ulong_vector,
&_wrap_class_llong_vector,
&_wrap_class_ullong_vector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Std",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Std__socketTo_p_Std__fd(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::fd *)  ((Std::socket *) x));
}
static void *_p_Std__JSONUIntTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONUInt *) x));
}
static void *_p_Std__RandomMinStdTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomMinStd *) x));
}
static void *_p_Std__JSONDoubleTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONDouble *) x));
}
static void *_p_Std__JSONValueTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::JSONValue *) x));
}
static void *_p_Std__RandomBaseTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::RandomBase *) x));
}
static void *_p_Std__JSONBoolTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONBool *) x));
}
static void *_p_Std__JSONInt64To_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONInt64 *) x));
}
static void *_p_Std__RandomKnuthTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomKnuth *) x));
}
static void *_p_Std__JSONUInt64To_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONUInt64 *) x));
}
static void *_p_Std__BitArrayTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::BitArray *) x));
}
static void *_p_Std__JSONArrayTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONArray *) x));
}
static void *_p_Std__StdFileTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::StdFile *) x));
}
static void *_p_Std__BinaryFileWriterTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::StdFile *) ((Std::BinaryFileWriter *) x));
}
static void *_p_Std__RandomRanLux24To_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomRanLux24 *) x));
}
static void *_p_Std__RandomRanLux48To_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomRanLux48 *) x));
}
static void *_p_Std__JSONStringTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONString *) x));
}
static void *_p_Std__BinaryFileReaderTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::StdFile *) ((Std::BinaryFileReader *) x));
}
static void *_p_Std__RandomMersenneTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomMersenne *) x));
}
static void *_p_Std__RandomMersenne64To_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::RandomBase *) ((Std::RandomMersenne64 *) x));
}
static void *_p_Std__BasicTypeTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *)  ((Std::BasicType *) x));
}
static void *_p_Std__JSONIntTo_p_Std__StdObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdObject *) (Std::JSONValue *) ((Std::JSONInt *) x));
}
static void *_p_Std__JSONIntTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONInt *) x));
}
static void *_p_Std__JSONInt64To_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONInt64 *) x));
}
static void *_p_Std__JSONBoolTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONBool *) x));
}
static void *_p_Std__JSONDoubleTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONDouble *) x));
}
static void *_p_Std__JSONUIntTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONUInt *) x));
}
static void *_p_Std__JSONStringTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONString *) x));
}
static void *_p_Std__JSONUInt64To_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONUInt64 *) x));
}
static void *_p_Std__JSONArrayTo_p_Std__JSONValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::JSONValue *)  ((Std::JSONArray *) x));
}
static void *_p_Std__RandomMersenneTo_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomMersenne *) x));
}
static void *_p_Std__RandomMersenne64To_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomMersenne64 *) x));
}
static void *_p_Std__RandomRanLux48To_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomRanLux48 *) x));
}
static void *_p_Std__RandomRanLux24To_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomRanLux24 *) x));
}
static void *_p_Std__RandomMinStdTo_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomMinStd *) x));
}
static void *_p_Std__RandomKnuthTo_p_Std__RandomBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::RandomBase *)  ((Std::RandomKnuth *) x));
}
static void *_p_Std__BinaryFileWriterTo_p_Std__StdFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdFile *)  ((Std::BinaryFileWriter *) x));
}
static void *_p_Std__BinaryFileReaderTo_p_Std__StdFile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Std::StdFile *)  ((Std::BinaryFileReader *) x));
}
static swig_type_info _swigt__p_DIR = {"_p_DIR", "DIR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Int64 = {"_p_Int64", "Int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Reader = {"_p_Reader", "Reader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Std__Anything = {"_p_Std__Anything", "Std::Anything *", 0, 0, (void*)&_wrap_class_Anything, 0};
static swig_type_info _swigt__p_Std__BasicType = {"_p_Std__BasicType", "Std::BasicType *", 0, 0, (void*)&_wrap_class_BasicType, 0};
static swig_type_info _swigt__p_Std__BinaryFileReader = {"_p_Std__BinaryFileReader", "Std::BinaryFileReader *", 0, 0, (void*)&_wrap_class_BinaryFileReader, 0};
static swig_type_info _swigt__p_Std__BinaryFileWriter = {"_p_Std__BinaryFileWriter", "Std::BinaryFileWriter *", 0, 0, (void*)&_wrap_class_BinaryFileWriter, 0};
static swig_type_info _swigt__p_Std__BitArray = {"_p_Std__BitArray", "Std::BitArray *", 0, 0, (void*)&_wrap_class_BitArray, 0};
static swig_type_info _swigt__p_Std__Dir = {"_p_Std__Dir", "Std::Dir *", 0, 0, (void*)&_wrap_class_Dir, 0};
static swig_type_info _swigt__p_Std__DirEntry = {"_p_Std__DirEntry", "Std::DirEntry *", 0, 0, (void*)&_wrap_class_DirEntry, 0};
static swig_type_info _swigt__p_Std__FileStatus = {"_p_Std__FileStatus", "Std::FileStatus *", 0, 0, (void*)&_wrap_class_FileStatus, 0};
static swig_type_info _swigt__p_Std__FileSystem = {"_p_Std__FileSystem", "Std::FileSystem *", 0, 0, (void*)&_wrap_class_FileSystem, 0};
static swig_type_info _swigt__p_Std__GNUPlot = {"_p_Std__GNUPlot", "Std::GNUPlot *", 0, 0, (void*)&_wrap_class_GNUPlot, 0};
static swig_type_info _swigt__p_Std__Glob = {"_p_Std__Glob", "Std::Glob *", 0, 0, (void*)&_wrap_class_Glob, 0};
static swig_type_info _swigt__p_Std__JSON = {"_p_Std__JSON", "Std::JSON *", 0, 0, (void*)&_wrap_class_JSON, 0};
static swig_type_info _swigt__p_Std__JSONArray = {"_p_Std__JSONArray", "Std::JSONArray *", 0, 0, (void*)&_wrap_class_JSONArray, 0};
static swig_type_info _swigt__p_Std__JSONBool = {"_p_Std__JSONBool", "Std::JSONBool *", 0, 0, (void*)&_wrap_class_JSONBool, 0};
static swig_type_info _swigt__p_Std__JSONDouble = {"_p_Std__JSONDouble", "Std::JSONDouble *", 0, 0, (void*)&_wrap_class_JSONDouble, 0};
static swig_type_info _swigt__p_Std__JSONInt = {"_p_Std__JSONInt", "Std::JSONInt *", 0, 0, (void*)&_wrap_class_JSONInt, 0};
static swig_type_info _swigt__p_Std__JSONInt64 = {"_p_Std__JSONInt64", "Std::JSONInt64 *", 0, 0, (void*)&_wrap_class_JSONInt64, 0};
static swig_type_info _swigt__p_Std__JSONString = {"_p_Std__JSONString", "Std::JSONString *", 0, 0, (void*)&_wrap_class_JSONString, 0};
static swig_type_info _swigt__p_Std__JSONUInt = {"_p_Std__JSONUInt", "Std::JSONUInt *", 0, 0, (void*)&_wrap_class_JSONUInt, 0};
static swig_type_info _swigt__p_Std__JSONUInt64 = {"_p_Std__JSONUInt64", "Std::JSONUInt64 *", 0, 0, (void*)&_wrap_class_JSONUInt64, 0};
static swig_type_info _swigt__p_Std__JSONValue = {"_p_Std__JSONValue", "Std::JSONValue *", 0, 0, (void*)&_wrap_class_JSONValue, 0};
static swig_type_info _swigt__p_Std__LabelParameters = {"_p_Std__LabelParameters", "Std::LabelParameters *", 0, 0, (void*)&_wrap_class_LabelParameters, 0};
static swig_type_info _swigt__p_Std__LineReaderParams = {"_p_Std__LineReaderParams", "Std::LineReaderParams *", 0, 0, (void*)&_wrap_class_LineReaderParams, 0};
static swig_type_info _swigt__p_Std__Path = {"_p_Std__Path", "Std::Path *", 0, 0, (void*)&_wrap_class_Path, 0};
static swig_type_info _swigt__p_Std__RandomBase = {"_p_Std__RandomBase", "Std::RandomBase *", 0, 0, (void*)&_wrap_class_RandomBase, 0};
static swig_type_info _swigt__p_Std__RandomKnuth = {"_p_Std__RandomKnuth", "Std::RandomKnuth *", 0, 0, (void*)&_wrap_class_RandomKnuth, 0};
static swig_type_info _swigt__p_Std__RandomMersenne = {"_p_Std__RandomMersenne", "Std::RandomMersenne *", 0, 0, (void*)&_wrap_class_RandomMersenne, 0};
static swig_type_info _swigt__p_Std__RandomMersenne64 = {"_p_Std__RandomMersenne64", "Std::RandomMersenne64 *", 0, 0, (void*)&_wrap_class_RandomMersenne64, 0};
static swig_type_info _swigt__p_Std__RandomMinStd = {"_p_Std__RandomMinStd", "Std::RandomMinStd *", 0, 0, (void*)&_wrap_class_RandomMinStd, 0};
static swig_type_info _swigt__p_Std__RandomRanLux24 = {"_p_Std__RandomRanLux24", "Std::RandomRanLux24 *", 0, 0, (void*)&_wrap_class_RandomRanLux24, 0};
static swig_type_info _swigt__p_Std__RandomRanLux48 = {"_p_Std__RandomRanLux48", "Std::RandomRanLux48 *", 0, 0, (void*)&_wrap_class_RandomRanLux48, 0};
static swig_type_info _swigt__p_Std__SeparatorParams = {"_p_Std__SeparatorParams", "Std::SeparatorParams *", 0, 0, (void*)&_wrap_class_SeparatorParams, 0};
static swig_type_info _swigt__p_Std__StdBitVector = {"_p_Std__StdBitVector", "Std::StdBitVector *", 0, 0, (void*)&_wrap_class_StdBitVector, 0};
static swig_type_info _swigt__p_Std__StdCsvDocument = {"_p_Std__StdCsvDocument", "Std::StdCsvDocument *", 0, 0, (void*)&_wrap_class_StdCsvDocument, 0};
static swig_type_info _swigt__p_Std__StdFile = {"_p_Std__StdFile", "Std::StdFile *", 0, 0, (void*)&_wrap_class_StdFile, 0};
static swig_type_info _swigt__p_Std__StdObject = {"_p_Std__StdObject", "Std::StdObject *", 0, 0, (void*)&_wrap_class_StdObject, 0};
static swig_type_info _swigt__p_Std__StdRandom = {"_p_Std__StdRandom", "Std::StdRandom *", 0, 0, (void*)&_wrap_class_StdRandom, 0};
static swig_type_info _swigt__p_Std__StdRandomUniform = {"_p_Std__StdRandomUniform", "Std::StdRandomUniform *", 0, 0, (void*)&_wrap_class_StdRandomUniform, 0};
static swig_type_info _swigt__p_Std__StdRandomUniform64 = {"_p_Std__StdRandomUniform64", "Std::StdRandomUniform64 *", 0, 0, (void*)&_wrap_class_StdRandomUniform64, 0};
static swig_type_info _swigt__p_Std__StdString = {"_p_Std__StdString", "Std::StdString *", 0, 0, (void*)&_wrap_class_StdString, 0};
static swig_type_info _swigt__p_Std__StdStringMap = {"_p_Std__StdStringMap", "Std::StdStringMap *", 0, 0, (void*)&_wrap_class_StdStringMap, 0};
static swig_type_info _swigt__p_Std__StdVectorT_SWIGLUA_REF_t = {"_p_Std__StdVectorT_SWIGLUA_REF_t", "Std::StdVector< SWIGLUA_REF > *", 0, 0, (void*)&_wrap_class_lua_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_Std__StdString_t = {"_p_Std__StdVectorT_Std__StdString_t", "Std::StdVector< Std::StdString > *", 0, 0, (void*)&_wrap_class_string_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_double_t = {"_p_Std__StdVectorT_double_t", "Std::StdVector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_float_t = {"_p_Std__StdVectorT_float_t", "Std::StdVector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_int_t = {"_p_Std__StdVectorT_int_t", "Std::StdVector< int > *", 0, 0, (void*)&_wrap_class_int_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_long_long_t = {"_p_Std__StdVectorT_long_long_t", "Std::StdVector< long long > *", 0, 0, (void*)&_wrap_class_llong_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_long_t = {"_p_Std__StdVectorT_long_t", "Std::StdVector< long > *", 0, 0, (void*)&_wrap_class_long_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_short_t = {"_p_Std__StdVectorT_short_t", "Std::StdVector< short > *", 0, 0, (void*)&_wrap_class_short_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_signed_char_t = {"_p_Std__StdVectorT_signed_char_t", "Std::StdVector< signed char > *", 0, 0, (void*)&_wrap_class_char_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_char_t = {"_p_Std__StdVectorT_unsigned_char_t", "Std::StdVector< unsigned char > *", 0, 0, (void*)&_wrap_class_uchar_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_int_t = {"_p_Std__StdVectorT_unsigned_int_t", "Std::StdVector< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_long_long_t = {"_p_Std__StdVectorT_unsigned_long_long_t", "Std::StdVector< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_long_t = {"_p_Std__StdVectorT_unsigned_long_t", "Std::StdVector< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_vector, 0};
static swig_type_info _swigt__p_Std__StdVectorT_unsigned_short_t = {"_p_Std__StdVectorT_unsigned_short_t", "Std::StdVector< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_vector, 0};
static swig_type_info _swigt__p_Std__barrier = {"_p_Std__barrier", "Std::barrier *", 0, 0, (void*)&_wrap_class_barrier, 0};
static swig_type_info _swigt__p_Std__cond = {"_p_Std__cond", "Std::cond *", 0, 0, (void*)&_wrap_class_cond, 0};
static swig_type_info _swigt__p_Std__fd = {"_p_Std__fd", "Std::fd *", 0, 0, (void*)&_wrap_class_fd, 0};
static swig_type_info _swigt__p_Std__hold = {"_p_Std__hold", "Std::hold *", 0, 0, (void*)&_wrap_class_hold, 0};
static swig_type_info _swigt__p_Std__hostname = {"_p_Std__hostname", "Std::hostname *", 0, 0, (void*)&_wrap_class_hostname, 0};
static swig_type_info _swigt__p_Std__ipaddr = {"_p_Std__ipaddr", "Std::ipaddr *", 0, 0, (void*)&_wrap_class_ipaddr, 0};
static swig_type_info _swigt__p_Std__location = {"_p_Std__location", "Std::location *", 0, 0, (void*)&_wrap_class_location, 0};
static swig_type_info _swigt__p_Std__mmap = {"_p_Std__mmap", "Std::mmap *", 0, 0, (void*)&_wrap_class_mmap, 0};
static swig_type_info _swigt__p_Std__mutex = {"_p_Std__mutex", "Std::mutex *", 0, 0, (void*)&_wrap_class_mutex, 0};
static swig_type_info _swigt__p_Std__rdhold = {"_p_Std__rdhold", "Std::rdhold *", 0, 0, (void*)&_wrap_class_rdhold, 0};
static swig_type_info _swigt__p_Std__rwlock = {"_p_Std__rwlock", "Std::rwlock *", 0, 0, (void*)&_wrap_class_rwlock, 0};
static swig_type_info _swigt__p_Std__socket = {"_p_Std__socket", "Std::socket *", 0, 0, (void*)&_wrap_class_socket, 0};
static swig_type_info _swigt__p_Std__thread = {"_p_Std__thread", "Std::thread *", 0, 0, (void*)&_wrap_class_thread, 0};
static swig_type_info _swigt__p_Std__wrhold = {"_p_Std__wrhold", "Std::wrhold *", 0, 0, (void*)&_wrap_class_wrhold, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dirent = {"_p_dirent", "dirent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gnuplot_ctrl = {"_p_gnuplot_ctrl", "gnuplot_ctrl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_in6_addr = {"_p_in6_addr", "in6_addr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_in_addr = {"_p_in_addr", "in_addr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_in_addr_t = {"_p_in_addr_t", "in_addr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_in_port_t = {"_p_in_port_t", "in_port_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "i64_t *|int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_t = {"_p_off_t", "off_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rapidcsv__Document = {"_p_rapidcsv__Document", "rapidcsv::Document *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rapidcsv__LabelParams = {"_p_rapidcsv__LabelParams", "rapidcsv::LabelParams *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rapidcsv__LineReaderParams = {"_p_rapidcsv__LineReaderParams", "rapidcsv::LineReaderParams *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rapidcsv__SeparatorParams = {"_p_rapidcsv__SeparatorParams", "rapidcsv::SeparatorParams *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sockaddr = {"_p_sockaddr", "sockaddr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sockaddr_in = {"_p_sockaddr_in", "sockaddr_in *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sockaddr_in6 = {"_p_sockaddr_in6", "sockaddr_in6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_socklen_t = {"_p_socklen_t", "socklen_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__filesystem__directory_entry = {"_p_std__filesystem__directory_entry", "std::filesystem::directory_entry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__filesystem__file_status = {"_p_std__filesystem__file_status", "std::filesystem::file_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvoidF_t = {"_p_std__functionT_void_fvoidF_t", "std::function< void (void) > *|Std::function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_SWIGLUA_REF_t = {"_p_std__initializer_listT_SWIGLUA_REF_t", "std::initializer_list< SWIGLUA_REF > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_Std__StdString_t = {"_p_std__initializer_listT_Std__StdString_t", "std::initializer_list< Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_double_t = {"_p_std__initializer_listT_double_t", "std::initializer_list< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_float_t = {"_p_std__initializer_listT_float_t", "std::initializer_list< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_int_t = {"_p_std__initializer_listT_int_t", "std::initializer_list< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_long_long_t = {"_p_std__initializer_listT_long_long_t", "std::initializer_list< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_long_t = {"_p_std__initializer_listT_long_t", "std::initializer_list< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_short_t = {"_p_std__initializer_listT_short_t", "std::initializer_list< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_signed_char_t = {"_p_std__initializer_listT_signed_char_t", "std::initializer_list< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_char_t = {"_p_std__initializer_listT_unsigned_char_t", "std::initializer_list< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_int_t = {"_p_std__initializer_listT_unsigned_int_t", "std::initializer_list< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_long_long_t = {"_p_std__initializer_listT_unsigned_long_long_t", "std::initializer_list< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_long_t = {"_p_std__initializer_listT_unsigned_long_t", "std::initializer_list< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_unsigned_short_t = {"_p_std__initializer_listT_unsigned_short_t", "std::initializer_list< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_Std__StdString_Std__StdString_t = {"_p_std__mapT_Std__StdString_Std__StdString_t", "std::map< Std::StdString,Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_SWIGLUA_REF_t = {"_p_std__vectorT_SWIGLUA_REF_t", "std::vector< SWIGLUA_REF > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Std__StdString_t = {"_p_std__vectorT_Std__StdString_t", "std::vector< Std::StdString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t = {"_p_std__vectorT_char_t", "std::vector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int32_t > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_double_t = {"_p_std__vectorT_long_double_t", "std::vector< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *|std::vector< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< int16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< int8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< uint32_t > *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_t = {"_p_std__vectorT_unsigned_long_long_t", "std::vector< unsigned long long > *|std::vector< uint64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< uint16_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "u64_t *|uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DIR,
  &_swigt__p_Int64,
  &_swigt__p_Reader,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_Std__Anything,
  &_swigt__p_Std__BasicType,
  &_swigt__p_Std__BinaryFileReader,
  &_swigt__p_Std__BinaryFileWriter,
  &_swigt__p_Std__BitArray,
  &_swigt__p_Std__Dir,
  &_swigt__p_Std__DirEntry,
  &_swigt__p_Std__FileStatus,
  &_swigt__p_Std__FileSystem,
  &_swigt__p_Std__GNUPlot,
  &_swigt__p_Std__Glob,
  &_swigt__p_Std__JSON,
  &_swigt__p_Std__JSONArray,
  &_swigt__p_Std__JSONBool,
  &_swigt__p_Std__JSONDouble,
  &_swigt__p_Std__JSONInt,
  &_swigt__p_Std__JSONInt64,
  &_swigt__p_Std__JSONString,
  &_swigt__p_Std__JSONUInt,
  &_swigt__p_Std__JSONUInt64,
  &_swigt__p_Std__JSONValue,
  &_swigt__p_Std__LabelParameters,
  &_swigt__p_Std__LineReaderParams,
  &_swigt__p_Std__Path,
  &_swigt__p_Std__RandomBase,
  &_swigt__p_Std__RandomKnuth,
  &_swigt__p_Std__RandomMersenne,
  &_swigt__p_Std__RandomMersenne64,
  &_swigt__p_Std__RandomMinStd,
  &_swigt__p_Std__RandomRanLux24,
  &_swigt__p_Std__RandomRanLux48,
  &_swigt__p_Std__SeparatorParams,
  &_swigt__p_Std__StdBitVector,
  &_swigt__p_Std__StdCsvDocument,
  &_swigt__p_Std__StdFile,
  &_swigt__p_Std__StdObject,
  &_swigt__p_Std__StdRandom,
  &_swigt__p_Std__StdRandomUniform,
  &_swigt__p_Std__StdRandomUniform64,
  &_swigt__p_Std__StdString,
  &_swigt__p_Std__StdStringMap,
  &_swigt__p_Std__StdVectorT_SWIGLUA_REF_t,
  &_swigt__p_Std__StdVectorT_Std__StdString_t,
  &_swigt__p_Std__StdVectorT_double_t,
  &_swigt__p_Std__StdVectorT_float_t,
  &_swigt__p_Std__StdVectorT_int_t,
  &_swigt__p_Std__StdVectorT_long_long_t,
  &_swigt__p_Std__StdVectorT_long_t,
  &_swigt__p_Std__StdVectorT_short_t,
  &_swigt__p_Std__StdVectorT_signed_char_t,
  &_swigt__p_Std__StdVectorT_unsigned_char_t,
  &_swigt__p_Std__StdVectorT_unsigned_int_t,
  &_swigt__p_Std__StdVectorT_unsigned_long_long_t,
  &_swigt__p_Std__StdVectorT_unsigned_long_t,
  &_swigt__p_Std__StdVectorT_unsigned_short_t,
  &_swigt__p_Std__barrier,
  &_swigt__p_Std__cond,
  &_swigt__p_Std__fd,
  &_swigt__p_Std__hold,
  &_swigt__p_Std__hostname,
  &_swigt__p_Std__ipaddr,
  &_swigt__p_Std__location,
  &_swigt__p_Std__mmap,
  &_swigt__p_Std__mutex,
  &_swigt__p_Std__rdhold,
  &_swigt__p_Std__rwlock,
  &_swigt__p_Std__socket,
  &_swigt__p_Std__thread,
  &_swigt__p_Std__wrhold,
  &_swigt__p_Value,
  &_swigt__p_ValueType,
  &_swigt__p_dirent,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_gnuplot_ctrl,
  &_swigt__p_in6_addr,
  &_swigt__p_in_addr,
  &_swigt__p_in_addr_t,
  &_swigt__p_in_port_t,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_off_t,
  &_swigt__p_rapidcsv__Document,
  &_swigt__p_rapidcsv__LabelParams,
  &_swigt__p_rapidcsv__LineReaderParams,
  &_swigt__p_rapidcsv__SeparatorParams,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_sockaddr,
  &_swigt__p_sockaddr_in,
  &_swigt__p_sockaddr_in6,
  &_swigt__p_socklen_t,
  &_swigt__p_ssize_t,
  &_swigt__p_std__filesystem__directory_entry,
  &_swigt__p_std__filesystem__file_status,
  &_swigt__p_std__functionT_void_fvoidF_t,
  &_swigt__p_std__initializer_listT_SWIGLUA_REF_t,
  &_swigt__p_std__initializer_listT_Std__StdString_t,
  &_swigt__p_std__initializer_listT_double_t,
  &_swigt__p_std__initializer_listT_float_t,
  &_swigt__p_std__initializer_listT_int_t,
  &_swigt__p_std__initializer_listT_long_long_t,
  &_swigt__p_std__initializer_listT_long_t,
  &_swigt__p_std__initializer_listT_short_t,
  &_swigt__p_std__initializer_listT_signed_char_t,
  &_swigt__p_std__initializer_listT_unsigned_char_t,
  &_swigt__p_std__initializer_listT_unsigned_int_t,
  &_swigt__p_std__initializer_listT_unsigned_long_long_t,
  &_swigt__p_std__initializer_listT_unsigned_long_t,
  &_swigt__p_std__initializer_listT_unsigned_short_t,
  &_swigt__p_std__mapT_Std__StdString_Std__StdString_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_SWIGLUA_REF_t,
  &_swigt__p_std__vectorT_Std__StdString_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_char_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_double_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_long_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_DIR[] = {  {&_swigt__p_DIR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Int64[] = {  {&_swigt__p_Int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Reader[] = {  {&_swigt__p_Reader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__Anything[] = {  {&_swigt__p_Std__Anything, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__BasicType[] = {  {&_swigt__p_Std__BasicType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__BinaryFileReader[] = {  {&_swigt__p_Std__BinaryFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__BinaryFileWriter[] = {  {&_swigt__p_Std__BinaryFileWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__BitArray[] = {  {&_swigt__p_Std__BitArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__Dir[] = {  {&_swigt__p_Std__Dir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__DirEntry[] = {  {&_swigt__p_Std__DirEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__FileStatus[] = {  {&_swigt__p_Std__FileStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__FileSystem[] = {  {&_swigt__p_Std__FileSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__GNUPlot[] = {  {&_swigt__p_Std__GNUPlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__Glob[] = {  {&_swigt__p_Std__Glob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSON[] = {  {&_swigt__p_Std__JSON, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONArray[] = {  {&_swigt__p_Std__JSONArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONBool[] = {  {&_swigt__p_Std__JSONBool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONDouble[] = {  {&_swigt__p_Std__JSONDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONInt[] = {  {&_swigt__p_Std__JSONInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONInt64[] = {  {&_swigt__p_Std__JSONInt64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONString[] = {  {&_swigt__p_Std__JSONString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONUInt[] = {  {&_swigt__p_Std__JSONUInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONUInt64[] = {  {&_swigt__p_Std__JSONUInt64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__JSONValue[] = {  {&_swigt__p_Std__JSONInt, _p_Std__JSONIntTo_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONInt64, _p_Std__JSONInt64To_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONBool, _p_Std__JSONBoolTo_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONValue, 0, 0, 0},  {&_swigt__p_Std__JSONDouble, _p_Std__JSONDoubleTo_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONUInt, _p_Std__JSONUIntTo_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONString, _p_Std__JSONStringTo_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONUInt64, _p_Std__JSONUInt64To_p_Std__JSONValue, 0, 0},  {&_swigt__p_Std__JSONArray, _p_Std__JSONArrayTo_p_Std__JSONValue, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__LabelParameters[] = {  {&_swigt__p_Std__LabelParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__LineReaderParams[] = {  {&_swigt__p_Std__LineReaderParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__Path[] = {  {&_swigt__p_Std__Path, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomBase[] = {  {&_swigt__p_Std__RandomBase, 0, 0, 0},  {&_swigt__p_Std__RandomMersenne, _p_Std__RandomMersenneTo_p_Std__RandomBase, 0, 0},  {&_swigt__p_Std__RandomMersenne64, _p_Std__RandomMersenne64To_p_Std__RandomBase, 0, 0},  {&_swigt__p_Std__RandomRanLux48, _p_Std__RandomRanLux48To_p_Std__RandomBase, 0, 0},  {&_swigt__p_Std__RandomRanLux24, _p_Std__RandomRanLux24To_p_Std__RandomBase, 0, 0},  {&_swigt__p_Std__RandomMinStd, _p_Std__RandomMinStdTo_p_Std__RandomBase, 0, 0},  {&_swigt__p_Std__RandomKnuth, _p_Std__RandomKnuthTo_p_Std__RandomBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomKnuth[] = {  {&_swigt__p_Std__RandomKnuth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomMersenne[] = {  {&_swigt__p_Std__RandomMersenne, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomMersenne64[] = {  {&_swigt__p_Std__RandomMersenne64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomMinStd[] = {  {&_swigt__p_Std__RandomMinStd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomRanLux24[] = {  {&_swigt__p_Std__RandomRanLux24, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomRanLux48[] = {  {&_swigt__p_Std__RandomRanLux48, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__SeparatorParams[] = {  {&_swigt__p_Std__SeparatorParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdBitVector[] = {  {&_swigt__p_Std__StdBitVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdCsvDocument[] = {  {&_swigt__p_Std__StdCsvDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdFile[] = {  {&_swigt__p_Std__StdFile, 0, 0, 0},  {&_swigt__p_Std__BinaryFileWriter, _p_Std__BinaryFileWriterTo_p_Std__StdFile, 0, 0},  {&_swigt__p_Std__BinaryFileReader, _p_Std__BinaryFileReaderTo_p_Std__StdFile, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdObject[] = {  {&_swigt__p_Std__JSONUInt, _p_Std__JSONUIntTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__StdObject, 0, 0, 0},  {&_swigt__p_Std__RandomMinStd, _p_Std__RandomMinStdTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONDouble, _p_Std__JSONDoubleTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONValue, _p_Std__JSONValueTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomBase, _p_Std__RandomBaseTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONBool, _p_Std__JSONBoolTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONInt64, _p_Std__JSONInt64To_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomKnuth, _p_Std__RandomKnuthTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONUInt64, _p_Std__JSONUInt64To_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__BitArray, _p_Std__BitArrayTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONArray, _p_Std__JSONArrayTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__BinaryFileWriter, _p_Std__BinaryFileWriterTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__StdFile, _p_Std__StdFileTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomRanLux48, _p_Std__RandomRanLux48To_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomRanLux24, _p_Std__RandomRanLux24To_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONString, _p_Std__JSONStringTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__BinaryFileReader, _p_Std__BinaryFileReaderTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomMersenne, _p_Std__RandomMersenneTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__RandomMersenne64, _p_Std__RandomMersenne64To_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__JSONInt, _p_Std__JSONIntTo_p_Std__StdObject, 0, 0},  {&_swigt__p_Std__BasicType, _p_Std__BasicTypeTo_p_Std__StdObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandom[] = {  {&_swigt__p_Std__StdRandom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandomUniform[] = {  {&_swigt__p_Std__StdRandomUniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdRandomUniform64[] = {  {&_swigt__p_Std__StdRandomUniform64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdString[] = {  {&_swigt__p_Std__StdString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdStringMap[] = {  {&_swigt__p_Std__StdStringMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_SWIGLUA_REF_t[] = {  {&_swigt__p_Std__StdVectorT_SWIGLUA_REF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_Std__StdString_t[] = {  {&_swigt__p_Std__StdVectorT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_double_t[] = {  {&_swigt__p_Std__StdVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_float_t[] = {  {&_swigt__p_Std__StdVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_int_t[] = {  {&_swigt__p_Std__StdVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_long_long_t[] = {  {&_swigt__p_Std__StdVectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_long_t[] = {  {&_swigt__p_Std__StdVectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_short_t[] = {  {&_swigt__p_Std__StdVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_signed_char_t[] = {  {&_swigt__p_Std__StdVectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_char_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_int_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_long_long_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_long_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__StdVectorT_unsigned_short_t[] = {  {&_swigt__p_Std__StdVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__barrier[] = {  {&_swigt__p_Std__barrier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__cond[] = {  {&_swigt__p_Std__cond, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__fd[] = {  {&_swigt__p_Std__fd, 0, 0, 0},  {&_swigt__p_Std__socket, _p_Std__socketTo_p_Std__fd, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__hold[] = {  {&_swigt__p_Std__hold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__hostname[] = {  {&_swigt__p_Std__hostname, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__ipaddr[] = {  {&_swigt__p_Std__ipaddr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__location[] = {  {&_swigt__p_Std__location, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__mmap[] = {  {&_swigt__p_Std__mmap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__mutex[] = {  {&_swigt__p_Std__mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__rdhold[] = {  {&_swigt__p_Std__rdhold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__rwlock[] = {  {&_swigt__p_Std__rwlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__socket[] = {  {&_swigt__p_Std__socket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__thread[] = {  {&_swigt__p_Std__thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__wrhold[] = {  {&_swigt__p_Std__wrhold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dirent[] = {  {&_swigt__p_dirent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gnuplot_ctrl[] = {  {&_swigt__p_gnuplot_ctrl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_in6_addr[] = {  {&_swigt__p_in6_addr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_in_addr[] = {  {&_swigt__p_in_addr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_in_addr_t[] = {  {&_swigt__p_in_addr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_in_port_t[] = {  {&_swigt__p_in_port_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_t[] = {  {&_swigt__p_off_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rapidcsv__Document[] = {  {&_swigt__p_rapidcsv__Document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rapidcsv__LabelParams[] = {  {&_swigt__p_rapidcsv__LabelParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rapidcsv__LineReaderParams[] = {  {&_swigt__p_rapidcsv__LineReaderParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rapidcsv__SeparatorParams[] = {  {&_swigt__p_rapidcsv__SeparatorParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sockaddr[] = {  {&_swigt__p_sockaddr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sockaddr_in[] = {  {&_swigt__p_sockaddr_in, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sockaddr_in6[] = {  {&_swigt__p_sockaddr_in6, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_socklen_t[] = {  {&_swigt__p_socklen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__filesystem__directory_entry[] = {  {&_swigt__p_std__filesystem__directory_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__filesystem__file_status[] = {  {&_swigt__p_std__filesystem__file_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvoidF_t[] = {  {&_swigt__p_std__functionT_void_fvoidF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_SWIGLUA_REF_t[] = {  {&_swigt__p_std__initializer_listT_SWIGLUA_REF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_Std__StdString_t[] = {  {&_swigt__p_std__initializer_listT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_double_t[] = {  {&_swigt__p_std__initializer_listT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_float_t[] = {  {&_swigt__p_std__initializer_listT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_int_t[] = {  {&_swigt__p_std__initializer_listT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_long_long_t[] = {  {&_swigt__p_std__initializer_listT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_long_t[] = {  {&_swigt__p_std__initializer_listT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_short_t[] = {  {&_swigt__p_std__initializer_listT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_signed_char_t[] = {  {&_swigt__p_std__initializer_listT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_char_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_int_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_long_long_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_long_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_unsigned_short_t[] = {  {&_swigt__p_std__initializer_listT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_Std__StdString_Std__StdString_t[] = {  {&_swigt__p_std__mapT_Std__StdString_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SWIGLUA_REF_t[] = {  {&_swigt__p_std__vectorT_SWIGLUA_REF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Std__StdString_t[] = {  {&_swigt__p_std__vectorT_Std__StdString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t[] = {  {&_swigt__p_std__vectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_double_t[] = {  {&_swigt__p_std__vectorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DIR,
  _swigc__p_Int64,
  _swigc__p_Reader,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_Std__Anything,
  _swigc__p_Std__BasicType,
  _swigc__p_Std__BinaryFileReader,
  _swigc__p_Std__BinaryFileWriter,
  _swigc__p_Std__BitArray,
  _swigc__p_Std__Dir,
  _swigc__p_Std__DirEntry,
  _swigc__p_Std__FileStatus,
  _swigc__p_Std__FileSystem,
  _swigc__p_Std__GNUPlot,
  _swigc__p_Std__Glob,
  _swigc__p_Std__JSON,
  _swigc__p_Std__JSONArray,
  _swigc__p_Std__JSONBool,
  _swigc__p_Std__JSONDouble,
  _swigc__p_Std__JSONInt,
  _swigc__p_Std__JSONInt64,
  _swigc__p_Std__JSONString,
  _swigc__p_Std__JSONUInt,
  _swigc__p_Std__JSONUInt64,
  _swigc__p_Std__JSONValue,
  _swigc__p_Std__LabelParameters,
  _swigc__p_Std__LineReaderParams,
  _swigc__p_Std__Path,
  _swigc__p_Std__RandomBase,
  _swigc__p_Std__RandomKnuth,
  _swigc__p_Std__RandomMersenne,
  _swigc__p_Std__RandomMersenne64,
  _swigc__p_Std__RandomMinStd,
  _swigc__p_Std__RandomRanLux24,
  _swigc__p_Std__RandomRanLux48,
  _swigc__p_Std__SeparatorParams,
  _swigc__p_Std__StdBitVector,
  _swigc__p_Std__StdCsvDocument,
  _swigc__p_Std__StdFile,
  _swigc__p_Std__StdObject,
  _swigc__p_Std__StdRandom,
  _swigc__p_Std__StdRandomUniform,
  _swigc__p_Std__StdRandomUniform64,
  _swigc__p_Std__StdString,
  _swigc__p_Std__StdStringMap,
  _swigc__p_Std__StdVectorT_SWIGLUA_REF_t,
  _swigc__p_Std__StdVectorT_Std__StdString_t,
  _swigc__p_Std__StdVectorT_double_t,
  _swigc__p_Std__StdVectorT_float_t,
  _swigc__p_Std__StdVectorT_int_t,
  _swigc__p_Std__StdVectorT_long_long_t,
  _swigc__p_Std__StdVectorT_long_t,
  _swigc__p_Std__StdVectorT_short_t,
  _swigc__p_Std__StdVectorT_signed_char_t,
  _swigc__p_Std__StdVectorT_unsigned_char_t,
  _swigc__p_Std__StdVectorT_unsigned_int_t,
  _swigc__p_Std__StdVectorT_unsigned_long_long_t,
  _swigc__p_Std__StdVectorT_unsigned_long_t,
  _swigc__p_Std__StdVectorT_unsigned_short_t,
  _swigc__p_Std__barrier,
  _swigc__p_Std__cond,
  _swigc__p_Std__fd,
  _swigc__p_Std__hold,
  _swigc__p_Std__hostname,
  _swigc__p_Std__ipaddr,
  _swigc__p_Std__location,
  _swigc__p_Std__mmap,
  _swigc__p_Std__mutex,
  _swigc__p_Std__rdhold,
  _swigc__p_Std__rwlock,
  _swigc__p_Std__socket,
  _swigc__p_Std__thread,
  _swigc__p_Std__wrhold,
  _swigc__p_Value,
  _swigc__p_ValueType,
  _swigc__p_dirent,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_gnuplot_ctrl,
  _swigc__p_in6_addr,
  _swigc__p_in_addr,
  _swigc__p_in_addr_t,
  _swigc__p_in_port_t,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_off_t,
  _swigc__p_rapidcsv__Document,
  _swigc__p_rapidcsv__LabelParams,
  _swigc__p_rapidcsv__LineReaderParams,
  _swigc__p_rapidcsv__SeparatorParams,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_sockaddr,
  _swigc__p_sockaddr_in,
  _swigc__p_sockaddr_in6,
  _swigc__p_socklen_t,
  _swigc__p_ssize_t,
  _swigc__p_std__filesystem__directory_entry,
  _swigc__p_std__filesystem__file_status,
  _swigc__p_std__functionT_void_fvoidF_t,
  _swigc__p_std__initializer_listT_SWIGLUA_REF_t,
  _swigc__p_std__initializer_listT_Std__StdString_t,
  _swigc__p_std__initializer_listT_double_t,
  _swigc__p_std__initializer_listT_float_t,
  _swigc__p_std__initializer_listT_int_t,
  _swigc__p_std__initializer_listT_long_long_t,
  _swigc__p_std__initializer_listT_long_t,
  _swigc__p_std__initializer_listT_short_t,
  _swigc__p_std__initializer_listT_signed_char_t,
  _swigc__p_std__initializer_listT_unsigned_char_t,
  _swigc__p_std__initializer_listT_unsigned_int_t,
  _swigc__p_std__initializer_listT_unsigned_long_long_t,
  _swigc__p_std__initializer_listT_unsigned_long_t,
  _swigc__p_std__initializer_listT_unsigned_short_t,
  _swigc__p_std__mapT_Std__StdString_Std__StdString_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_SWIGLUA_REF_t,
  _swigc__p_std__vectorT_Std__StdString_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_char_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_double_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_long_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

