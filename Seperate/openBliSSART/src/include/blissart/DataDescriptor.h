//
// This file is part of openBliSSART.
//
// Copyright (c) 2007-2009, Alexander Lehmann <lehmanna@in.tum.de>
//                          Felix Weninger <felix@weninger.de>
//                          Bjoern Schuller <schuller@tum.de>
//
// Institute for Human-Machine Communication
// Technische Universitaet Muenchen (TUM), D-80333 Munich, Germany
//
// openBliSSART is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation, either version 2 of the License, or (at your option) any later
// version.
//
// openBliSSART is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// openBliSSART.  If not, see <http://www.gnu.org/licenses/>.
//


#ifndef __BLISSART_DATADESCRIPTOR_H__
#define __BLISSART_DATADESCRIPTOR_H__


#include <common.h>
#include <blissart/DatabaseEntity.h>


namespace blissart {


/**
 * \addtogroup framework
 * @{
 */

/**
 * A descriptor for data computed from an input file.
 */
class LibFramework_API DataDescriptor : public DatabaseEntity
{
public:
    /**
     * An enumeration of the available data descriptor types.
     * NOTE: Assigning constant values to the enums assures database
     * integrity when adding new data descriptor types.
     */
    typedef enum {
        Invalid = 0,
        MagnitudeMatrix = 4,    // A magnitude matrix generated by STFT.
        PhaseMatrix = 1,        // A phase matrix generated by STFT.
        Spectrum = 2,           // A spectral matrix generated by NMF/NMD.
        Gains = 3,              // A gains vector generated by NMF/NMD.
        FeatureMatrix = 7       // Generic type for matrices containing 
                                // time-varying features.
    } Type;

    /**
     * Default constructor. Creates an empty DataDescriptor.
     */
    DataDescriptor();
    
    /**
     * Copies all data from another DataDescriptor.
     */
    DataDescriptor(const DataDescriptor& other);
    
    /**
     * A unique ID for the DataDescriptor.
     */
    int descrID;
    
    /**
     * ID of the Process that was used to create the data.
     */
    int processID;
    
    /**
     * The type of this descriptor's data.
     */
    Type type;

    /**
     * An index, which can be used to represent vectors or arrays of data.
     */
    int index;

    /**
     * Secondary index, which can e.g. be used to represent two-dimensional 
     * decompositions.
     */
    int index2;

    /**
     * Tells if the associated data is actually available.
     */
    bool available;

    /**
     * Returns a textual representation of the given type.
     * @throw                   Poco::NotImplementedException
     */
    static std::string strForType(Type type);


    /**
     * Returns a short (max. 5 characters) textual representation of the given
     * type.
     */
    static std::string strForTypeShort(Type type);
};


typedef Poco::AutoPtr<DataDescriptor> DataDescriptorPtr;


/**
 * @}
 */


} // namespace blissart


#endif // __BLISSART_DATADESCRIPTOR_H__
