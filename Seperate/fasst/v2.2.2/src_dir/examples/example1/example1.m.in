% This is an example of script for source separation of 3 tracks (drums, voice 
% and piano) from an instantaneous mixtures.
% 
% Parameters used to initialize FASST in this example:
% * Mixture type : instantaneous.
% * Time-Frequency representation : STFT with 1024 frequency bins.
% * Source paramater Wex : Normally distributed random matrix (default init).
% * Source paramater Hex : Normally distributed random matrix (default init).
% * Source paramater A : balanced gains (left, middle, right)
% * Source paramater adaptability : free, all previous parameters are
%   updated during the iterative EM process.
% * Number of EM iterations : 200
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2018 Ewen Camberlein (INRIA), Romain Lebarbenchon (INRIA)
% This software is distributed under the terms of the GNU Public License
% version 3 (http://www.gnu.org/licenses/gpl.txt)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Cleaning
clear data;
clear sources;

%% ------------------------------------------------------------------------
%                      Paths management
%--------------------------------------------------------------------------

% Add FASST directory to PATH
fasst_matlab_dir = '@FASST_MATLAB_DIR@';
if ~exist('fasst_writeXML', 'file')
    addpath(fasst_matlab_dir);
end


% Add tools PATH to MATLAB
addpath('../tools')

%create necessary folders
results_dir = 'results/'; % Results folder
tmp_dir    = 'temp/';     % Temporary folder (intermediate files generated by FASST)

if ~exist(results_dir, 'dir')
    mkdir(results_dir);
end
if ~exist(tmp_dir, 'dir')
    mkdir(tmp_dir);
end

%% ------------------------------------------------------------------------
%                   Mixture and audio scene information
%--------------------------------------------------------------------------

mixture_wavname = 'Shannon_Hurley__Sunrise__inst__mix.wav';
[x_mix,fs] = audioread(mixture_wavname);

% Number of sources
J = 3; 

% Mixture number of samples and number of channels (I)
[nbSamples_Mix,I] = size(x_mix);

%% ------------------------------------------------------------------------
%            FASST Initialization (compute input xml file)
%--------------------------------------------------------------------------

disp([newline '> FASST initialization']);

% --- FASST general configuration (direct inputs for FASST)

transformType     = 'STFT';   % Time-frequency transform (STFT | ERB | ERBLET)
wlen              = 1024;     % Window length in samples (frame length in time domain) - should be multiple of 4 for STFT

nbin_ERB          = 32;      % Number of total frequency bins for ERB - ERB mandatory param
nbinPerERB_ERBLET = 1;       % Number of frequency bins per ERB for ERBLET (1 bin per ERB with 1600 kHz fs lead to nbin = 34 ) - ERBLET mandatory param

Niteration_EM     = 200;     % Number of iteration of EM algorithm for sources models estimation

% --- Initialization of models and FASST specific parameters for each source

% Define necessary parameters
N                 = ceil(nbSamples_Mix/wlen*2); % Number of frames
K                 = 4;                          % NFM rank (number of spectral patterns in the dictionary)

% --- Compute the number of frequency bins and the center of frequency bands / clean unused params with respect to chosen transform ---
[freqBandCenters_Hz, nbin, nbinPerERB_ERBLET, nbin_ERB] =  get_freqScaleParams(transformType,wlen,nbin_ERB,nbinPerERB_ERBLET,fs);

disp('>> User Params:');
disp(['   Transform:' transformType] );
disp(['     - wlen:' num2str(wlen) ]);
disp(['     - nbin:' num2str(nbin) ]);
disp(['     - nbin_ERB:' num2str(nbin_ERB) ]);
disp(['     - nbinPerERB_ERBLET:' num2str(nbinPerERB_ERBLET) ]);
disp(['   J (number of sources):' num2str(J) ]);
disp(['   K (NMF rank):' num2str(K) ]);

sources=[];
% Set common parameters for sources models
for j = 1:J
    % Name of output audio file for source j
    sources{j}.name = ['EstimatedSource_',num2str(j)];
    
    % Type of mixture
    sources{j}.A.mixingType = 'inst';   % Instantaneous mixture
    
    % Spatial model adaptability
    sources{j}.A.adaptability = 'free'; % Will be adapted by FASST
    
    % Spectral patterns (Wex) and time activation patterns applied to spectral patterns (Hex)   
    % Adaptability of models
    sources{j}.Wex.adaptability = 'free'; % Will be adapted by FASST
    sources{j}.Hex.adaptability = 'free'; % Will be adapted by FASST
    
    % Initialization of models
    sources{j}.Wex.data = 0.75 * abs(randn(nbin, K)) + 0.25 * ones(nbin, K);
    sources{j}.Hex.data = 0.75 * abs(randn(K, N)) + 0.25 * ones(K, N);
    
    % Wiener filter parameters   
    sources{j}.wiener.a  = 0;    % a  : Over-substraction parameter (in dB) - Default value = 0 
    sources{j}.wiener.b  = 0;    % b  : Phase ponderation parameter (inside [0,1]) - Default value = 0 
    sources{j}.wiener.c1 = 0;    % c1 : Half-time width of the covariance smoothing window ( c1 >= 0)- Default value = 0 
    sources{j}.wiener.c2 = 0;    % c2 : Half-frequency width of the covariance smoothing window ( c2 >= 0)- Default value = 0 
    sources{j}.wiener.d  = -Inf; % d  : Thresholding parameter ( in dB, d <= 0)- Default value = -Inf 
end

% Set specific initialization parameters for sources models (spatial initialization ~ init gain balance for each source for instantaneous mixture)
sources{1}.A.data = [sin(pi/8); cos(pi/8)];
sources{2}.A.data = [sin(pi/4); cos(pi/4)];
sources{3}.A.data = [sin(3*pi/8); cos(3*pi/8)];

% --- Write FASST_data structure in FASST input xml file

% Define FASST data structure
FASST_data.tfr_type                = transformType;
FASST_data.nbin                    = nbin;
FASST_data.nbinPerERB_ERBLET       = nbinPerERB_ERBLET;
FASST_data.wlen                    = wlen;
FASST_data.iterations              = Niteration_EM;
FASST_data.sources                 = sources;

% Write parameters to XML
xml_fname = [tmp_dir 'sources.xml'];
fasst_writeXML(xml_fname, FASST_data);

%% ------------------------------------------------------------------------
%                         Call FASST binaries
%--------------------------------------------------------------------------

disp([newline '> FASST execution']);

disp('>> Input time-frequency representation');
fasst_compute_mixture_covariance_matrix(mixture_wavname, xml_fname, tmp_dir)

disp('>> Refinement of sources models (EM algorithm)');
fasst_estimate_source_parameters(xml_fname, tmp_dir, [xml_fname '.new'])

disp('>> Computation of estimated sources');
fasst_estimate_sources(mixture_wavname, [xml_fname '.new'],tmp_dir, results_dir)

% Delete temporary folder
rmdir(tmp_dir,'s')
fprintf('\n');